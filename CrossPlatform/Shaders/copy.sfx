//  Copyright (c) 2015-2016 Simul Software Ltd. All rights reserved.

RWTexture1D<int4> abc : register(u0);

#include "shader_platform.sl"
#include "common.sl"

uniform RWTexture1D<int4> DestTex1i : register(u0);
uniform Texture1D<int4> SourceTex1i : register(t0);

uniform RWTexture2D<int4> DestTex2i : register(u0);
uniform Texture2D<int4> SourceTex2i : register(t0);

uniform RWTexture3D<int4> DestTex3i : register(u0);
uniform Texture3D<int4> SourceTex3i : register(t0);

uniform RWTexture1D<vec4> DestTex1 : register(u0);
uniform Texture1D<vec4> SourceTex1 : register(t0);

uniform RWTexture2D<vec4> DestTex2 : register(u0);
uniform Texture2D<vec4> SourceTex2 : register(t0);

uniform RWTexture3D<vec4> DestTex3 : register(u0);
uniform Texture3D<vec4> SourceTex3 : register(t0);

SamplerState YCbCrSampler : register(s0);

uniform RWStructuredBuffer<uint> targetCopyBufferRW : register(u0);
uniform StructuredBuffer<uint> sourceCopyBuffer : register(t0);

#ifdef __PSSL__
CS_LAYOUT(64,1,1)
shader void CS_CopyBuffer(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	uint3 sub_pos = g * 64 + t;
	uint dim;
	uint stride;
	targetCopyBufferRW.GetDimensions(dim,stride);
	if(sub_pos.x>=dim)
		return;
	targetCopyBufferRW[sub_pos.x]	=sourceCopyBuffer[sub_pos.x];
}

CS_LAYOUT(64,1,1)
shader void Copy1DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex1i[position.x] = SourceTex1i.Load(int2(position.x, 0));
}
#endif

CS_LAYOUT(8,8,1)
shader void Copy2DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex2i[position.xy] = SourceTex2i.Load(int3(position.x, position.y, 0));
}
CS_LAYOUT(4,4,4)
shader void Copy3DInt4( uint3 position : SV_DispatchThreadID )
{
	DestTex3i[position] = SourceTex3i.Load(int4(position.x, position.y, position.z, 0));
}

CS_LAYOUT(64,1,1)
shader void Copy1D( uint3 position : SV_DispatchThreadID )
{
	DestTex1[position.x] = SourceTex1.Load(int2(position.x, 0));
}

CS_LAYOUT(8,8,1)
shader void Copy2D( uint3 position : SV_DispatchThreadID )
{
	DestTex2[position.xy] = SourceTex2.Load(int3(position.x, position.y, 0));
}

CS_LAYOUT(8,8,1)
shader void Copy2DFromVideo( uint3 position : SV_DispatchThreadID )
{
#if 0
	float2 size;
	SourceTex2.GetDimensions(size.x, size.y);
	float2 texCoords = float2(float(position.x), float(position.y)) / size;
	vec4 clr = SourceTex2.SampleLevel(YCbCrSampler, texCoords, 0.0);
#else
	vec3 value = SourceTex2.Load(int3(position.x, position.y, 0)).rgb;
	float Cr = value.r - 0.5;
	float Cb = value.b - 0.5;
	float Y1 = value.g;
	
	vec4 clr;
	//ITU-R BT.709 conversion https://en.wikipedia.org/wiki/YCbCr
	clr.r = (1.0000 * Y1) + (0.0000 * Cb) + (1.5748 * Cr);
	clr.g = (1.0000 * Y1) - (0.1873 * Cb) - (0.4681 * Cr);
	clr.b = (1.0000 * Y1) + (1.8556 * Cb) + (0.0000 * Cr);
	clr.a = 1.0;
#endif
	DestTex2[position.xy] = clr;
}

CS_LAYOUT(4,4,4)
shader void Copy3D( uint3 position : SV_DispatchThreadID )
{
	DestTex3[position] = SourceTex3.Load(int4(position.x, position.y, position.z, 0));
}

#ifdef __PSSL__
technique copy_buffer
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_CopyBuffer()));
    }
}

technique copy_1d_int4
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy1DInt4()));
	}
}
#endif
technique copy_2d_int4
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy2DInt4()));
	}
}

technique copy_3d_int4
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy3DInt4()));
	}
}

technique copy_1d
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy1D()));
	}
}

technique copy_2d
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy2D()));
	}
}

// This is only different from the above in Vulkan. The shader source is the same, but we need a separate copy of the pass because it will be modified at runtime.
technique copy_2d_from_video
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy2DFromVideo()));
	}
}

technique copy_3d
{
	pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,Copy3D()));
	}
}