
#ifndef _OCEAN_WAVE_H
#define _OCEAN_WAVE_H

#include "SimulDirectXHeader.h"
#ifndef SIMUL_WIN8_SDK
#include <D3DX9.h>
#endif

#include "Simul/Terrain/BaseSeaRenderer.h"
#include "CSFFT/fft_512x512.h"
#include "Simul/Platform/DirectX11/Utilities.h"
#include "Simul/Platform/DirectX11/Texture.h"
#include "Simul/Platform/CrossPlatform/Effect.h"

//#define CS_DEBUG_BUFFER
#define PAD16(n) (((n)+15)/16*16)

namespace simul
{
	namespace dx11
	{
		class OceanSimulator
		{
		public:
			OceanSimulator(simul::terrain::SeaKeyframer *s);
			~OceanSimulator();

			void RestoreDeviceObjects(simul::crossplatform::RenderPlatform *r);
			
			void SetShader(crossplatform::Effect		*effect);
			void InvalidateDeviceObjects();
			// -------------------------- Initialization & simulation routines ------------------------
			// Update ocean wave when tick arrives.
			void updateDisplacementMap(simul::crossplatform::DeviceContext &deviceContext,float time);

			// Texture access
			ID3D11ShaderResourceView* GetFftInput();
			ID3D11ShaderResourceView* GetFftOutput();
			ID3D11ShaderResourceView* GetSpectrum();
			crossplatform::Texture* getDisplacementMap();
			crossplatform::Texture* getGradientMap();

			const terrain::SeaKeyframer *GetSeaKeyframer();

		protected:
			void EnsureTablesInitialized(simul::crossplatform::DeviceContext &deviceContext);
			terrain::SeaKeyframer *m_param;
			int gridSize;
			// ---------------------------------- GPU shading assets -----------------------------------
			// D3D objects
			crossplatform::RenderPlatform *renderPlatform;
			crossplatform::Effect		*effect;
	
			// Displacement map
			simul::crossplatform::Texture *displacement;

			// Gradient field
			simul::crossplatform::Texture *gradient;

			// Initialize the vector field.
			void initHeightMap(vec2* out_h0, float* out_omega);

			// ----------------------------------- CS simulation data ---------------------------------
			// Initial height field H(0) generated by Phillips spectrum & Gauss distribution.
			crossplatform::StructuredBuffer<vec2>	H0;
			// Angular frequency
			crossplatform::StructuredBuffer<float>	Omega;
			crossplatform::StructuredBuffer<vec2>	Choppy;

			// Height field H(t), choppy field Dx(t) and Dy(t) in frequency domain, updated each frame.
			crossplatform::ConstantBuffer<cbImmutable>		immutableConstants;
			crossplatform::ConstantBuffer<cbChangePerFrame>	changePerFrameConstants;
			// Height & choppy buffer in the space domain, corresponding to H(t), Dx(t) and Dy(t)
			crossplatform::StructuredBuffer<vec2>	dxyz;

			// FFT wrap-up
			Fft m_fft;
			float start_time;
			unsigned propertiesChecksum;
		};
	}
}
#endif	// _OCEAN_WAVE_H
