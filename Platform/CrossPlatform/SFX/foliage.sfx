//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/states.sl"
#include "../SL/foliage_constants.sl"

// a grid of unsigned 32-bit integers. the first (x) is an index to the next level down.
uniform RWTexture3D<vec4> SparseTextureUAV;
uniform Texture3D SparseTexture;

uint3 GetNextIndex(uint3 last_index)
{
	uint3 index	=last_index;
	index.x		=index.x+1;
	if(index.x>=grid_size)
	{
		index.x=0;
		index.y=index.y+1;
		if(index.y>=grid_size)
		{
			index.y=0;
			index.z=index.z+1;
		}
	}
	return index;
}

uint Index3ToUint(uint3 index)
{
	uint res=(index.z<<20)+(index.y<<10)+(index.x);
	return res;
}

uint3 UintToIndex3(uint u)
{
	uint3 index;
	uint X=((2<<10)-1);
	uint Y=X<<10;
	uint Z=Y<<10;
	index.x=u&X;
	index.y=(u&Y)>>10;
	index.z=(u&Z)>>20;
	return index;
}

uint3 Index3ToPos(uint3 index)
{
	return index*grid_size;
}

#define max_level (0)

void FillInSparse(int level,inout uint3 last_index)
{
	for(uint i=0;i<128;i++)
	{
		for(uint j=uint(0);j<128;j++)
		{
			for(uint k=0;k<128;k++)
			{
				uint3 pos=uint3(i,j,k);//+Index3ToPos(last_index);
				if(level<max_level)
				{
					uint3 next_index=GetNextIndex(last_index);
					//FillInSparse(level+1,next_index); 
				}
				else
				{
					vec3 xw					=mul(transformMatrix,vec4(pos,1.0)).xyz;
					float r					=length(xw)/1000.0;
					uint4 res				=uint4(0x7FFFFFFF,0,0,1);
					SparseTextureUAV[pos]	=vec4(1,0,1,0.5);//res;
				}
			}
		}
	}
}

// We'll call this on an N-grid, for the initial outer level.
CS_LAYOUT(8,8,8)
shader void CS_FillInFoliage(uint3 sub_pos: SV_DispatchThreadID )
{
	int level					=0;
	uint4 res;
	uint3 last_index			=uint3(0,0,0);
	vec3 xv						=vec3(sub_pos)/vec3(texture_size);
	vec3 xw						=mul(transformMatrix,vec4(xv,1.0)).xyz;
	float opacity				=saturate(1.0-length(xw.xy/6000.0));
	SparseTextureUAV[sub_pos]	=vec4(opacity,0,0,opacity);//res;
}

// trace rays through the foliage texture.
shader vec4 PS_Foliage(posTexVertexOutput IN) : SV_TARGET
{
	vec4 clip_pos			=vec4(-1.0,1.0,1.0,1.0);
	clip_pos.x				+=2.0*IN.texCoords.x;
	clip_pos.y				-=2.0*IN.texCoords.y;
	vec3 view				=normalize(mul(invViewProj,clip_pos).xyz);
    return vec4(0,0.25,0,0.5);
}

VertexShader vs = CompileShader(vs_4_0, VS_SimpleFullscreen());
technique render_foliage
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AlphaBlend,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs);
		SetPixelShader(CompileShader(ps_4_0,PS_Foliage()));
    }
}

technique build_sparse_texture
{
    pass c0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_FillInFoliage()));
    }
}