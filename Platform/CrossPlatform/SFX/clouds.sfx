#include "shader_platform.sl"
#include "../../CrossPlatform/SL/common.sl"
#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/simul_cloud_constants.sl"
#include "../../CrossPlatform/SL/depth.sl"
#include "../../CrossPlatform/SL/simul_clouds.sl"
#include "../../CrossPlatform/SL/states.sl"
#include "../../CrossPlatform/SL/earth_shadow_fade.sl"
#include "../../CrossPlatform/SL/debug_constants.sl"

uniform Texture3D cloudDensity1					SIMUL_TEXTURE_REGISTER(0);
uniform Texture3D cloudDensity2					SIMUL_TEXTURE_REGISTER(1);
uniform Texture2D noiseTexture					SIMUL_TEXTURE_REGISTER(2);
uniform Texture2D cloudShadowTexture			SIMUL_TEXTURE_REGISTER(2);
uniform Texture2D lossTexture					SIMUL_TEXTURE_REGISTER(3);
uniform Texture2D inscTexture					SIMUL_TEXTURE_REGISTER(4);
uniform Texture2D skylTexture					SIMUL_TEXTURE_REGISTER(5);
uniform Texture2D depthTexture					SIMUL_TEXTURE_REGISTER(6);
uniform Texture3D noiseTexture3D				SIMUL_TEXTURE_REGISTER(7);
uniform Texture3D lightningIlluminationTexture	SIMUL_TEXTURE_REGISTER(8);
uniform Texture3D cloudDensity					SIMUL_TEXTURE_REGISTER(9);
uniform Texture2D illuminationTexture			SIMUL_TEXTURE_REGISTER(10);
uniform Texture2D lightTableTexture				SIMUL_TEXTURE_REGISTER(11);
uniform Texture2D rainbowLookupTexture			SIMUL_TEXTURE_REGISTER(12);
uniform Texture2D coronaLookupTexture			SIMUL_TEXTURE_REGISTER(13);
uniform Texture3D volumeInscatterTexture;
uniform Texture2D nearFarTexture;
uniform Texture2D cloudGodraysTexture;
uniform Texture2D rainMapTexture;
uniform TextureCube diffuseCubemap;
uniform RWTexture3D<vec4> outputTexture3d;
uniform RWStructuredBuffer<VolumeQueryResult> volumeQueryResults;

uniform StructuredBuffer<vec3> queryInputs;

uniform RWStructuredBuffer<LineQueryResult> lineQueryResults;


CS_LAYOUT(1,1,1)
shader void CS_PointQueries(uint3 sub_pos: SV_DispatchThreadID )
{
	uint num=0;
	uint byteStride=0;
	//queryInputs.GetDimensions(num,byteStride);
	//if(sub_pos.x>=num)
	//	return;
	VolumeQueryResult res;
	res.pos_km						=queryInputs[sub_pos.x];
	res.valid						=1;
	vec3 cloudTexCoords				=(res.pos_km-cornerPosKm)*inverseScalesKm;
	vec4 lookup						=sample_3d_lod(cloudDensity,cloudSamplerState,cloudTexCoords,0);
	res.density						=lookup.z;
	res.direct_light				=lookup.y;
	res.indirect_light				=lookup.x;
	res.ambient_light				=lookup.w;
	volumeQueryResults[sub_pos.x]	=res;
}

CS_LAYOUT(1,1,1)
shader void CS_LineQueries(uint3 sub_pos: SV_DispatchThreadID )
{
	uint num=0;
	uint byteStride=0;
	//queryInputs.GetDimensions(num,byteStride);
	//if(sub_pos.x>=num/2)
	//	return;
	LineQueryResult res;
	vec3 start_pos					=queryInputs[sub_pos.x*2];
	vec3 end_pos					=queryInputs[sub_pos.x*2+1];
	res.pos1_km						=start_pos;
	res.pos2_km						=end_pos;
	res.valid						=1;
	res.density						=0.0;
	res.visibility					=1.0;
	res.optical_thickness_km	=0.0;
	res.first_contact_km		=length(end_pos-start_pos);
	vec3 dir						=normalize(res.pos2_km-res.pos1_km);
	// How far under?
	float under						=max(0.0,cornerPosKm.z-res.pos1_km.z);
	res.pos1_km						+=dir/(max(0.0001,dir.z))*under;
	// How far over?
	float over						=max(0.0,res.pos2_km.z-cornerPosKm.z-1.0/inverseScalesKm.z);
	res.pos1_km						+=dir/(max(0.0001,-dir.z))*over;
	if(dot(dir,res.pos2_km-res.pos1_km)>0.0)
	{
		float stepSize					=length(res.pos2_km-res.pos1_km)/32.0;
		for(int i=0;i<33;i++)
		{
			vec3 pos						=lerp(res.pos1_km,res.pos2_km,float(i)/32.0);
			vec3 cloudTexCoords				=(pos-cornerPosKm)*inverseScalesKm;
			vec4 lookup						=sample_3d_lod(cloudDensity,cloudSamplerState,cloudTexCoords,0);
			res.density						+=lookup.z/32.0;
			if(res.density>0.0)
				res.first_contact_km	=min(res.first_contact_km,length(pos-start_pos));
			res.visibility					*=1.0-lookup.z;
			res.optical_thickness_km	+=stepSize*lookup.z;
		}
	}
	lineQueryResults[sub_pos.x]	=res;
}

#ifndef DETAIL_NOISE
	#define DETAIL_NOISE 1
#endif

CS_LAYOUT(8,8,8)
shader void CS_Mix( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 pos=g*8+t;
	vec4 c1=TEXTURE_LOAD_3D(cloudDensity1,pos);
	vec4 c2=TEXTURE_LOAD_3D(cloudDensity2,pos);
   // vec4 res= lerp(cloudDensity1[pos],cloudDensity2[pos],cloud_interp);
	//res.z=1.0;
	//output[pos].rgba=res;
    vec4 res= lerp(c1,c2,cloud_interp);
	IMAGE_STORE_3D(outputTexture3d,pos,res);
	//outputTexture3d[pos].rgba=res;
}


CS_LAYOUT(8,8,8)
shader void CS_Simulate( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 pos=g*8+t;
	vec4 c1=TEXTURE_LOAD_3D(cloudDensity1,pos);
	vec4 c2=TEXTURE_LOAD_3D(cloudDensity2,pos);
   // vec4 res= lerp(cloudDensity1[pos],cloudDensity2[pos],cloud_interp);
	//res.z=1.0;
	//output[pos].rgba=res;
    vec4 res= lerp(c1,c2,cloud_interp);
	IMAGE_STORE_3D(outputTexture3d,pos,res);
	//outputTexture3d[pos].rgba=res;
}
// Given texture position from texCoords, convert to a worldpos with shadowMatrix.
// Then, trace towards sun to find initial intersection with cloud volume
// Then trace down to find first intersection with clouds, if any.
shader vec4 PS_CloudShadow( posTexVertexOutput IN):SV_TARGET
{
	return CloudShadow(cloudDensity,IN.texCoords,shadowMatrix,cornerPosKm,inverseScalesKm);
}

shader vec4 PS_RainMap(posTexVertexOutput IN) : SV_TARGET
{
	float r=MakeRainMap(cloudDensity,cloud_interp,IN.texCoords);
	return vec4(r,r,r,r);
}

shader vec4 PS_MoistureAccumulation( posTexVertexOutput IN):SV_TARGET
{
	float m=MoistureAccumulation(cloudShadowTexture,shadowTextureSize,IN.texCoords);
	return vec4(m,m,m,m);
}

float CloudsOcclusion(Texture3D cloudDensity1,Texture3D cloudDensity2,Texture3D cloudDensity,float cloud_interp,vec3 viewPos,vec3 directionToSun)
{
	return 0.f;
}

vec4 SimpleRaytrace(posTexVertexOutput IN,bool reverseDepth)
{
	vec4 dlookup 	=texture_nearest_lod(depthTexture,viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias),0);
	vec2 texCoords	=mixedResTransformXYWH.xy + IN.texCoords.xy*mixedResTransformXYWH.zw;

	vec4 clip_pos	=vec4(-1.0, 1.0, 1.0, 1.0);
	clip_pos.x		+=2.0*texCoords.x;
	clip_pos.y		-=2.0*texCoords.y;
	vec3 view		=normalize(mul(invViewProj, clip_pos).xyz);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=reverseDepth;
	RaytracePixelOutput p	=RaytraceCloudsForward(
									cloudDensity
									,rainMapTexture
									,noiseTexture3D
									,noiseTexture
									,lightTableTexture
									,illuminationTexture
									,rainbowLookupTexture
									,coronaLookupTexture
									,lossTexture
									,inscTexture
									,skylTexture,volumeInscatterTexture
									,false
									,depthInterpretationStruct
									,dlookup
									,texCoords
									,false
									,false
									,false
									,cloudIrRadiance1,cloudIrRadiance2
									);

	if(p.colour.a>=1.0)
	   discard;
	return p.colour;
}

shader vec4 PS_SimpleRaytrace_depthForward(posTexVertexOutput IN) : SV_TARGET
{
	return SimpleRaytrace(IN,false);
}

shader vec4 PS_SimpleRaytrace_depthReverse(posTexVertexOutput IN) : SV_TARGET
{
	return SimpleRaytrace(IN,true);
}

FarNearPixelOutput PS_Lightpass(posTexVertexOutput IN,bool reverseDepth)
{
	vec4 dlookup 			=texture_nearest_lod(depthTexture,viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias),0);
	vec2 texCoords			=mixedResTransformXYWH.xy+IN.texCoords.xy*mixedResTransformXYWH.zw;
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams	=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth				=reverseDepth;
	FarNearPixelOutput f	=Lightpass(
									cloudDensity
									,rainMapTexture
									,noiseTexture3D
									,noiseTexture
									,lossTexture
									,depthInterpretationStruct
									,dlookup
									,texCoords
									,sourcePosKm
									,sourceRadiusKm
									,spectralFluxOver1e6
									,maxCosine
									,maxRadiusKm
									,irradianceThreshold
									);
	return f;
}

shader FarNearPixelOutput PS_Lightpass_DepthReverse(posTexVertexOutput IN) 
{
	return PS_Lightpass(IN,true);
}

shader FarNearPixelOutput PS_Lightpass_DepthForward(posTexVertexOutput IN) 
{
	return PS_Lightpass(IN,true);
}

struct FarNearDepthPixelOutput
{
	vec4 farColour		SIMUL_RENDERTARGET_OUTPUT(0);
	vec4 nearColour		SIMUL_RENDERTARGET_OUTPUT(1);
	vec4 nearFarDepth	SIMUL_RENDERTARGET_OUTPUT(2);
};

FarNearDepthPixelOutput PS_Raytrace(posTexVertexOutput IN,bool reverseDepth)
{
	vec4 dlookup 			=texture_nearest_lod(depthTexture,viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias),0);
	vec2 texCoords			=mixedResTransformXYWH.xy+IN.texCoords.xy*mixedResTransformXYWH.zw;
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams	=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth				=reverseDepth;
	RaytracePixelOutput f	=RaytraceCloudsForward(
									cloudDensity
									,rainMapTexture
									,noiseTexture3D
									,noiseTexture
									,lightTableTexture
									,illuminationTexture
									,rainbowLookupTexture
									,coronaLookupTexture
									,lossTexture
									,inscTexture
									,skylTexture,volumeInscatterTexture
									,true
									,depthInterpretationStruct
									,dlookup
									,texCoords
									,true
									,true
									,true
									,cloudIrRadiance1,cloudIrRadiance2
									);
	FarNearDepthPixelOutput fn;
	fn.farColour=f.colour;
	fn.nearColour=f.nearColour;
	fn.nearFarDepth = f.nearFarDepth;
	return fn;
}

shader FarNearDepthPixelOutput PS_Raytrace_depthReverse(posTexVertexOutput IN)
{
	return PS_Raytrace(IN,true);
}

shader FarNearDepthPixelOutput PS_Raytrace_depthForward(posTexVertexOutput IN)
{
	return PS_Raytrace(IN,false);
}

FarNearDepthPixelOutput PS_RaytraceNoRain(posTexVertexOutput IN,bool reverseDepth)
{
	vec4 dlookup 			=texture_nearest_lod(depthTexture,viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias),0);
	vec2 texCoords			=mixedResTransformXYWH.xy+IN.texCoords.xy*mixedResTransformXYWH.zw;
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams	=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth				=reverseDepth;
	RaytracePixelOutput f	=RaytraceCloudsForward(
									cloudDensity
									,rainMapTexture
									,noiseTexture3D
									,noiseTexture
									,lightTableTexture
									,illuminationTexture
									,rainbowLookupTexture
									,coronaLookupTexture
									,lossTexture
									,inscTexture
									,skylTexture,volumeInscatterTexture
									,true
									,depthInterpretationStruct
									,dlookup
									,texCoords
									,true
									,true
									,false
									,cloudIrRadiance1
									,cloudIrRadiance2
									);
	FarNearDepthPixelOutput fn;
	fn.farColour=f.colour;
	fn.nearColour = f.nearColour;
	//fn.nearColour	=vec4(depthToLinearDistance(dlookup.xy, depthInterpretationStruct),0,0);
	fn.nearFarDepth = f.nearFarDepth;
	return fn;
}

shader FarNearDepthPixelOutput PS_RaytraceNoRain_depthReverse(posTexVertexOutput IN)
{
	return PS_RaytraceNoRain(IN,true);
}

shader FarNearDepthPixelOutput PS_RaytraceNoRain_depthForward(posTexVertexOutput IN)
{
	return PS_RaytraceNoRain(IN,false);
}

shader posTexVertexOutput VS_CrossSection(idOnly IN)
{
	return VS_ScreenQuad(IN,rect);
}

shader vec4 PS_Simple(posTexVertexOutput IN):SV_TARGET
{
    return texture_wrap(noiseTexture,IN.texCoords.xy);
}

shader vec4 PS_ShowNoise(posTexVertexOutput IN):SV_TARGET
{
    vec4 lookup=texture_wrap(noiseTexture,IN.texCoords.xy);
	return vec4(0.5*(lookup.rgb+1.0),1.0);
}

shader vec4 PS_Show3DNoise(posTexVertexOutput IN):SV_TARGET
{
	float z			=floor(8.0f*IN.texCoords.x)/8.0f;
	if(IN.texCoords.y<0.5)
		z=0.5;
	vec4 lookup		=texture_3d_nearest_lod(noiseTexture3D,vec3(IN.texCoords,z),0);
	return vec4(0.5*(lookup.rgb+1.0),1.0);
}

shader vec4 PS_ShowShadow(posTexVertexOutput IN):SV_TARGET
{
	return ShowCloudShadow(cloudShadowTexture,cloudGodraysTexture,IN.texCoords);
}

#define CROSS_SECTION_STEPS 32
vec4 CrossSection(vec2 texCoords,float yz)
{
	vec3 texc	=crossSectionOffset+vec3(texCoords.x,yz*texCoords.y,(1.0-yz)*texCoords.y);
	int i		=0;
	vec3 accum	=vec3(0.0,0.5,1.0);
	texc.y		+=0.5*(1.0-yz)/float(CROSS_SECTION_STEPS);
	//texc.z+=0.5*yz/(float)CROSS_SECTION_STEPS;
	vec2 uv = vec2(0,0);
	for(i=0;i<CROSS_SECTION_STEPS;i++)
	{
		vec4 density=texture_wwc(cloudDensity1,texc);
		vec3 colour=vec3(.5,.5,.5)*(lightResponse.x*density.y+lightResponse.y*density.x);
		colour.gb+=vec2(.125,.25)*(lightResponse.z*density.w);
		float opacity=density.z;
		colour*=opacity;
		accum*=1.0-opacity;
		accum += colour; 
	//	accum *=1-0.1*(1.0-density.y);
		uv += density.xy;
		texc.y-=(1.0-yz)/float(CROSS_SECTION_STEPS);
		texc.z+=yz/float(CROSS_SECTION_STEPS);
	}
//	accum.rg = uv / float(CROSS_SECTION_STEPS);
    return vec4(accum,1);
}

shader vec4 PS_CrossSection(posTexVertexOutput IN):SV_TARGET
{
    return CrossSection(IN.texCoords,yz);
}

BlendState Blend1
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=FALSE;
	SrcBlend		=ONE;
	DestBlend		=SRC_ALPHA;
    BlendOp			=ADD;
    SrcBlendAlpha	=ZERO;
    DestBlendAlpha	=SRC_ALPHA;
    BlendOpAlpha	=ADD;
};

BlendState AddBlend2
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=ONE;
	DestBlend		=ONE;
    BlendOp			=ADD;
    SrcBlendAlpha	=ZERO;
    DestBlendAlpha	=ONE;
    BlendOpAlpha	=ADD;
};

VertexShader vs_fullscreen_5_0 = CompileShader(vs_5_0, VS_SimpleFullscreen());

fxgroup raytrace
{
	technique simple
	{
		pass depth_reverse
		{
			SetDepthStencilState(DisableDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_SimpleRaytrace_depthReverse()));
		}
		pass depth_forward 
		{
			SetDepthStencilState(DisableDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_SimpleRaytrace_depthForward()));
		}
	}
	technique lightpass
	{
		pass depth_reverse
		{
			SetBlendState(AddBlend2,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(DisableDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_Lightpass_DepthReverse()));
		}
		pass depth_forward 
		{
			SetBlendState(AddBlend2,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(DisableDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_Lightpass_DepthForward()));
		}
	}
	technique full
	{
		pass depth_reverse 
		{
			SetBlendState(Blend1,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(WriteDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_Raytrace_depthReverse()));
		}
		pass depth_forward 
		{
			SetBlendState(Blend1,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(WriteDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_Raytrace_depthForward()));
		}
	}
	technique no_rain
	{
		pass depth_reverse 
		{
			SetBlendState(Blend1,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(WriteDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_RaytraceNoRain_depthReverse()));
		}
		pass depth_forward 
		{
			SetBlendState(Blend1,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetDepthStencilState(WriteDepth,0);
			SetRasterizerState( RenderNoCull );
			SetVertexShader(vs_fullscreen_5_0);
			SetPixelShader(CompileShader(ps_5_0,PS_RaytraceNoRain_depthForward()));
		}
	}
}

technique cloud_shadow
{
    pass p0 
    {
		SetDepthStencilState(DisableDepth,0);
        SetRasterizerState( RenderNoCull );
		SetBlendState(NoBlend,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_fullscreen_5_0);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_CloudShadow()));
    }
}


technique rain_map
{
    pass p0 
    {
		SetDepthStencilState(DisableDepth,0);
        SetRasterizerState( RenderNoCull );
		SetBlendState(NoBlend,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_fullscreen_5_0);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_RainMap()));
    }
}

technique mix_clouds
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Mix()));
    }
}

technique simulate_clouds
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Simulate()));
    }
}

technique moisture_accumulation
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_fullscreen_5_0);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_MoistureAccumulation()));
    }
}

technique cross_section
{
    pass p0 
    {
		SetDepthStencilState(DisableDepth,0);
        SetRasterizerState( RenderNoCull );
		SetBlendState(NoBlend,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_CrossSection()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_CrossSection()));
    }
}

technique simple
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_CrossSection()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Simple()));
    }
}

technique show_noise
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_CrossSection()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowNoise()));
    }
}

technique show_3d_noise
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_CrossSection()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Show3DNoise()));
    }
}

technique show_shadow
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_CrossSection()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowShadow()));
    }
}

technique point_queries
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_PointQueries()));
    }
}
technique line_queries
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_LineQueries()));
    }
}