//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
shader void Tst()
{
	uint2 dims;
	uint3 pos;
	if(pos.x>=dims.x||pos.y>=dims.y)
		return;
}

#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/states.sl"
#include "../SL/ocean_constants.sl"
#include "../SL/simul_inscatter_fns.sl"
#include "../SL/debug_constants.sl"
#include "../SL/depth.sl"

#define PATCH_BLEND_BEGIN		8000
#define PATCH_BLEND_END			40000

#define PI 3.1415926536f
#define BLOCK_SIZE_X 16
#define BLOCK_SIZE_Y 16

uniform Texture2D	g_samplerDisplacementMap	SIMUL_TEXTURE_REGISTER(0);

uniform Texture2D	showTexture					SIMUL_TEXTURE_REGISTER(0);		// FFT wave displacement map in VS
uniform Texture2D	g_texDisplacement			SIMUL_TEXTURE_REGISTER(0);		// FFT wave displacement map in VS
uniform Texture2D	g_texPerlin					SIMUL_TEXTURE_REGISTER(1);		// FFT wave gradient map in PS
uniform Texture2D	g_texGradient				SIMUL_TEXTURE_REGISTER(2);		// Perlin wave displacement & gradient map in both VS & PS
uniform Texture2D	g_texFresnel				SIMUL_TEXTURE_REGISTER(3);		// Fresnel factor lookup table. Actually 1D, but some platforms don't support that.
uniform Texture2D	g_texDepth					SIMUL_TEXTURE_REGISTER(7);		// Depth of rendered scene up till now
uniform Texture2D	g_waterDepth				SIMUL_TEXTURE_REGISTER(8);		// Depth of the water
uniform TextureCube	g_texReflectCube			: register(t4);					// A small skybox cube texture for reflection
uniform Texture2D	g_skyLossTexture			: register(t5);
uniform Texture2D	g_skyInscatterTexture		: register(t6);
// The following three should contains only real numbers. But we have only C2C FFT now.
uniform StructuredBuffer<vec2> g_InputDxyz		;
uniform StructuredBuffer<vec2>	g_InputH0		;
uniform RWStructuredBuffer<vec2> g_OutputHt		;
uniform StructuredBuffer<float>	g_InputOmega	;

struct TwoColourCompositeOutput
{
	vec4 add		SIMUL_RENDERTARGET_OUTPUT(0);
	vec4 multiply	SIMUL_RENDERTARGET_OUTPUT(1);
};

// FFT wave displacement map in VS, XY for choppy field, Z for height field
//SamplerState g_samplerDisplacement	now use nearestWrap

// Perlin noise for composing distant waves, W for height field, XY for gradient
SamplerState g_samplerPerlin SIMUL_STATE_REGISTER(3)
{
	Filter =ANISOTROPIC;
	AddressU =WRAP;
	AddressV =WRAP;
	AddressW =WRAP;
	MipLODBias = 0;
	MaxAnisotropy = 1;
	//ComparisonFunc = NEVER;
	MinLOD = 0;
	MaxLOD = 1000000;
	MaxAnisotropy = 4;
};

// FFT wave gradient map, converted to normal value in PS
SamplerState g_samplerGradient SIMUL_STATE_REGISTER(7)
{
	Filter =ANISOTROPIC;
	AddressU =WRAP;
	AddressV =WRAP;
	AddressW =WRAP;
	MipLODBias = 0;
	MaxAnisotropy = 8;
};
// Fresnel factor lookup table
SamplerState g_samplerFresnel SIMUL_STATE_REGISTER(8)
{
	Filter =MIN_MAG_MIP_LINEAR;
	AddressU =CLAMP;
	AddressV =CLAMP;
	AddressW =CLAMP;
	MipLODBias = 0;
	MaxAnisotropy = 4;
};

//SamplerState g_samplerAtmospherics	// use cmcSamplerState
#define COS_PI_4_16 0.70710678118654752440084436210485f
#define TWIDDLE_1_8 COS_PI_4_16, -COS_PI_4_16
#define TWIDDLE_3_8 -COS_PI_4_16, -COS_PI_4_16

#define COHERENCY_GRANULARITY 128


void FT2(inout float2 a, inout float2 b)
{
	float t;

	t = a.x;
	a.x += b.x;
	b.x = t - b.x;

	t = a.y;
	a.y += b.y;
	b.y = t - b.y;
}

void CMUL_forward(inout float2 a, float bx, float by)
{
	float t = a.x;
	a.x = t * bx - a.y * by;
	a.y = t * by + a.y * bx;
}

void UPD_forward(inout float2 a, inout float2 b)
{
	float A = a.x;
	float B = b.y;

	a.x += b.y;
	b.y = a.y + b.x;
	a.y -= b.x;
	b.x = A - B;
}


void FFT_forward_4(inout float2 D[8])
{
	FT2(D[0], D[2]);
	FT2(D[1], D[3]);
	FT2(D[0], D[1]);

	UPD_forward(D[2], D[3]);
}

void FFT_forward_8(inout float2 D[8])
{
	FT2(D[0], D[4]);
	FT2(D[1], D[5]);
	FT2(D[2], D[6]);
	FT2(D[3], D[7]);

	UPD_forward(D[4], D[6]);
	UPD_forward(D[5], D[7]);

	CMUL_forward(D[5], TWIDDLE_1_8);
	CMUL_forward(D[7], TWIDDLE_3_8);

	FFT_forward_4(D);
	FT2(D[4], D[5]);
	FT2(D[6], D[7]);
}

void TWIDDLE(inout float2 d, float phase)
{
	float tx, ty;

	sincos(phase, ty, tx);
	float t = d.x;
	d.x = t * tx - d.y * ty;
	d.y = t * ty + d.y * tx;
}

void TWIDDLE_8(inout float2 D[8], float phase)
{
	TWIDDLE(D[4], 1 * phase);
	TWIDDLE(D[2], 2 * phase);
	TWIDDLE(D[6], 3 * phase);
	TWIDDLE(D[1], 4 * phase);
	TWIDDLE(D[5], 5 * phase);
	TWIDDLE(D[3], 6 * phase);
	TWIDDLE(D[7], 7 * phase);
}

uniform StructuredBuffer<float2>	g_SrcData ;
uniform RWStructuredBuffer<float2>	g_DstData ;

[numthreads(COHERENCY_GRANULARITY, 1, 1)]
shader void Radix008A_CS(uint3 thread_id : SV_DispatchThreadID)
{
	if (thread_id.x >= thread_count)
		return;
	uint threadx=thread_id.x;
	// Fetch 8 complex numbers
	float2 D[8];

	uint i;
	uint imod = threadx & (istride - 1);
	uint iaddr = ((threadx - imod) << 3) + imod;
	for (i = 0; i < 8; i++)
		D[i] = g_SrcData[iaddr + i * istride];

	// Math
	FFT_forward_8(D);
	uint p = threadx & (istride - pstride);
	float phase = phase_base * float(p);
	TWIDDLE_8(D, phase);

	// Store the result
	uint omod = threadx & (ostride - 1);
	uint oaddr = ((threadx - omod) << 3) + omod;
	g_DstData[oaddr + 0 * ostride] = D[0];
	g_DstData[oaddr + 1 * ostride] = D[4];
	g_DstData[oaddr + 2 * ostride] = D[2];
	g_DstData[oaddr + 3 * ostride] = D[6];
	g_DstData[oaddr + 4 * ostride] = D[1];
	g_DstData[oaddr + 5 * ostride] = D[5];
	g_DstData[oaddr + 6 * ostride] = D[3];
	g_DstData[oaddr + 7 * ostride] = D[7];
}


[numthreads(COHERENCY_GRANULARITY, 1, 1)]
shader void Radix008A_CS2(uint3 thread_id : SV_DispatchThreadID)
{
	if(thread_id.x >= thread_count)
		return;
	uint threadx=thread_id.x;
	// Fetch 8 complex numbers
	uint i;
	float2 D[8];
	uint iaddr = threadx << 3;
	for (i = 0; i < 8; i++)
		D[i] = g_SrcData[iaddr + i];

	// Math
	FFT_forward_8(D);

	// Store the result
	uint omod = threadx & (ostride - 1);
	uint oaddr = ((threadx - omod) << 3) + omod;
	g_DstData[oaddr + 0 * ostride] = D[0];
	g_DstData[oaddr + 1 * ostride] = D[4];
	g_DstData[oaddr + 2 * ostride] = D[2];
	g_DstData[oaddr + 3 * ostride] = D[6];
	g_DstData[oaddr + 4 * ostride] = D[1];
	g_DstData[oaddr + 5 * ostride] = D[5];
	g_DstData[oaddr + 6 * ostride] = D[3];
	g_DstData[oaddr + 7 * ostride] = D[7];
}

//---------------------------------------- Compute Shaders -----------------------------------------

// Pre-FFT data preparation:

// Notice: In CS5.0, we can output up to 8 RWBuffers but in CS4.x only one output buffer is allowed,
// that way we have to allocate one big buffer and manage the offsets manually. The restriction is
// not caused by NVIDIA GPUs and does not present on NVIDIA GPUs when using other computing APIs like
// CUDA and OpenCL.

// H(0) -> H(t)
[numthreads(BLOCK_SIZE_X, BLOCK_SIZE_Y, 1)]
shader void UpdateSpectrumCS(uint3 sub_pos : SV_DispatchThreadID)
{
//	g_OutputHt[sub_pos.y*512+sub_pos.x]=vec2(0.2,.5);
	int in_index = int(sub_pos.y * g_InWidth + sub_pos.x);
	int in_mindex =int( (g_ActualDim - sub_pos.y) * g_InWidth + (g_ActualDim - sub_pos.x));
	int out_index = int(sub_pos.y * g_OutWidth + sub_pos.x);

	// H(0) -> H(t)
	vec2 h0_k  = g_InputH0[in_index];
	vec2 h0_mk = g_InputH0[in_mindex];
	float sin_v, cos_v;
	sincos(g_InputOmega[in_index] * g_Time, sin_v, cos_v);

	vec2 ht;
	ht.x = (h0_k.x + h0_mk.x) * cos_v - (h0_k.y + h0_mk.y) * sin_v;
	ht.y = (h0_k.x - h0_mk.x) * sin_v + (h0_k.y - h0_mk.y) * cos_v;

	// H(t) -> Dx(t), Dy(t)
	float kx = sub_pos.x - g_ActualDim * 0.5;
	float ky = sub_pos.y - g_ActualDim * 0.5;
	float sqr_k = kx * kx + ky * ky;
	float rsqr_k = 0;
	if (sqr_k > 1.e-12f)
		rsqr_k = 1 / sqrt(sqr_k);
	//float rsqr_k = 1 / sqrtf(kx * kx + ky * ky);
	kx *= rsqr_k;
	ky *= rsqr_k;
	vec2 dt_x=vec2(ht.y * kx, -ht.x * kx);
	vec2 dt_y=vec2(ht.y * ky, -ht.x * ky);

	if ((sub_pos.x < g_OutWidth) && (sub_pos.y < g_OutHeight))
	{
		g_OutputHt[out_index] = ht;
		g_OutputHt[out_index + g_DxAddressOffset] = dt_x;
		g_OutputHt[out_index + g_DyAddressOffset] = dt_y;
	}
}

// Post-FFT data wrap up: Dx, Dy, Dz -> Displacement
shader vec4 UpdateDisplacementPS(posTexVertexOutput In) : SV_Target
{
	uint index_x = uint(In.texCoords.x * float(g_OutWidth));
	uint index_y = uint(In.texCoords.y * float(g_OutHeight));
	uint addr = g_OutWidth * index_y + index_x;

	// cos(SIMUL_PI_F * (m1 + m2))
	int sign_correction = (((index_x + index_y) & 1) != 0) ? -1 : 1;

	float dx=100.0f*g_InputDxyz[addr + g_DxAddressOffset].x * sign_correction * g_ChoppyScale;
	float dy=100.0f*g_InputDxyz[addr + g_DyAddressOffset].x * sign_correction * g_ChoppyScale;
	float dz=100.0f*g_InputDxyz[addr].x * sign_correction;

	return float4(dx, dy, dz, 1);
}

shader vec4 PS_ShowFrequencyStructuredBuffer( posTexVertexOutput In):SV_TARGET
{
	uint index_x = uint(In.texCoords.x *float(g_ActualDim));
	uint index_y = uint((1.0-In.texCoords.y) *float(g_ActualDim));
	uint addr = int(bufferGrid.x) * index_y + index_x;
    vec2 lookup	=g_InputDxyz[addr];
	return vec4(showMultiplier*lookup.rg,0,1.0);
}

shader vec4 PS_ShowSpatialStructuredBuffer( posTexVertexOutput In):SV_TARGET
{
	uint index_x = uint(In.texCoords.x *float(g_ActualDim));
	uint index_y = uint((1.0-In.texCoords.y) *float(g_ActualDim));

	uint addr = int(bufferGrid.x) * index_y + index_x;
	float dx=g_InputDxyz[g_DxAddressOffset+addr].x*g_ChoppyScale;
	float dy=g_InputDxyz[g_DyAddressOffset+addr].x*g_ChoppyScale;
	float dz=g_InputDxyz[addr].x;
	
    vec3 lookup	=vec3(dx,dy,dz);
	int sign_correction = (((index_x + index_y) & 1) != 0) ? -1 : 1;
	lookup  *= sign_correction;
	return vec4(showMultiplier*lookup.rgb,1.0);
}


// Displacement -> Normal, Folding
shader float4 GenGradientFoldingPS(posTexVertexOutput In) : SV_Target
{
	// Sample neighbour texels
	vec2 one_texel = vec2(1.0 / float(g_OutWidth), 1.0 / float(g_OutHeight));

	vec2 tc_left  = vec2(In.texCoords.x - one_texel.x, In.texCoords.y);
	vec2 tc_right = vec2(In.texCoords.x + one_texel.x, In.texCoords.y);
	vec2 tc_back  = vec2(In.texCoords.x, In.texCoords.y - one_texel.y);
	vec2 tc_front = vec2(In.texCoords.x, In.texCoords.y + one_texel.y);

	vec3 displace_left  = g_samplerDisplacementMap.Sample(wrapSamplerState, tc_left).xyz;
	vec3 displace_right = g_samplerDisplacementMap.Sample(wrapSamplerState, tc_right).xyz;
	vec3 displace_back  = g_samplerDisplacementMap.Sample(wrapSamplerState, tc_back).xyz;
	vec3 displace_front = g_samplerDisplacementMap.Sample(wrapSamplerState, tc_front).xyz;
	
	// Do not store the actual normal value. Using gradient instead, which preserves two differential values.
	vec2 gradient = vec2(-(displace_right.z - displace_left.z), -(displace_front.z - displace_back.z));

	// Calculate Jacobian correlation from the partial differential of height field
	vec2 Dx = (displace_right.xy - displace_left.xy) * g_ChoppyScale * g_GridLen;
	vec2 Dy = (displace_front.xy - displace_back.xy) * g_ChoppyScale * g_GridLen;
	float J = (1.0 + Dx.x) * (1.0 + Dy.y) - Dx.y * Dy.x;

	// Practical subsurface scale calculation: max[0, (1 - J) + Amplitude * (2 * Coverage - 1)].
	float fold = max(1.0 - J, 0);

	// Output
	return vec4(gradient, 0, fold);
}

//-----------------------------------------------------------------------------
// Name: OceanSurfVS
// Type: Vertex shader									  
// Desc: Ocean shading vertex shader. Check SDK document for more details
//-----------------------------------------------------------------------------
struct VS_OUTPUT
{
	vec4 Position	: SV_POSITION;
	vec2 texCoords	: TEXCOORD0;
	vec3 LocalPos	: TEXCOORD1;
	vec2 fade_texc	: TEXCOORD2;
	vec4 vecColour  : TEXCOORD3;
	vec4 SurePosition : TEXCOORD4;
};
#ifndef MAX_FADE_DISTANCE_METRES
	#define MAX_FADE_DISTANCE_METRES (300000.0)
#endif
shader VS_OUTPUT OceanSurfVS(idOnly IN)
{
	VS_OUTPUT Output;

	// Local position
	float baseDegree = 6.28319 / float(g_quadsPerRing);
	float radius = 2.0f;
	
	uint verticiesPerRing = (g_quadsPerRing * 2) + 2;

	uint totalRings = g_totalVertices / verticiesPerRing;

	uint absoluteVertexNo = g_totalVertices - IN.vertex_id;

	uint vertexNo = absoluteVertexNo % verticiesPerRing;

	uint ringNo = (absoluteVertexNo - vertexNo) / verticiesPerRing;

	uint inOrOut = (vertexNo % 2);
	float distance;

	float h = g_LocalEye.z;
	float a = atan( 300000.0 / h);
	float g = (a / float(totalRings - 2));
	float L = h * tan(clamp(float(ringNo + inOrOut) * g, 0.0, 1.55));

	if ((totalRings - ringNo) == 0)
	{
		distance = inOrOut * 30000.0;
	}
	else {
		distance = L;
	}

	float degree = baseDegree * float(vertexNo / 2);

	vec2 vPos;
	vPos.x = distance * cos(degree) + g_LocalEye.x;
	vPos.y = distance * sin(degree) + g_LocalEye.y;
	
	float4 pos_local = float4(vPos, 0, 1);

	// UV
	vec2 uv_local = pos_local.xy * g_UVScale + g_UVOffset;
	uv_local /= g_WorldScale;

	// Blend displacement to avoid tiling artifact
	vec3 eye_vec = pos_local.xyz - g_LocalEye;
	float dist_2d = length(eye_vec.xy);
	float blend_factor = (PATCH_BLEND_END - dist_2d) / (PATCH_BLEND_END - PATCH_BLEND_BEGIN);
	blend_factor = clamp(blend_factor, 0, 1);

	// Add perlin noise to distant patches
	float perlin = 0;
	vec2 perlin_tc = uv_local * g_PerlinSize + g_UVBase;
	if (blend_factor < 1)
	{
		float perlin_0 = g_texPerlin.SampleLevel(g_samplerPerlin, perlin_tc * g_PerlinOctave.x + g_PerlinMovement, 0).w;
		float perlin_1 = g_texPerlin.SampleLevel(g_samplerPerlin, perlin_tc * g_PerlinOctave.y + g_PerlinMovement, 0).w;
		float perlin_2 = g_texPerlin.SampleLevel(g_samplerPerlin, perlin_tc * g_PerlinOctave.z + g_PerlinMovement, 0).w;
		
		perlin = perlin_0 * g_PerlinAmplitude.x + perlin_1 * g_PerlinAmplitude.y + perlin_2 * g_PerlinAmplitude.z;
	}

	// Displacement map
	vec3 displacement = vec3(0,0,0);
	if (blend_factor > 0)
		displacement = g_texDisplacement.SampleLevel(wrapSamplerState, uv_local, 0).xyz * (g_WorldScale/ 2.0);
	displacement = lerp(vec3(0, 0, perlin), displacement, blend_factor);
	//if (displacement.x > 1.0) displacement.x = 1.0;
	//if (displacement.y > 1.0) displacement.y = 1.0;
	pos_local.xyz += displacement + vec3(0.0,0.0,400.0);
	Output.vecColour = vec4(0.0, 0.0, 0.0, 0.0);
	if (((totalRings - ringNo) == 0) ||((totalRings - ringNo - inOrOut) == 0))
	{
		pos_local.xyz -= vec3(0.0, 0.0, 1000.0);
		Output.vecColour = vec4(1.0, 0.0, 0.0, 0.0);
	}
	pos_local.z+=50.0*g_texPerlin.SampleLevel(g_samplerPerlin,perlin_tc/32.f+ g_PerlinMovement/4.f, 0).w;
	// Transform
	Output.Position = mul(g_matWorldViewProj, pos_local);
	Output.LocalPos = pos_local.xyz;
	// Pass thru texture coordinate
	Output.texCoords = uv_local;

	vec3 wPosition;
	wPosition= mul(pos_local, g_matWorld).xyz;
	
	vec3 view=normalize(wPosition.xyz);
	float sine=view.z;
	float depth=length(wPosition.xyz)/MAX_FADE_DISTANCE_METRES;
	Output.fade_texc=vec2(sqrt(depth),0.5*(1.0-sine));

	Output.SurePosition = Output.Position;
	return Output; 
}

//Calculate water depth
shader vec4 PS_OceanSurfDepth(VS_OUTPUT In, bool frontFacing : SV_IsFrontFace) : SV_Target
{
	vec3 eye_vec = g_LocalEye - In.LocalPos;
	float surfaceDepth = length(eye_vec)/300000.0;
	DepthInterpretationStruct dis;
	dis.reverseDepth = true;
	dis.depthToLinFadeDistParams = g_DepthToLinFadeParams;
	vec2 TexCoord = (vec2(In.SurePosition.x / In.SurePosition.w, In.SurePosition.y / -In.SurePosition.w) + 1.0) / 2.0;
	float subsurfaceSample = g_texDepth.Sample(wrapSamplerState, TexCoord);
	float subsurfaceDepth = depthToFadeDistance(subsurfaceSample, vec2(In.SurePosition.x / In.SurePosition.w, In.SurePosition.y / -In.SurePosition.w), dis, g_HalfTan);

	float finalDepth;

	if (In.vecColour.x > 0.0 || frontFacing)
	{
		finalDepth = -min(subsurfaceDepth, surfaceDepth);
		return vec4(finalDepth, min(subsurfaceDepth, surfaceDepth), In.texCoords);
	}

	if (subsurfaceDepth > surfaceDepth) {
		finalDepth = subsurfaceDepth - surfaceDepth;
	}
	else
	{
		finalDepth = 0;
	}

	return vec4(finalDepth, min(subsurfaceDepth, surfaceDepth), In.texCoords);
}

shader TwoColourCompositeOutput OceanSurfFinalPS(posTexVertexOutput In) : SV_Target
{

	float4 input = g_waterDepth.Sample(wrapSamplerState, In.texCoords);
	float waterDepth = input.x;
	float fadeDistance = 300000 * g_WorldScale;

	//Discard occulded fragments
	if (waterDepth == 0.0)
	{
		discard;
	}
	  
	vec4 clip = vec4((In.texCoords.x * 2) - 1, ((1 - In.texCoords.y) * 2) - 1, 1.0, 1.0);
	vec4 v = mul(g_matInvViewProj, clip);
	vec3 eye_dir = normalize(v.xyz / v.w);

	float blend_factor = (PATCH_BLEND_END - input.y) / (PATCH_BLEND_END - PATCH_BLEND_BEGIN);
	blend_factor = clamp(blend_factor * blend_factor * blend_factor, 0, 1);

	// Compose perlin waves from three octaves
	vec2 perlin_tc = input.zw * g_PerlinSize + g_UVBase;
	vec2 perlin_tc0 = (blend_factor < 1) ? perlin_tc * g_PerlinOctave.x + g_PerlinMovement : 0;
	vec2 perlin_tc1 = (blend_factor < 1) ? perlin_tc * g_PerlinOctave.y + g_PerlinMovement : 0;
	vec2 perlin_tc2 = (blend_factor < 1) ? perlin_tc * g_PerlinOctave.z + g_PerlinMovement : 0;

	vec2 perlin_0 = g_texPerlin.Sample(g_samplerPerlin, perlin_tc0).xy;
	vec2 perlin_1 = g_texPerlin.Sample(g_samplerPerlin, perlin_tc1).xy;
	vec2 perlin_2 = g_texPerlin.Sample(g_samplerPerlin, perlin_tc2).xy;
	
	vec2 perlin = (perlin_0 * g_PerlinGradient.x + perlin_1 * g_PerlinGradient.y + perlin_2 * g_PerlinGradient.z);

	// --------------- Water body color
	// Texcoord mash optimization: Texcoord of FFT wave is not required when blend_factor > 1
	vec2 fft_tc = (blend_factor > 0) ? input.zw : 0;

	vec2 grad = g_texGradient.Sample(g_samplerGradient, fft_tc).xy;
	grad = lerp(perlin, grad, blend_factor);

	// Calculate normal here.
	vec3 normal = normalize(vec3(grad.x, grad.y, g_TexelLength_x2));

	TwoColourCompositeOutput Output;

	//SSS calculations
	float A = acos(dot(g_SunDir, vec3(g_SunDir.x, g_SunDir.y, 0.0)) / (length(g_SunDir) * length(vec3(g_SunDir.x, g_SunDir.y, 0.0))));
	float B = acos(dot(-eye_dir, normal) / (length(-eye_dir) * length(normal)));
	float c = (sin(A) / sin(B));
	float p = 0.079577;

	vec3 scattering = vec3(0.0007, 0.0013, 0.002);
	vec3 absorbtion = vec3(0.2916, 0.0474, 0.0092);
	vec3 extinction = scattering + absorbtion;
	vec3 albedo = scattering / extinction;

	//Unfinished SSS refinements
	/*float eyeToHorizontal = acos(dot(eye_dir, vec3(eye_dir.x, eye_dir.y, 0.0)) / (length(eye_dir) * length(vec3(eye_dir.x, eye_dir.y, 0.0))));
	float sunL = (5 * waterDepth * sin(eyeToHorizontal)) / sin(A);
	float sunEyeAngle = acos(clamp(dot(eye_dir.xy, g_SunDir.xy), 0.0, 0.75) / (0.75 * length(g_SunDir.xy)));

	float y = 5 * sunL * sin(A);
	float z = 5 * sunL * cos(eyeToHorizontal);
	float x = y * (tan(sunEyeAngle));

	float absorbtionMod = clamp(x, 0.01, 0.2);*/
	
	//Camera is below the water
	if (waterDepth < 0.0)
	{
		waterDepth *= -1.0;
		vec4 mult = vec4(exp(-extinction * waterDepth * fadeDistance) * g_SunColor, waterDepth * fadeDistance);
		Output.multiply = saturate(mult);
		Output.add = vec4(0.0,0.0,0.0,0.0);
		return Output;
	}
	
	//Calculate absorbtion and SSS
	vec4 mult = vec4(exp(-extinction * waterDepth * fadeDistance) * g_SunColor, waterDepth * fadeDistance);
	vec3 sunEffect = g_SunColor;
	vec4 newSSS = vec4(albedo * (p / 1 + c) * (1 - exp(-extinction * waterDepth * (1 + c)  * fadeDistance )) * sunEffect
						, waterDepth * fadeDistance);

	Output.multiply = saturate(mult);
	Output.add		=saturate(newSSS);
	
	
	// --------------- Reflected color
	float cos_angle = dot(normal, -eye_dir);
	vec3 reflect_vec = reflect(eye_dir, normal);
	// ramp.x for fresnel term.
	float4 ramp = g_texFresnel.Sample(g_samplerFresnel,vec2(cos_angle,0)).xyzw;
// A workaround to deal with "indirect reflection vectors" (which are rays requiring multiple reflections to reach the sky).
	if (reflect_vec.z < g_BendParam.x)
		ramp = lerp(ramp, g_BendParam.z, (g_BendParam.x - reflect_vec.z)/(g_BendParam.x - g_BendParam.y));
	reflect_vec.z		=max(0, reflect_vec.z);
//	water_color	= reflected_color;

	// --------------- Sun spots
	float cos_spec = max(dot(reflect_vec, g_SunDir), 0.0);
	float sun_spot = pow(cos_spec, g_Shineness);
	vec3 refl = texture_cube(g_texReflectCube, reflect_vec);
	Output.add.rgb += vec4(g_SunColor * sun_spot, sun_spot)+refl;

	float sine = v.z;
	vec2 fadeTexc = vec2(sqrt(input.y * g_WorldScale), 0.5*(1.0 - sine));

	vec3 loss = g_skyLossTexture.Sample(cmcSamplerState, fadeTexc).rgb;
	vec4 insc = g_skyInscatterTexture.Sample(cmcSamplerState, fadeTexc);
	vec3 inscatter	=InscatterFunction(insc, hazeEccentricity, cos_angle, mieRayleighRatio);
	//Output.add += vec4(loss + inscatter, 1.0);
	Output.add += insc;
	//Output.add = vec4(0.21 - absorbtionMod, 0.0, 0.0, 1.0);
	Output.add.rgb = refl;
	return Output;
}

shader float4 WireframePS(VS_OUTPUT IN) : SV_Target
{
	return IN.vecColour;
}

shader posTexVertexOutput VS_ShowTexture(idOnly id)
{
	return VS_ScreenQuad(id,rect);
}

shader vec4 PS_ShowTexture( posTexVertexOutput IN):SV_TARGET
{
	vec4 lookup=showTexture.Sample(wrapSamplerState,IN.texCoords.xy);
	return vec4(showMultiplier*lookup.rgb,1.0);
}

technique ocean
{
	pass p0 
	{
		SetRasterizerState( RenderNoCull );
		SetBlendState(CompositeBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0, VS_SimpleFullscreen()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0, OceanSurfFinalPS()));
	}
}

technique show_texture
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_ShowTexture()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_ShowTexture()));
	}
}
technique show_frequency_structured_buffer
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_ShowTexture()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_ShowFrequencyStructuredBuffer()));
	}
}
technique show_spatial_structured_buffer
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_ShowTexture()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_ShowSpatialStructuredBuffer()));
	}
}

technique wireframe
{
	pass p0 
	{
		SetRasterizerState( wireframeRasterizer );
		SetDepthStencilState(TestDepth, 0 );
		SetBlendState(AddBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,OceanSurfVS()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,WireframePS()));
	}
}

technique render_depth
{
	pass p0
	{
		SetRasterizerState(RenderNoCull);
		//SetDepthStencilState( EnableDepth, 0 );
		SetBlendState(DontBlend, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetVertexShader(CompileShader(vs_5_0,OceanSurfVS()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_OceanSurfDepth()));
	}
}

technique update_spectrum
{
	pass p0 
	{
		SetComputeShader(CompileShader(cs_5_0,UpdateSpectrumCS()));
	}
}

technique radix_008a
{
	pass p0 
	{
		SetComputeShader(CompileShader(cs_5_0,Radix008A_CS()));
	}
}


technique radix_008a2
{
	pass p0 
	{
		SetComputeShader(CompileShader(cs_5_0,Radix008A_CS2()));
	}
}


technique update_displacement
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,UpdateDisplacementPS()));
	}
}

technique gradient_folding
{
	pass p0
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_SimpleFullscreen()));
		SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,GenGradientFoldingPS()));
	}
}


	