// Copyright (c) 2015 Simul Software Ltd. All rights reserved.

#include "shader_platform.sl"
#include "../SL/common.sl"
uniform sampler3D			densityTexture SIMUL_TEXTURE_REGISTER(0);
uniform sampler3D			lightTexture;
uniform sampler3D			lightTexture1 SIMUL_TEXTURE_REGISTER(1);
uniform sampler3D			lightTexture2 SIMUL_TEXTURE_REGISTER(2);
uniform sampler2D			maskTexture SIMUL_TEXTURE_REGISTER(3);
uniform sampler3D			ambientTexture;
uniform sampler3D			ambientTexture1 SIMUL_TEXTURE_REGISTER(4);
uniform sampler3D			ambientTexture2 SIMUL_TEXTURE_REGISTER(5);
uniform sampler3D			volumeNoiseTexture SIMUL_TEXTURE_REGISTER(6);
uniform RWTexture3D<uchar4> targetTexture SIMUL_RWTEXTURE_REGISTER(0);
uniform RWTexture3D<float>	targetTexture1 SIMUL_RWTEXTURE_REGISTER(1);
uniform Texture3D			inputTexture3D;
uniform Texture3D			inputTexture3DB;
uniform RWTexture3D<vec4>	outputTexture;

#include "../SL/render_states.sl"
#include "../SL/gpu_cloud_constants.sl"
#include "../SL/simul_gpu_clouds.sl"

SamplerState lightSamplerState SIMUL_SAMPLER_REGISTER(8);
SamplerState densSamplerState SIMUL_SAMPLER_REGISTER(9);

struct vertexOutput
{
    vec4 hPosition	: SV_POSITION;
	vec2 texCoords	: TEXCOORD0;		
};

shader vertexOutput VS_Main(idOnly IN)
{
    vertexOutput OUT;
	vec2 poss[4]=
	{
		{ 1.0, 0.0},
		{ 1.0, 1.0},
		{ 0.0, 0.0},
		{ 0.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
	pos.y			=yRange.x+pos.y*yRange.y;
	vec4 vert_pos	=vec4(vec2(-1.0,1.0)+2.0*vec2(pos.x,-pos.y),1.0,1.0);
    OUT.hPosition	=vert_pos;
    OUT.texCoords	=pos;
    return OUT;
}

struct ColourDepthOutput
{
	vec4 colour SIMUL_TARGET_OUTPUT;
	float depth	SIMUL_DEPTH_OUTPUT;
};

shader ColourDepthOutput PS_DensityMask(vertexOutput IN)
{
	ColourDepthOutput result;
	float dens					=GpuCloudMask(IN.texCoords, maskCentre, maskRadius,maskFeather, maskThickness,transformMatrix);
	result.colour				=vec4(dens,dens,dens,dens);
	result.depth				=dens;
	return result;
}

vec3 convertPosToTexc(uint3 pos,uint3 dims)
{
	return (vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
}

vec4 advect(vec3 texc		// grid coordinates
			,float timestep
			,vec3 cloudScales				// 1 / grid scale
			,vec3 velocity			// input velocity
			,Texture3D inputField)    // qty to advect
{
  // follow the velocity field "back in time"
   vec3 source_texc		= texc - timestep * velocity/cloudScales;
  // interpolate and write to the output fragment
	vec4 newval			= texture_wwc_lod(inputField,source_texc,0);
	return newval;
}

struct AtmosphericProperties
{
	float T_K;
	float qvs;
	float PI;
};

AtmosphericProperties SaturationRatio(float zkm)
{
	AtmosphericProperties a;
	float g			=0.00981;	//km/s2
	float T0		=273.0+25.0;		// at sea level
	float p0		=100.0*1000.0;
	float k			=0.286;
	float GAMMA		=10.0;		// K/km
	a.T_K			=T0-zkm*GAMMA;
	//float TC		=a.T_K-273.0;	// At the lowest texel, we know that T=T0-z GAMMA = T0-(cloudbase*GAMMA) = Tbase
	// and we want it to be at the dew point at that altitude.
	float Rd		=287.0;		// J/kg.K
	float p_ratio	=pow(1.0-zkm*GAMMA/T0,g/(GAMMA*Rd));
	a.PI			=pow(p_ratio,k);
	// saturation mixing ratio:
	//float qvs		=380.16/pPa*exp(17.67*TC/(TC+243.5));
	a.qvs			=380.16/(p_ratio*p0)*exp(17.67)*exp(-4302.645/(a.T_K-29.5));
	return a;
}

// Initially we have a cloud texture where 0 is clear and 1 is cloud.
// But in the simulation, we use mixing ratios, which can be up to about 50 g/kg (50/1000=0.05)
CS_LAYOUT(8,8,8)
shader void CS_InitSimulation( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos					=g*8+t;
	vec3 texc					=convertPosToTexc(pos,dims);
	vec4 lookup					=TEXTURE_LOAD_3D(inputTexture3D,pos);
	vec2 from_ctr				=texc.xy-vec2(0.5,0.5);
	//float u						=step(length(from_ctr),0.1);
//	float T						=210;//+150.0*u;
	// .61v = c
	AtmosphericProperties a_base	=SaturationRatio(cloudBaseKm+0.1*cloudScalesKm.z);
	AtmosphericProperties a_local	=SaturationRatio(cloudBaseKm+cloudScalesKm.z*texc.z);

	float q						=0.05;
	float qc					=q*lookup.z;
	float qv					=a_base.qvs*lookup.z;//qc/0.61;//04-qc;
	vec4 newval					=vec4(qc,qv,lerp(a_local.T_K,a_base.T_K,lookup.z),0);
	IMAGE_STORE_3D(outputTexture,pos,newval);
}

CS_LAYOUT(8,8,8)
shader void CS_Advection( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos				=g*8+t;
	vec3 texc				=convertPosToTexc(pos,dims);
	vec4 c1					=TEXTURE_LOAD_3D(inputTexture3DB,pos);
	vec4 newval				=advect(texc,time_step,cloudScalesKm,c1.xyz,inputTexture3D);
	IMAGE_STORE_3D(outputTexture,pos,newval);
}

CS_LAYOUT(8,8,8)
shader void CS_Vorticity( uint3 gr: SV_GroupID, uint3 t: SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos		=gr*8+t;
	vec3 texc		=convertPosToTexc(pos,dims);
	vec3 gridScale	=cloudScalesKm/vec3(dims);
	vec3 d			=vec3(0.5,0.5,0.5)/vec3(dims);
	vec4 wL			=texture_wwc_lod(inputTexture3D,texc-vec3(d.x,0,0),0);
	vec4 wR			=texture_wwc_lod(inputTexture3D,texc+vec3(d.x,0,0),0);
	vec4 wB			=texture_wwc_lod(inputTexture3D,texc-vec3(0,d.y,0),0);
	vec4 wF			=texture_wwc_lod(inputTexture3D,texc+vec3(0,d.y,0),0);
	vec4 wD			=texture_wwc_lod(inputTexture3D,texc-vec3(0,0,d.z),0);
	vec4 wU			=texture_wwc_lod(inputTexture3D,texc+vec3(0,0,d.z),0);
	vec3 w			=vec3(	(wF.z - wB.z)/gridScale.y-(wU.y - wD.y)/gridScale.z
							,(wU.x - wD.x)/gridScale.z-(wR.z - wL.z)/gridScale.x
							,(wR.y - wL.y)/gridScale.x-(wF.x - wB.x)/gridScale.y);
	vec4 newval		=vec4(w,length(w));
	IMAGE_STORE_3D(outputTexture,pos,newval);
}

CS_LAYOUT(8,8,8)
shader void CS_Force( uint3 gr : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos				=gr*8+t;
	vec3 texc				=convertPosToTexc(pos,dims);
	vec4 props				=TEXTURE_LOAD_3D(inputTexture3DB,pos);
	// Properties are: x=cloud, y=water vapour, z=potential temperature, w unused.
	vec4 vd					=TEXTURE_LOAD_3D(inputTexture3D,pos);
	//vec3 F					=vec3(1,0,0);
	vec3 diff				=(texc-vec3(.5,.5,.5))*cloudScalesKm;
	//float d2				=dot(diff.xy,diff.xy);//pow(diff.z,2.0);//
	float radius			=1.0;
	//float r2				=radius*radius;
	float g					=0.00981;	//km/s2
	vec3 buoyant			=g*(props.z*(1.0+0.61*props.y)/300.0-props.x-1.0)*vec3(0,0,1.0);
	vec3 delta				=buoyant*time_step;//15*F*time_step*exp(-d2/r2);
	if(pos.z==0)
		delta.z				+=.5*saturate(saturate(props.y/0.00001)-0.1);//2*step(d2,0.5)*saturate(cos((texture_wwc_lod(volumeNoiseTexture,5*texc,0).x+time*144000)*2.0*3.14159));
	if(pos.z==dims.z-1)
		vd.z				=0;
//	delta					+=.001/d2*cross(vec3(0,0,1.0),(vec3(diff.xy,0)));
	vd.xyz					+=delta;
	IMAGE_STORE_3D(outputTexture,pos,vd);
}

// buoyant force is zero when g*(theta*(1.0+0.61*v)/300.0-props.x-1.0)=0
// where c is cloud mr and v is vapour mr.
// i.e. theta*(1.0+0.61*v)/300.0=c+1.0
//             (1+.61v) (theta/300) = 1+c
// For stable cloud layer, we want the force to decrease with altitude.
// i.e.			v decreases, c increases, or theta decreases.

CS_LAYOUT(8,8,8)
shader void CS_CloudUpdate( uint3 gr : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos		=gr*8+t;
	vec3 texc		=convertPosToTexc(pos,dims);
	vec4 lookup		=TEXTURE_LOAD_3D(inputTexture3D,pos);
	//float p			=TEXTURE_LOAD_3D(inputTexture3DB,pos).x;
	float L			=2.501;	// Latent heat of vaporization J/kg
	float GAMMA		=10.0;		// K/km
	float zkm		=(cloudScalesKm*texc).z+cloudBaseKm;	
	float T0		=273.0+25.0;		// at sea level
	//float p0		=100.0*1000.0;
	// and we want it to be at the dew point at that altitude.
	float Rd		=287.0;		// J/kg.K
	float g			=0.00981;	//km/s2
	float p_ratio	=pow(1.0-zkm*GAMMA/T0,g/(GAMMA*Rd));
	float k			=0.286;
	float PI		=pow(p_ratio,k);
	// saturation mixing ratio:
	AtmosphericProperties a	=SaturationRatio(zkm);

	// Dobashi's expression for qvs is:
	//qvs				= 217.0*exp(19.482-4303.4/(T-29.5))/T);			// T is possibly in kelvins here.

	// Properties are: x=cloud, y=water vapour, z=potential temperature, w unused.
	float dc		=-min(a.qvs-lookup.y,lookup.x);
	float Cp		=1006.0;		// J/KG/K
	lookup.z		+=dc*L*PI/Cp;
	lookup.x		+=dc;
	lookup.y		-=dc;
	if(pos.z==0)
	{
		AtmosphericProperties a_base	=SaturationRatio(cloudBaseKm+0.1*cloudScalesKm.z);
		uint3 noise_dims;
		GET_DIMENSIONS_3D(volumeNoiseTexture,noise_dims.x,noise_dims.y,noise_dims.z);
		vec3 noisespace_texcoord		=vec3(texc.xy,0)*vec3(noiseScale)+vec3(1.0,1.0,0);
		//float n						=texture_wrap_lod(volumeNoiseTexture,noisespace_texcoord,0).x;
	//	float noise_val					=cos(2.0*3.1415926536*(n+t));
		float noise_texel				=1.0/float(noise_dims.z);
		float noise_val					=NoiseFunction2(volumeNoiseTexture,noisespace_texcoord.xy,octaves,persistence,time,noise_texel);
		lookup.y						=a_base.qvs*saturate((noise_val + 2.0*humidity - 1.0) / 0.002);
		lookup.x						=0;
		lookup.z						=a_base.T_K;
	//	lookup.y	=0.02*(1.0+cos(time))*step(length(texc.xy),0.01);
	}
		//step(length(texc.xy),0.01);
	IMAGE_STORE_3D(outputTexture,pos,lookup);
}

CS_LAYOUT(8,8,8)
shader void CS_Divergence( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos		=g*8+t;
	vec3 texc		=convertPosToTexc(pos,dims);
	vec3 gridScale	=cloudScalesKm/vec3(dims);
	vec3 d			=vec3(0.5,0.5,0.5)/vec3(dims);
	vec4 wL			=texture_wwc_lod(inputTexture3D,texc-vec3(d.x,0,0),0);
	vec4 wR			=texture_wwc_lod(inputTexture3D,texc+vec3(d.x,0,0),0);
	vec4 wB			=texture_wwc_lod(inputTexture3D,texc-vec3(0,d.y,0),0);
	vec4 wF			=texture_wwc_lod(inputTexture3D,texc+vec3(0,d.y,0),0);
	vec4 wD			=texture_wwc_lod(inputTexture3D,texc-vec3(0,0,d.z),0);
	vec4 wU			=texture_wwc_lod(inputTexture3D,texc+vec3(0,0,d.z),0);
	if(pos.z==0||pos.z==dims.z-1)
		wU=wD;
	//vec3 halfrdx	=0.5/gridScale;
	float div		= ((wR.x - wL.x)/gridScale.x + (wF.y - wB.y)/gridScale.y+ (wU.z - wD.z)/gridScale.z);
	IMAGE_STORE_3D(outputTexture,pos,vec4(div,div,div,div));
}

CS_LAYOUT(8,8,8)
shader void CS_Clear3D( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos			=g*8+t;
	//vec3 texc			=convertPosToTexc(pos,dims);
	//vec4 bC				=alpha* texture_wwc_lod(inputTexture3DB, texc,0);
	vec3 i_g			=vec3(dims)/cloudScalesKm;		// inverse of one grid step
	//vec3 i_g2			=i_g*i_g;
	// evaluate Jacobi iteration
	//float beta=i_g2.x+i_g2.y+i_g2.z;
	vec4 j = vec4(0,0,0,0);//(-bC)*invBeta/beta;
	//float err=abs((j.x)/(abs(j.x)+0.0000001));
	
//	j.b=err;	// blue= error.
	IMAGE_STORE_3D(outputTexture,pos,j);
}

CS_LAYOUT(8,8,8)
shader void CS_Jacobi( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos			=g*8+t;
	vec3 texc			=convertPosToTexc(pos,dims);
	
	// NB: Use SUCCESSIVE OVERRELAXATION (SOR) to speed this up
	// over-relaxation factor w=1/(1+sin(pi*2*dx)) 
	// And use alternate red-black iteration: see Moastuen(2007)

	// left, right, bottom, and top x samples
	vec3 d				=vec3(1.0,1.0,1.0)/vec3(dims);
	vec3 i_g			=vec3(dims)/cloudScalesKm;		// inverse of one grid step
	vec3 i_g2			=i_g*i_g;
	vec4 xL				=texture_wwc_lod(inputTexture3D,texc - vec3(d.x,0,0),0);
	vec4 xR				=texture_wwc_lod(inputTexture3D,texc + vec3(d.x,0,0),0);
	vec4 xB				=texture_wwc_lod(inputTexture3D,texc - vec3(0,d.y,0),0);
	vec4 xF				=texture_wwc_lod(inputTexture3D,texc + vec3(0,d.y,0),0);
	vec4 xD				=texture_wwc_lod(inputTexture3D,texc - vec3(0,0,d.z),0);
	vec4 xU				=texture_wwc_lod(inputTexture3D,texc + vec3(0,0,d.z),0);
	
	vec4 x				=texture_wwc_lod(inputTexture3D,texc ,0);
	if(pos.z==0||pos.z==dims.z-1)
		i_g2.z=0;
	// b sample, from center
	vec4 bC		=alpha* texture_wwc_lod(inputTexture3DB, texc,0);
	// evaluate Jacobi iteration
	float beta	=2.0*(i_g2.x+i_g2.y+i_g2.z);
	//float beta	=2.0*i_g2.x;
	vec4 j		=((xL+xR)*i_g2.x + (xB+xF)*i_g2.y + (xU+xD)*i_g2.z - bC)*invBeta/beta;
	//vec4 j		=((xL+xR+xB+xF) - bC)*invBeta/4.0;

	float err	=abs((x.x-j.x)/(abs(j.x)+0.0000001));
	
	j.b			=err;	// blue= error.
	j.ga		=j.rr;
	IMAGE_STORE_3D(outputTexture,pos,j);
}

CS_LAYOUT(8,8,8)
shader void CS_SubtractGradient( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(outputTexture,dims.x,dims.y,dims.z);
	uint3 pos			=g*8+t;
	vec3 texc			=convertPosToTexc(pos,dims);
	
	vec3 d				=vec3(1.0,1.0,1.0)/vec3(dims);
	float pL			=texture_wwc_lod(inputTexture3DB,texc-vec3(d.x,0,0),0).x;
	float pR			=texture_wwc_lod(inputTexture3DB,texc+vec3(d.x,0,0),0).x;
	float pB			=texture_wwc_lod(inputTexture3DB,texc-vec3(0,d.y,0),0).x;
	float pF			=texture_wwc_lod(inputTexture3DB,texc+vec3(0,d.y,0),0).x;
	float pD			=texture_wwc_lod(inputTexture3DB,texc-vec3(0,0,d.z),0).x;
	float pU			=texture_wwc_lod(inputTexture3DB,texc+vec3(0,0,d.z),0).x;
	
	if(pos.z==0||pos.z==dims.z-1)
		pU=pD;
	vec3 gridScale		=cloudScalesKm/vec3(dims);
	vec4 uNew			=texture_wwc_lod(inputTexture3D, texc,0);
	uNew.xyz			-= 0.5 * vec3(pR-pL,pF-pB,pU-pD)/gridScale;
	if(pos.z==0||pos.z==dims.z-1)
		uNew.z=0;
	IMAGE_STORE_3D(outputTexture,pos,uNew);
}

CS_LAYOUT(8,8,8)
shader void CS_SimToTarget( uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID )
{
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(targetTexture,dims.x,dims.y,dims.z);
	uint3 pos			=g*8+t;
	vec3 texc			=convertPosToTexc(pos,dims);
	vec4 c1				=TEXTURE_LOAD_3D(inputTexture3D,pos);
	float h				=saturate(0.5+float(pos.z)/float(dims.z));
	//float dens			=saturate(c1.x);//2.0*(c1.x-0.25));
	//float q=1.0;
	float q				=0.001;
	float dens			=saturate(c1.x/q);//2.0*(c1.x-0.25));
	if(pos.z==0)
		dens=0;
	if(wrap==0&&pos.x*pos.y*(dims.x-1-pos.x)*(dims.y-1-pos.y)==0)
	{
		dens=0;
	}
	//dens				*=saturate(h/zPixel-0.5)*saturate((1.0-h)/zPixel-1.5);
	vec2 illum			=vec2(1.0,1.0);
	vec3 wpos			=texc*cloudScalesKm;
	for(int i=0;i<12;i++)
	{
		wpos			+=lightDir*stepLength;// we expect stepLength in km for this shader
		texc			=wpos/cloudScalesKm;
		vec4 lookup		=texture_wwc_lod(inputTexture3D,texc,0);
		illum			*=exp(-extinctions.xy*saturate(lookup.x/q)*stepLength);
	}
	float ambient		=1.0;
	vec4 res			=vec4(illum.yx,dens,ambient);
	IMAGE_STORE_3D(targetTexture,pos,res);
	//outputTexture3d[pos].rgba=res;
}

CS_LAYOUT(8,8,8)
shader void CS_Density(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)	//SV_DispatchThreadID gives the combined id in each dimension.
{
	uint3 sub_pos				= g * 8 + t;
	uint3 pos					=sub_pos+threadOffset;
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(targetTexture1,dims.x,dims.y,dims.z);
	uint3 noise_dims;
	GET_DIMENSIONS_3D(volumeNoiseTexture,noise_dims.x,noise_dims.y,noise_dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 densityspace_texcoord	=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	vec3 noisespace_texcoord	=(densityspace_texcoord+vec3(0,0,0.0*zPixel))*vec3(noiseScale)+vec3(1.0,1.0,0);
	// noise_texel is the size of a noise texel
	float noise_texel			=1.0/float(noise_dims.z);
	float height				=noiseScale.z;
	float noise_val				=NoiseFunction(volumeNoiseTexture,noisespace_texcoord,octaves,persistence,time,height,noise_texel);
	float hm					=humidity*GetHumidityMultiplier2(densityspace_texcoord.z,baseLayer,transition,upperDensity)*texture_clamp_lod(maskTexture,densityspace_texcoord.xy,0).x;
	float dens					=saturate((noise_val+2.0*hm-1.0)/diffusivity);
	dens						*=saturate(densityspace_texcoord.z/zPixel-0.5)*saturate((1.0-0.5*zPixel-densityspace_texcoord.z)/zPixel);
	dens						=saturate(dens);
	
	IMAGE_STORE_3D(targetTexture1,int3(pos),vec4(dens,dens,dens,dens));
}

CS_LAYOUT(8, 8, 8)
shader void CS_Density_DontWrap(uint3 g:SV_GroupID,uint3 t:SV_GroupThreadID)	//SV_DispatchThreadID gives the combined id in each dimension.
{
	uint3 sub_pos = g * 8 + t;
	uint3 pos = sub_pos + threadOffset;
	uint3 dims;
	GET_IMAGE_DIMENSIONS_3D(targetTexture1, dims.x, dims.y, dims.z);
	uint3 noise_dims;
	GET_DIMENSIONS_3D(volumeNoiseTexture, noise_dims.x, noise_dims.y, noise_dims.z);
	if (pos.x >= dims.x || pos.y >= dims.y || pos.z >= dims.z)
		return;
	vec3 densityspace_texcoord = (vec3(pos) + vec3(0.5, 0.5, 0.5));

	densityspace_texcoord/=vec3(dims);

	vec3 noisespace_texcoord = (densityspace_texcoord + vec3(0, 0, 0.0*zPixel))*vec3(noiseScale) + vec3(1.0, 1.0, 0);

	float noise_texel = 1.0 / float(noise_dims.z);

	float height = noiseScale.z;
	float noise_val = NoiseFunction(volumeNoiseTexture, noisespace_texcoord, octaves, persistence, time, height, noise_texel);
	float hm = humidity*GetHumidityMultiplier2(densityspace_texcoord.z, baseLayer, transition, upperDensity)*texture_clamp_lod(maskTexture, densityspace_texcoord.xy, 0).x;
	float dens = saturate((noise_val + 2.0*hm - 1.0) / diffusivity);
	dens *= saturate(densityspace_texcoord.z / zPixel - 0.5)*saturate((1.0 - 0.5*zPixel - densityspace_texcoord.z) / zPixel);
	dens = saturate(dens);
	if (pos.x == 0 || pos.y == 0 || pos.x == dims.x - 1 || pos.y == dims.y - 1)
		dens = 0;
	IMAGE_STORE_3D(targetTexture1, int3(pos), vec4(dens, dens, dens, dens));
}


CS_LAYOUT(8,8,1)
shader void CS_Lighting(uint3 g:SV_GroupID,uint3 t:SV_GroupThreadID)
{
	uint3 sub_pos = uint3(g.xy * 8 + t.xy,g.z+t.z);
	uint3 dims;
	uint3 pos						=sub_pos+threadOffset;
	GET_IMAGE_DIMENSIONS_3D(targetTexture1,dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	float direct_light				=1.0;
	IMAGE_STORE_3D(targetTexture1,int3(pos.xy,0),vec4(1.0,1.0,1.0,1.0));
	int C=1;
	for(uint i=1;i<dims.z;i++)
	{
		uint3 idx					=uint3(pos.xy,i);
		vec4 v=vec4(direct_light,0,0,0);
		IMAGE_STORE_3D(targetTexture1,idx,v);

		for(int j=0;j<C;j++)
		{
			vec3 lightspace_texcoord	=vec3(pos.xy,float(i)+0.5+float(j)/float(C))/vec3(dims);
			vec3 densityspace_texcoord	=(mul(transformMatrix,vec4(lightspace_texcoord,1.0))).xyz;
			float density				=sample_3d_lod(densityTexture,densSamplerState, densityspace_texcoord, 0).x;
			direct_light				*=exp(-extinctions.x*density*stepLength/float(C));
		}
		//if(density==0)
		//	direct_light=1.0;
	}
}

CS_LAYOUT(8,8,1)
shader void CS_SecondaryLighting(uint3 g:SV_GroupID,uint3 t:SV_GroupThreadID)
{
	uint3 sub_pos = uint3(g.xy * 8 + t.xy, g.z + t.z);
	uint3 dims;
	int3 pos	  = int3(sub_pos)+int3(threadOffset);
	GET_IMAGE_DIMENSIONS_3D(targetTexture1,dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	float indirect_light			=0.0;
	if(pos.z>0)
	{
		int Z			=pos.z-1;
		int x1			=(pos.x+2)%dims.x;
		int xn			=(pos.x+dims.x-2)%dims.x;
		int y1			=(pos.y+2)%dims.y;
		int yn			=(pos.y+dims.y-2)%dims.y;
		int3 sample_pts[5]	={int3(pos.xy,Z),int3(xn,pos.y,Z),int3(x1,pos.y,Z),int3(pos.x,yn,Z),int3(pos.x,y1,Z)};
		for(int i=0;i<5;i++)
		{
			//vec3 lightspace_texcoord	=(vec3(sample_pts[i])+0.5)/vec3(dims);
			//vec3 densityspace_texcoord	=(mul(transformMatrix,vec4(lightspace_texcoord,1.0))).xyz;
			//float density				=densityTexture.SampleLevel(wwcSamplerState,densityspace_texcoord,0).x;
			indirect_light	+=IMAGE_LOAD_3D(targetTexture1,sample_pts[i]).x;
		}
		indirect_light	/=5.0;
	}
	int i=pos.z;
	{
		uint3 idx					=uint3(pos.xy,i);
		vec3 lightspace_texcoord	=(vec3(idx)+0.5)/vec3(dims);

		vec3 densityspace_texcoord	=(mul(transformMatrix,vec4(lightspace_texcoord,1.0))).xyz;
		float density				= sample_3d_lod(densityTexture,densSamplerState, densityspace_texcoord, 0).x;
		indirect_light				*=exp(-extinctions.y*density*stepLength);
		
		//NOTE: Causes artifact underneath clouds:
		if(density==0&&pos.z<dims.z-1)
			indirect_light			=1.0;//-(1.0-indirect_light)*exp(-5.0*stepLength);
		IMAGE_STORE_3D(targetTexture1,idx,vec4(indirect_light,indirect_light,indirect_light,indirect_light));
	}
}
CS_LAYOUT(8,8,1)
shader void CS_GaussianFilter(uint3 g:SV_GroupID,uint3 t:SV_GroupThreadID)
{
	uint3 sub_pos = uint3(g.xy * 8 + t.xy, g.z + t.z);
	uint3 dims;
	uint3 pos		=sub_pos+threadOffset;
	GET_DIMENSIONS_3D(targetTexture1,dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	float light		=IMAGE_LOAD_3D(lightTexture1,pos).x;
	if(pos.z>0)
	{
		int Z		=pos.z-1;
		light		+=IMAGE_LOAD_3D(lightTexture1,int3(pos+gaussianOffset)).x;
		light		+=IMAGE_LOAD_3D(lightTexture1,int3(pos.xy,pos.z+1)).x;
	}
}

float filterLight(Texture3D lightTex,vec3 texc)
{
	uint3 dims;
	GET_DIMENSIONS_3D(lightTex,dims.x,dims.y,dims.z);
	vec3 up			=vec3(0,0,1.0/float(dims.z));
	vec3 forward	=vec3(0,1.0/float(dims.y),0);
	vec3 right		=vec3(1.0/float(dims.x),0,0);
#ifdef GLSL
	vec3 offsets[7];
	offsets[0]=vec3(0,0,0);
	offsets[1]=up;
	offsets[2]=-up;
	offsets[3]=right;
	offsets[4]=-right;
	offsets[5]=forward;
	offsets[6]=-forward;
#else
	vec3 offsets[]	={vec3(0,0,0),up,-up,right,-right,forward,-forward};
#endif
	float res=0.0;
	for(int i=0;i<7;i++)
	{
		vec3 t=texc+offsets[i];
		res+=sample_3d_lod(lightTex,lightSamplerState,t,0).x;
	}
	return res/7.0;
}

CS_LAYOUT(8,8,8)
shader void CS_Transform(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	uint3 dims;
	uint3 sub_pos = g * 8 + t;
	uint3 pos=sub_pos+threadOffset;
	GET_IMAGE_DIMENSIONS_3D(targetTexture,dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 densityspace_texcoord	=(pos.xyz+vec3(0.5,0.5,0.5))/vec3(dims);
	//vec3 ambient_texcoord		=vec3(densityspace_texcoord.xy,1.0-zPixel/2.0-densityspace_texcoord.z);
	//vec3 lightspace_texcoord	=mul(transformMatrix,vec4(densityspace_texcoord+vec3(0,0,zPixel),1.0)).xyz;
	
	float density				=saturate(sample_3d_lod(densityTexture,wwcSamplerState,densityspace_texcoord,0).x);
	vec2 illum			=vec2(1.0,1.0);
	vec3 wpos			=densityspace_texcoord*cloudScalesKm;
	if(pos.z==0)
		wpos.z			+=cloudScalesKm.z*zPixel;
	for(int i=0;i<12;i++)
	{
		wpos			+=lightDir*stepLength;// we expect stepLength in km for this shader
		vec3 texc		=wpos/cloudScalesKm;
		vec4 lookup		=texture_3d_wwc_lod(densityTexture,texc,0);
		illum			*=exp(-extinctions.xy*lookup.x*stepLength);
	}
	vec2 ambient		=vec2(1.0,1.0);
	wpos				=densityspace_texcoord*cloudScalesKm;
	for(int i=0;i<12;i++)
	{
		wpos			+=vec3(0,0,1.0)*stepLength;// we expect stepLength in km for this shader
		vec3 texc		=wpos/cloudScalesKm;
		vec4 lookup		=texture_wwc_lod(densityTexture,texc,0);
		ambient			*=exp(-extinctions.xy*lookup.x*stepLength);
	}
    vec4 res					=vec4(illum.yx,density,0.5*(ambient.x+ambient.y));
	IMAGE_STORE_3D(targetTexture,pos,res);
}

technique density_mask
{
    pass p0 
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState(ReverseDepth, 0 );
		SetBlendState(DontBlend,vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_Main()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_DensityMask()));
    }
}

technique gpu_density_compute
{
	pass wrap
	{
		SetComputeShader(CompileShader(cs_5_0, CS_Density()));
	}
    pass dont_wrap 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Density_DontWrap()));
    }
}

technique gpu_lighting_compute
{
    pass p0 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Lighting()));
    }
}

technique gpu_secondary_compute
{
    pass p0 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_SecondaryLighting()));
    }
}

technique gpu_transform_compute
{
    pass p0 
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Transform()));
    }
}

technique init_simulation
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_InitSimulation()));
    }
}

technique advection
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Advection()));
    }
}

technique cloud_update
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_CloudUpdate()));
    }
}
technique vorticity
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Vorticity()));
    }
}

technique force
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Force()));
    }
}

technique divergence
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Divergence()));
    }
}

technique jacobi
{
    pass clear
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Clear3D()));
    }
    pass iterate
    {
		SetComputeShader(CompileShader(cs_5_0,CS_Jacobi()));
    }
}

technique subtract_gradient
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_SubtractGradient()));
    }
}

technique simulated_to_target
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_SimToTarget()));
    }
}
