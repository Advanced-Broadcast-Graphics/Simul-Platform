#include "shader_platform.sl"
#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/solid_constants.sl"

uniform Texture2D diffuseTexture;
uniform TextureCube diffuseCubemap;

struct vertexInput
{
    vec3 position		: POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec3 normal			: TEXCOORD1;
};

struct vertexOutput
{
    vec4 hPosition		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec3 normal			: TEXCOORD1;
};

shader vertexOutput VS_Solid(vertexInput IN)
{
    vertexOutput OUT;
    OUT.hPosition	=mul(worldViewProj, vec4(IN.position.xyz,1.f));
	OUT.texCoords	=IN.texCoords;
	mat3 w=mat3((mat3)world);
    OUT.normal.xyz	=mul(w,IN.normal);
    return OUT;
}

shader vec4 PS_Solid(vertexOutput IN) : SV_TARGET
{
    vec3 normal	=normalize(IN.normal);
    vec4 c = texture_wrap(diffuseTexture,vec2(IN.texCoords.x,1.0-IN.texCoords.y));
	vec3 totalDiff=texture_clamp(diffuseCubemap,-normal.xyz).rgb;
	c.a=1.0;
	totalDiff+=0.3*saturate(dot(lightDir,normal.xyz))*lightIrradiance;
	c.rgb*=totalDiff;
    vec4 u= vec4(c.rgb,1.0);
	return u;
}

technique solid
{
    pass base 
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(EnableDepth,0);
		SetBlendState(DontBlend,float4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_Solid()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Solid()));
    }
}
