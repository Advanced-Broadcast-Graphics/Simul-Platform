//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/depth.sl"
#include "../SL/simul_inscatter_fns.sl"
#include "../SL/cloud_shadow.sl"
#include "../SL/atmospherics.sl"
#include "../SL/atmospherics_constants.sl"
#include "../SL/earth_shadow_uniforms.sl"
#include "../SL/colour_packing.sl"
#include "../SL/illumination.sl"

uniform Texture2D inscTexture;
uniform Texture2D skylTexture;

uniform Texture3D cloudTexture;
SamplerState cloudSamplerState;

uniform RWTexture3D<vec4> targetVolume;

#include "../SL/cloud_shadow.sl"
#include "../SL/godrays.sl"

#define pi (3.1415926536)

struct atmosVertexInput
{
	uint vertex_id			: SV_VertexID;
};

struct atmosVertexOutput
{
    vec4 position		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec2 pos			: TEXCOORD1;
};

#define clampClouds (0)
// With this function we will create a 3D volume texture that encompasses the scattering for a frame,
// where the x-axis is azimuth around the light source, y-axis is angle from the light source (maximum = 180 deg)
// and z-axis is distance from the viewer.

CS_LAYOUT(4,4,1)
shader void CS_ScatteringVolume(uint3 p: SV_DispatchThreadID)
{
	uint3 idx			=p*amortization+amortizationOffset;
	if(p.x>=edge.x||p.y>=edge.y)
		return;
	// We must convert the idx values into a direction and distance in real space.
	vec2 texc			=vec2(float(idx.x)/float(scatteringVolumeDims.x),float(idx.y)/float((scatteringVolumeDims.y-1)));
	float azimuth		=texc.x*2.0*PI;
	float elevation		=(1.0-texc.y)*PI;
	float se			=sin(elevation);
	float ce			=cos(elevation);
	float cos_scaler	=1.0/max(0.3,se);
	float x				=sin(azimuth)*se;
	float y				=cos(azimuth)*se;
	vec3 view			=mul(lightspaceToWorldMatrix,vec4(x,y,ce,1.0)).xyz;//x*xAxis+y*yAxis+lightDir*ce;

	float sine			=view.z;

	float fade_texc_y	=0.5*(1.0-sine);
	// Illumination texture is worldspace:
	float world_azimuth	=atan2(view.x,view.y);
	vec2 illum_texc		=vec2(world_azimuth/(2.0*PI),(1.0+sine)*0.5);
	vec4 colour			=vec4(0,0,0,0);
	vec4 last			=vec4(0,0,0,0);
	float godraysIntensity	=1.0;
	vec3 lightDirCloudspace	=normalize(mul(worldToCloudMatrix,vec4(lightDir,0.0)).xyz);
	vec3 viewCloudspace		=mul(worldToCloudMatrix,vec4(view,0.0)).xyz*1000.0;
	vec3 viewposCloudspace	=mul(worldToCloudMatrix,vec4(viewPosition,1.0)).xyz;

	vec3 viewPosKm			=vec3(0.0,0.0,viewPosition.z/1000.0);
	float maxFadeDistanceKm	=maxFadeDistanceMetres*0.001;
	
	for(int i=0;i<scatteringVolumeDims.z;i++)
	{
		float dist_texc	=float(i)/float(scatteringVolumeDims.z-1);
		float dist		=pow(dist_texc,2.0)*cos_scaler;
		vec2 fade_texc	=vec2(sqrt(dist),fade_texc_y);
		vec4 insc		=texture_clamp_mirror_lod(inscTexture,fade_texc,0);
		vec3 skyl		=texture_clamp_mirror_lod(skylTexture,fade_texc,0).rgb;

	#ifdef INFRARED
		vec4 next		=vec4(skyl.rgb,1.0);
		float shadow	=1.0;
		colour			+=max(vec4(0,0,0,0),(next-last));
	#else
		float illum=0;
		vec3 earth_shadow_illum=vec3(0,0,0);

#define INTER_STEPS 3
		if(godraysIntensity>0.0)
		{
			for(int j=0;j<INTER_STEPS;j++)
			{
				float inter				=float(j+0.5)/float(INTER_STEPS)/float(scatteringVolumeDims.z-1);
				float distanceKm		=maxFadeDistanceKm*pow((dist_texc+inter),2.0)*cos_scaler;
				vec3 pos_km				=viewPosKm+view*distanceKm;
				vec3 texc				=viewposCloudspace+distanceKm*viewCloudspace;
				illum					+=GetCloudIllum(cloudTexture, cloudSamplerState, texc, lightDirCloudspace,clampClouds) / float(INTER_STEPS);
			}
		}
		earth_shadow_illum	=IlluminationAtPosition(viewPosKm+view*dist*maxFadeDistanceKm,sunDir,planetRadiusKm,vec3(45.0,35.0,25.0));
		float il			=1.0-godraysIntensity*(1.0-illum);
		float cos0			=ce;
		vec4 next			=vec4(InscatterFunction(insc,hazeEccentricity,cos0,mieRayleighRatio),1.0);
		vec4 dc				=max(vec4(0,0,0,0),(next-last))*il;
		dc.rgb				*=earth_shadow_illum;
		colour				+=dc;
#endif
		vec4 res			=colour+vec4(skyl,0);
		int3 pos			=int3(idx.xy,i);
		//res.rgb			=frac(vec3(pos)/256.0);
		IMAGE_STORE_3D(targetVolume,pos,res);
		last				=next;
	}
}

technique scattering_volume
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_ScatteringVolume()));
    }
}