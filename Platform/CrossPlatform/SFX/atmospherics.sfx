#include "shader_platform.sl"
#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/depth.sl"
#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/cloud_shadow.sl"
#include "../../CrossPlatform/SL/atmospherics.sl"
#include "../../CrossPlatform/SL/atmospherics_constants.sl"
#include "../../CrossPlatform/SL/colour_packing.sl"

Texture2D depthTexture;
Texture2DMS<float4> depthTextureMS;
Texture2D cloudDepthTexture;
Texture2D imageTexture;
Texture2D lossTexture;
Texture2D inscTexture;
Texture2D overcTexture;
Texture2D skylTexture;
Texture2D illuminationTexture;
Texture2D cloudShadowTexture;
Texture2D cloudNearFarTexture;
Texture2D cloudGodraysTexture;

Texture3D cloudTexture;
SamplerState cloudSamplerState;
Texture2D moistureTexture;

RWTexture3D<float4> targetVolume;

SamplerState samplerState: register(s1)
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

#include "../../CrossPlatform/SL/cloud_shadow.sl"
#include "../../CrossPlatform/SL/godrays.sl"

#define pi (3.1415926536)

struct atmosVertexInput
{
	uint vertex_id			: SV_VertexID;
};

struct atmosVertexOutput
{
    float4 position			: SV_POSITION;
    float2 texCoords		: TEXCOORD0;
    float2 pos				: TEXCOORD1;
};

shader atmosVertexOutput VS_Atmos(atmosVertexInput IN)
{
	atmosVertexOutput OUT;
	float2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	OUT.pos			=poss[IN.vertex_id];
	OUT.position	=float4(OUT.pos,0.0,1.0);
	// Set to far plane so can use depth test as want this geometry effectively at infinity
#if REVERSE_DEPTH==1
	OUT.position.z	=0.0; 
#else
	OUT.position.z	=OUT.position.w; 
#endif
    OUT.texCoords	=0.5*(float2(1.0,1.0)+vec2(OUT.pos.x,-OUT.pos.y));
	OUT.texCoords	+=0.5*texelOffsets;
	return OUT;
}

shader uint4 PS_LossComposite(atmosVertexOutput IN) : SV_TARGET
{
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec3 farLoss,nearLoss;
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	LossComposite(farLoss,nearLoss,depthTexture
					,viewportToTexRegionScaleBias
					,lossTexture
					,invViewProj
					,IN.texCoords
					,IN.pos
					,depthInterpretationStruct
					,tanHalfFov);

	uint2 faru		=colour3_to_uint2(farLoss);
	uint2 nearu		=colour3_to_uint2(nearLoss);
    return uint4(faru,nearu);
}

shader uint4 PS_LossCompositeShadowed(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec3 farLoss,nearLoss;
	LossCompositeShadowed(farLoss,nearLoss,depthTexture,cloudShadowTexture
						,viewportToTexRegionScaleBias
						,lossTexture
						,invViewProj
						,IN.texCoords
						,IN.pos
						,depthInterpretationStruct
						,maxFadeDistanceMetres
						,tanHalfFov
						,invShadowMatrix,viewPosition,cloudShadowing,cloudShadowSharpness);
	uint2 faru		=colour3_to_uint2(farLoss);
	uint2 nearu		=colour3_to_uint2(nearLoss);

    return uint4(faru,nearu);
}


shader vec4 PS_NearFarShadow(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec2 nf=NearFarShadow(depthTexture,cloudShadowTexture
						,viewportToTexRegionScaleBias
						,lossTexture
						,invViewProj
						,IN.texCoords
						,IN.pos
						,depthInterpretationStruct
						,maxFadeDistanceMetres
						,tanHalfFov
						,invShadowMatrix,viewPosition,cloudShadowing,cloudShadowSharpness);

    return vec4(nf,0,0);
}
shader vec4 PS_Loss(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec3 loss		=AtmosphericsLoss(depthTexture
									,viewportToTexRegionScaleBias
									,lossTexture
									,invViewProj
									,IN.texCoords
									,IN.pos
									,depthInterpretationStruct
									,tanHalfFov);
    return float4(loss.rgb,1.0);
}

shader vec4 PS_LossMSAA(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	int2 pos2;
	uint numSamples;
	GetMSAACoordinates(depthTextureMS,depth_texc,pos2,numSamples);
	vec3 loss		=AtmosphericsLossMSAA(depthTextureMS
											,sampleIndex
											,viewportToTexRegionScaleBias
											,lossTexture
											,invViewProj
											,IN.texCoords
											,pos2
											,IN.pos
											,depthInterpretationStruct
											,tanHalfFov);
    return vec4(loss.rgb,1.0);
}


shader vec4 PS_Inscatter(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	int numSamples	=1;
	vec4 insc		=Inscatter(	 inscTexture
								,skylTexture
								,depthTexture
								,numSamples
								,illuminationTexture
								,invViewProj
								,IN.texCoords
								,lightDir
								,hazeEccentricity
								,mieRayleighRatio
								,viewportToTexRegionScaleBias
								,depthInterpretationStruct
								,tanHalfFov
								,true
								,false);
    vec4 res=vec4(insc.rgb*exposure,1.0);
	return res;
}

shader vec4 PS_InscatterMSAA(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	uint2 dims;
	uint numSamples;
	depthTextureMS.GetDimensions(dims.x,dims.y,numSamples);
	int2 pos2=int2(IN.texCoords*vec2(dims.xy));
	vec4 res=InscatterMSAA(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTextureMS
							,numSamples
							,IN.texCoords
							,pos2
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov
							,false
							,false);
	res.rgb	*=exposure;
	return res;
}


shader vec4 PS_Loss_Far(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	int2 pos2;
	uint numSamples;
	GetMSAACoordinates(depthTextureMS,depth_texc,pos2,numSamples);
	vec3 loss			=AtmosphericsLossMSAA(depthTextureMS
											,numSamples
											,viewportToTexRegionScaleBias
											,lossTexture
											,invViewProj
											,IN.texCoords
											,pos2
											,IN.pos
											,depthInterpretationStruct
											,tanHalfFov);
    return float4(loss.rgb,1.0);
}

shader vec4 PS_Loss_Near(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	int2 pos2;
	uint numSamples;
	GetMSAACoordinates(depthTextureMS,depth_texc,pos2,numSamples);
	vec3 loss		=AtmosphericsLossMSAA(depthTextureMS
											,numSamples
											,viewportToTexRegionScaleBias
											,lossTexture
											,invViewProj
											,IN.texCoords
											,pos2
											,IN.pos
											,depthInterpretationStruct
							,tanHalfFov);
    return float4(loss.rgb,1.0);
}

shader vec4 PS_Inscatter_Far_MSAA(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	uint2 dims;
	uint numSamples;
	depthTextureMS.GetDimensions(dims.x,dims.y,numSamples);
	int2 pos2=int2(IN.texCoords*vec2(dims.xy));
	vec4 res=InscatterMSAA(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTextureMS
							,numSamples
							,IN.texCoords
							,pos2
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov,true,false);
	res.rgb	*=exposure;
	return res;
}

shader vec4 PS_Inscatter_Near_MSAA(atmosVertexOutput IN) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	uint2 dims;
	uint numSamples;
	depthTextureMS.GetDimensions(dims.x,dims.y,numSamples);
	int2 pos2=int2(IN.texCoords*vec2(dims.xy));
	vec4 res=InscatterMSAA(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTextureMS
							,numSamples
							,IN.texCoords
							,pos2
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov,true,true);
	res.rgb	*=exposure;
	return res;
}
shader vec4 PS_Inscatter_Far_NFDepth(atmosVertexOutput IN) : SV_TARGET0
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec4 res	=Inscatter_NFDepth(	inscTexture
									,skylTexture
									,illuminationTexture
									,depthTexture
									,IN.texCoords
									,invViewProj
									,lightDir
									,hazeEccentricity
									,mieRayleighRatio
									,viewportToTexRegionScaleBias
									,depthInterpretationStruct
									,tanHalfFov,true,false);
	res.rgb	*=exposure;
	return res;
}

shader vec4 PS_Inscatter_Near_NFDepth(atmosVertexOutput IN) : SV_TARGET0
{
	return vec4(1,0,1,1);
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec4 res=Inscatter_NFDepth(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTexture
							,IN.texCoords
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov,true,true);
	res.rgb	*=exposure;
	return res;
}

shader vec4 PS_Inscatter_Near_NFDepth1(atmosVertexOutput IN) : SV_TARGET1
{
	return vec4(0,1,0,1);
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	vec4 res=Inscatter_NFDepth(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTexture
							,IN.texCoords
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov,false,true);
	res.rgb	*=exposure;
	return res;
}

shader FarNearOutput PS_Inscatter_Both(atmosVertexOutput IN)
{
	vec2 depth_texc		=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec4 depth_lookup	=texture_nearest_lod(depthTexture,depth_texc,0);
	vec2 texCoords		=mixedResolutionTransformXYWH.xy+IN.texCoords.xy*mixedResolutionTransformXYWH.zw;
#if 0
	FarNearOutput fn;
	fn.farColour=vec4(texCoords,0,1);
	fn.nearColour=vec4(0,texCoords,1);
#else
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	FarNearOutput fn	=Inscatter_Both(inscTexture
										,skylTexture
										,illuminationTexture
										,depth_lookup
										,texCoords
										,invViewProj
										,lightDir
										,hazeEccentricity
										,mieRayleighRatio
										,viewportToTexRegionScaleBias
										,depthInterpretationStruct
										,tanHalfFov);
#endif
	fn.farColour.rgb	*=exposure;
	fn.nearColour.rgb	*=exposure;
	return fn;
}

All8Output psInscatter_Volume(atmosVertexOutput IN,float godrays)
{
	vec4 depth_lookup	=vec4(0.0,1.0,1.0,0.0);
	vec2 texCoords		=mixedResolutionTransformXYWH.xy+IN.texCoords.xy*mixedResolutionTransformXYWH.zw;
	vec4 colours[8];
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	Inscatter_All( colours
					,inscTexture
					,skylTexture
					,illuminationTexture
					,cloudShadowTexture
					,cloudTexture
					, cloudSamplerState
					,viewPosition
					,invShadowMatrix
					,depth_lookup
					,texCoords
					,invViewProj
					,lightDir
					,hazeEccentricity
					,mieRayleighRatio
					,depthInterpretationStruct
					,maxFadeDistanceMetres
					,godrays);
	
	All8Output all8Output;
	all8Output.colour1	=colours[0]*exposure;
	all8Output.colour2	=colours[1]*exposure;
	all8Output.colour3	=colours[2]*exposure;
	all8Output.colour4	=colours[3]*exposure;
	all8Output.colour5	=colours[4]*exposure;
	all8Output.colour6	=colours[5]*exposure;
	all8Output.colour7	=colours[6]*exposure;
	all8Output.colour8	=colours[7]*exposure;
	return all8Output;
}

shader All8Output PS_Inscatter_Volume_WithGodrays(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,godraysIntensity);
}

shader All8Output PS_Inscatter_Volume_WithoutGodrays(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,0.0);
}
All8Output psLossVolume(atmosVertexOutput IN,bool shadowed)
{
	vec4 depth_lookup	=vec4(0.0,1.0,1.0,0.0);
	vec2 texCoords		=mixedResolutionTransformXYWH.xy+IN.texCoords.xy*mixedResolutionTransformXYWH.zw;
	vec4 colours[8];
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,REVERSE_DEPTH};
	Loss_All( colours
				,lossTexture
				,depthTexture
				,cloudTexture
				,cloudSamplerState
				,viewPosition
				,invShadowMatrix
				,depth_lookup
				,texCoords
				,invViewProj
				,lightDir
				,hazeEccentricity
				,mieRayleighRatio
				,depthInterpretationStruct,tanHalfFov
				,viewportToTexRegionScaleBias
				,maxFadeDistanceMetres
				,shadowed,cloudShadowing,cloudShadowSharpness);
	
	All8Output all8Output;
	all8Output.colour1	=colours[0];
	all8Output.colour2	=colours[1];
	all8Output.colour3	=colours[2];
	all8Output.colour4	=colours[3];
	all8Output.colour5	=colours[4];
	all8Output.colour6	=colours[5];
	all8Output.colour7	=colours[6];
	all8Output.colour8	=colours[7];
	return all8Output;
}


shader All8Output PS_LossVolumeShadowed(atmosVertexOutput IN)
{
	return psLossVolume(IN,true);
}

shader All8Output PS_LossVolumeUnshadowed(atmosVertexOutput IN)
{
	return psLossVolume(IN,false);
}

[numthreads(8,8,1)]
shader void CS_ScatteringVolume(uint3 idx: SV_DispatchThreadID)
{
	ScatteringVolume(targetVolume,	idx
									,inscTexture
									,skylTexture
									,illuminationTexture
									,cloudShadowTexture,invShadowMatrix,cloudTexture,worldToCloudMatrix,viewPosition
									,xAxis
									,yAxis
									,lightDir
									,scatteringVolumeDims
									,hazeEccentricity
									,mieRayleighRatio
									,maxFadeDistanceMetres);
}

technique loss_composite
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_LossComposite()));
    }
}
technique loss_composite_shadowed
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_LossCompositeShadowed()));
    }
}
technique near_far_shadow
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_NearFarShadow()));
    }
}
technique loss
{
    pass far
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Loss()));
    }
    pass near
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Loss()));
    }
}

technique inscatter
{
    pass far
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter()));
    }
    pass near
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter()));
    }
}

technique loss_msaa
{
    pass far
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Loss_Far()));
    }
    pass near
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Loss_Near()));
    }
}

// An inscatter technique that expects an MSAA depth texture. Probably too inefficient for everyday use.
technique inscatter_msaa
{
    pass far
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Far_MSAA()));
    }
    pass near
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Near_MSAA()));
    }
}

BlendState DontBlend8
{
	BlendEnable[0] = FALSE;
	BlendEnable[1]	=FALSE;
	BlendEnable[2] = FALSE;
	BlendEnable[3]	=FALSE;
	BlendEnable[4] = FALSE;
	BlendEnable[5]	=FALSE;
	BlendEnable[6] = FALSE;
	BlendEnable[7]	=FALSE;
};

technique inscatter_volume
{
	pass with_godrays
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithGodrays()));
	}
	pass without_godrays
	{
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithoutGodrays()));
	}
}
technique loss_volume
{
    pass unshadowed
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeUnshadowed()));
    }
    pass shadowed
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeShadowed()));
    }
}

fxgroup atmospherics_overlay
{
	technique standard
	{
		pass loss
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			//SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
			SetPixelShader(CompileShader(ps_5_0,PS_Loss()));
		}
		pass inscatter
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter()));
		}
	}
	technique msaa
	{
		pass loss
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			//SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
			SetPixelShader(CompileShader(ps_5_0,PS_LossMSAA()));
		}
		pass inscatter
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(CompileShader(vs_5_0,VS_Atmos()));
			SetPixelShader(CompileShader(ps_5_0,PS_InscatterMSAA()));
		}
	}
}

technique scattering_volume
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_ScatteringVolume()));
    }
}