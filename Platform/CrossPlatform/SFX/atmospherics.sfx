#include "shader_platform.sl"
#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/depth.sl"
#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/cloud_shadow.sl"
#include "../../CrossPlatform/SL/atmospherics.sl"
#include "../../CrossPlatform/SL/atmospherics_constants.sl"
#include "../../CrossPlatform/SL/colour_packing.sl"

Texture2D depthTexture;
Texture2DMS<float4> depthTextureMS;
Texture2D cloudDepthTexture;
Texture2D imageTexture;
Texture2D lossTexture;
Texture2D inscTexture;
Texture2D overcTexture;
Texture2D skylTexture;
Texture2D illuminationTexture;
Texture2D cloudShadowTexture;
Texture2D cloudNearFarTexture;
Texture2D cloudGodraysTexture;

Texture3D cloudTexture;
SamplerState cloudSamplerState;
Texture2D moistureTexture;

RWTexture3D<float4> targetVolume;

SamplerState samplerState: register(s1)
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

#include "../../CrossPlatform/SL/cloud_shadow.sl"
#include "../../CrossPlatform/SL/godrays.sl"

#define pi (3.1415926536)

struct atmosVertexInput
{
	uint vertex_id			: SV_VertexID;
};

struct atmosVertexOutput
{
    float4 position			: SV_POSITION;
    float2 texCoords		: TEXCOORD0;
    float2 pos				: TEXCOORD1;
};

shader atmosVertexOutput VS_Atmos(atmosVertexInput IN)
{
	atmosVertexOutput OUT;
	float2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	OUT.pos			=poss[IN.vertex_id];
	OUT.position	=float4(OUT.pos,0.0,1.0);
	// Set to far plane so can use depth test as want this geometry effectively at infinity

	OUT.position.z	=0.0; 

    OUT.texCoords	=0.5*(float2(1.0,1.0)+vec2(OUT.pos.x,-OUT.pos.y));
	OUT.texCoords	+=0.5*texelOffsets;
	return OUT;
}

vec4 PS_NearFarShadow(atmosVertexOutput IN,bool reverseDepth)
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec2 nf=NearFarShadow(depthTexture,cloudShadowTexture
						,viewportToTexRegionScaleBias
						,lossTexture
						,invViewProj
						,IN.texCoords
						,IN.pos
						,depthInterpretationStruct
						,maxFadeDistanceMetres
						,tanHalfFov
						,invShadowMatrix,viewPosition,cloudShadowing,cloudShadowSharpness);

    return vec4(nf,0,0);
}

shader vec4 PS_NearFarShadow_ReverseDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_NearFarShadow(IN,true);
}

shader vec4 PS_NearFarShadow_ForwardDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_NearFarShadow(IN,false);
}

shader vec4 PS_Loss(atmosVertexOutput IN,bool reverseDepth)
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	vec3 loss		=AtmosphericsLoss(depthTexture
									,viewportToTexRegionScaleBias
									,lossTexture
									,invViewProj
									,IN.texCoords
									,IN.pos
									,depthInterpretationStruct
									,tanHalfFov);
    return float4(loss.rgb,1.0);
}

shader vec4 PS_Loss_ReverseDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_Loss(IN,true);
}

shader vec4 PS_Loss_ForwardDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_Loss(IN,false);
}

vec4 PS_LossMSAA(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex,bool reverseDepth)
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	vec2 depth_texc	=viewportCoordToTexRegionCoord(IN.texCoords.xy,viewportToTexRegionScaleBias);
	int2 pos2;
	uint numSamples;
	GetMSAACoordinates(depthTextureMS,depth_texc,pos2,numSamples);
	vec3 loss		=AtmosphericsLossMSAA(depthTextureMS
											,sampleIndex
											,viewportToTexRegionScaleBias
											,lossTexture
											,invViewProj
											,IN.texCoords
											,pos2
											,IN.pos
											,depthInterpretationStruct
											,tanHalfFov);
    return vec4(loss.rgb,1.0);
}

shader vec4 PS_LossMSAA_ReverseDepth(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex) : SV_TARGET
{
	return PS_LossMSAA(IN,sampleIndex,true);
}

shader vec4 PS_LossMSAA_ForwardDepth(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex) : SV_TARGET
{
	return PS_LossMSAA(IN,sampleIndex,false);
}

shader vec4 PS_Inscatter(atmosVertexOutput IN,bool reverseDepth) : SV_TARGET
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	int numSamples	=1;
	vec4 insc		=Inscatter(	 inscTexture
								,skylTexture
								,depthTexture
								,numSamples
								,illuminationTexture
								,invViewProj
								,IN.texCoords
								,lightDir
								,hazeEccentricity
								,mieRayleighRatio
								,viewportToTexRegionScaleBias
								,depthInterpretationStruct
								,tanHalfFov
								,true
								,false);
    vec4 res=vec4(insc.rgb*exposure,1.0);
	return res;
}

shader vec4 PS_Inscatter_ReverseDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_Inscatter(IN,true);
}

shader vec4 PS_Inscatter_ForwardDepth(atmosVertexOutput IN) : SV_TARGET
{
	return PS_Inscatter(IN,false);
}

vec4 PS_InscatterMSAA(atmosVertexOutput IN,uint sampleIndex,bool reverseDepth)
{
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	uint2 dims;
	uint numSamples;
	depthTextureMS.GetDimensions(dims.x,dims.y,numSamples);
	int2 pos2=int2(IN.texCoords*vec2(dims.xy));
	vec4 res=InscatterMSAA(	inscTexture
							,skylTexture
							,illuminationTexture
							,depthTextureMS
							,numSamples
							,IN.texCoords
							,pos2
							,invViewProj
							,lightDir
							,hazeEccentricity
							,mieRayleighRatio
							,viewportToTexRegionScaleBias
							,depthInterpretationStruct
							,tanHalfFov
							,false
							,false);
	res.rgb	*=exposure;
	return res;
}

shader vec4 PS_InscatterMSAA_ReverseDepth(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex) : SV_TARGET
{
	return PS_InscatterMSAA(IN,sampleIndex,true);
}

shader vec4 PS_InscatterMSAA_ForwardDepth(atmosVertexOutput IN,uint sampleIndex:SV_SampleIndex) : SV_TARGET
{
	return PS_InscatterMSAA(IN,sampleIndex,false);
}

All8Output psInscatter_Volume(atmosVertexOutput IN,float godrays,bool reverseDepth)
{
	vec4 depth_lookup	=vec4(0.0,1.0,1.0,0.0);
	vec2 texCoords		=mixedResolutionTransformXYWH.xy+IN.texCoords.xy*mixedResolutionTransformXYWH.zw;
	vec4 colours[8];
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	Inscatter_All( colours
					,inscTexture
					,skylTexture
					,illuminationTexture
					,cloudShadowTexture
					,cloudTexture
					, cloudSamplerState
					,viewPosition
					,invShadowMatrix
					,depth_lookup
					,texCoords
					,invViewProj
					,lightDir
					,hazeEccentricity
					,mieRayleighRatio
					,depthInterpretationStruct
					,maxFadeDistanceMetres
					,godrays);
	
	All8Output all8Output;
	all8Output.colour1	=colours[0]*exposure;
	all8Output.colour2	=colours[1]*exposure;
	all8Output.colour3	=colours[2]*exposure;
	all8Output.colour4	=colours[3]*exposure;
	all8Output.colour5	=colours[4]*exposure;
	all8Output.colour6	=colours[5]*exposure;
	all8Output.colour7	=colours[6]*exposure;
	all8Output.colour8	=colours[7]*exposure;
	return all8Output;
}

shader All8Output PS_Inscatter_Volume_WithGodrays_reverseDepth(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,godraysIntensity,true);
}

shader All8Output PS_Inscatter_Volume_WithoutGodrays_reverseDepth(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,0.0,true);
}

shader All8Output PS_Inscatter_Volume_WithGodrays_forwardDepth(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,godraysIntensity,false);
}

shader All8Output PS_Inscatter_Volume_WithoutGodrays_forwardDepth(atmosVertexOutput IN)
{
	return psInscatter_Volume(IN,0.0,false);
}

All8Output psLossVolume(atmosVertexOutput IN,bool shadowed,bool reverseDepth)
{
	vec4 depth_lookup	=vec4(0.0,1.0,1.0,0.0);
	vec2 texCoords		=mixedResolutionTransformXYWH.xy+IN.texCoords.xy*mixedResolutionTransformXYWH.zw;
	vec4 colours[8];
	DepthIntepretationStruct depthInterpretationStruct={depthToLinFadeDistParams,reverseDepth};
	Loss_All( colours
				,lossTexture
				,depthTexture
				,cloudTexture
				,cloudSamplerState
				,viewPosition
				,invShadowMatrix
				,depth_lookup
				,texCoords
				,invViewProj
				,lightDir
				,hazeEccentricity
				,mieRayleighRatio
				,depthInterpretationStruct,tanHalfFov
				,viewportToTexRegionScaleBias
				,maxFadeDistanceMetres
				,shadowed,cloudShadowing,cloudShadowSharpness);
	
	All8Output all8Output;
	all8Output.colour1	=colours[0];
	all8Output.colour2	=colours[1];
	all8Output.colour3	=colours[2];
	all8Output.colour4	=colours[3];
	all8Output.colour5	=colours[4];
	all8Output.colour6	=colours[5];
	all8Output.colour7	=colours[6];
	all8Output.colour8	=colours[7];
	return all8Output;
}


shader All8Output PS_LossVolumeShadowed_reverseDepth(atmosVertexOutput IN)
{
	return psLossVolume(IN,true,true);
}

shader All8Output PS_LossVolumeUnshadowed_reverseDepth(atmosVertexOutput IN)
{
	return psLossVolume(IN,false,true);
}


shader All8Output PS_LossVolumeShadowed_forwardDepth(atmosVertexOutput IN)
{
	return psLossVolume(IN,true,false);
}

shader All8Output PS_LossVolumeUnshadowed_forwardDepth(atmosVertexOutput IN)
{
	return psLossVolume(IN,false,false);
}

[numthreads(8,8,1)]
shader void CS_ScatteringVolume(uint3 idx: SV_DispatchThreadID)
{
	ScatteringVolume(targetVolume,	idx
									,inscTexture
									,skylTexture
									,illuminationTexture
									,cloudShadowTexture,invShadowMatrix,cloudTexture,worldToCloudMatrix,viewPosition
									,xAxis
									,yAxis
									,lightDir
									,scatteringVolumeDims
									,hazeEccentricity
									,mieRayleighRatio
									,maxFadeDistanceMetres);
}
VertexShader vs_atmos=CompileShader(vs_5_0,VS_Atmos());

technique near_far_shadow
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs_atmos);
		SetPixelShader(CompileShader(ps_5_0,PS_NearFarShadow_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		SetVertexShader(vs_atmos);
		SetPixelShader(CompileShader(ps_5_0,PS_NearFarShadow_ForwardDepth()));
    }
}

BlendState DontBlend8
{
	BlendEnable[0] = FALSE;
	BlendEnable[1]	=FALSE;
	BlendEnable[2] = FALSE;
	BlendEnable[3]	=FALSE;
	BlendEnable[4] = FALSE;
	BlendEnable[5]	=FALSE;
	BlendEnable[6] = FALSE;
	BlendEnable[7]	=FALSE;
};

group inscatter_volume
{
	technique with_godrays
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithGodrays_reverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithGodrays_forwardDepth()));
		}
	}
	technique without_godrays
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithoutGodrays_reverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_Volume_WithoutGodrays_forwardDepth()));
		}
	}
}

group loss_volume
{
	technique unshadowed
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeUnshadowed_reverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeUnshadowed_forwardDepth()));
		}
    }
	technique shadowed
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeShadowed_reverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(DontBlend8, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetVertexShader(vs_atmos);
			SetGeometryShader(NULL);
			SetPixelShader(CompileShader(ps_5_0,PS_LossVolumeShadowed_forwardDepth()));
		}
    }
}

fxgroup atmospherics_overlay
{
	technique loss
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(vs_atmos);
			SetPixelShader(CompileShader(ps_5_0,PS_Loss_ReverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(MultiplyBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(vs_atmos);
			SetPixelShader(CompileShader(ps_5_0,PS_Loss_ForwardDepth()));
		}
	}
	technique inscatter
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(vs_atmos);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_ReverseDepth()));
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
			SetDepthStencilState( DisableDepth, 0 );
			SetBlendState(AddBlend, float4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
			SetGeometryShader(NULL);
			SetVertexShader(vs_atmos);
			SetPixelShader(CompileShader(ps_5_0,PS_Inscatter_ForwardDepth()));
		}
	}
}

technique scattering_volume
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_ScatteringVolume()));
    }
}