//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/depth.sl"
#include "../SL/simul_inscatter_fns.sl"
#include "../SL/cloud_shadow.sl"
#include "../SL/atmospherics.sl"
#include "../SL/atmospherics_constants.sl"
#include "../SL/earth_shadow_uniforms.sl"
#include "../SL/colour_packing.sl"
#include "../SL/illumination.sl"

uniform Texture2D inscTexture;
uniform Texture2D skylTexture;

uniform Texture3D cloudTexture;
uniform Texture3D godraysTexture;
SamplerState cloudSamplerState;
uniform TextureCube cubeDepthTexture;
uniform RWTexture3D<vec4> targetVolume;

#include "../SL/cloud_shadow.sl"
#include "../SL/godrays.sl"

#define pi (3.1415926536)

struct atmosVertexInput
{
	uint vertex_id			: SV_VertexID;
};

struct atmosVertexOutput
{
    vec4 position		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec2 pos			: TEXCOORD1;
};

#define clampClouds (0)

CS_LAYOUT(4,4,1)
shader void CS_GodraysVolume(uint3 p: SV_DispatchThreadID)
{
	uint3 idx			=p*amortization+amortizationOffset;
	if(p.x>=edge.x||p.y>=edge.y)
		return;
	// We must convert the idx values into a direction and distance in real space.
	// x is azimuth and y is distance.
	float az_texc		=float(idx.x)/float(scatteringVolumeDims.x);
	float radial_texc	=float(idx.y)/float(scatteringVolumeDims.y-1);
	float azimuth		=az_texc*2.0*PI;
	float x				=radial_texc*sin(azimuth);
	float y				=radial_texc*cos(azimuth);
//vec3 view			=mul(lightspaceToWorldMatrix,vec4(x,y,ce,1.0)).xyz;

//	float godraysIntensity	=1.0;
	vec3 lightDirCloudspace	=normalize(mul(worldToCloudMatrix,vec4(lightDir,0.0)).xyz);

	vec3 viewPosKm			=viewPosition/1000.0;
	float maxFadeDistanceKm	=maxFadeDistanceMetres*0.001;
	float total=0.0;
	float total_illum=1.0;
	for(int i=0;i<scatteringVolumeDims.z;i++)
	{
		float z_texc			=float(i)/float(scatteringVolumeDims.z-1);
		float z					=lerp(1.0,-1.0,z_texc);//radial_texc*

		//vec3 earth_shadow_illum=vec3(0,0,0);
		vec3 pos_l				=vec3(x,y,z);
		vec3 pos_w				=mul(lightspaceToWorldMatrix,vec4(pos_l,1.0)).xyz;
		vec4 depth_lookup		=texture_cube_lod(cubeDepthTexture,normalize(pos_w),0);
		float dist				=length(pos_w)*0.001/maxFadeDistanceKm;

		vec3 pos_m				=viewPosition+pos_w;
		
		vec3 viewposCloudspace	=mul(worldToCloudMatrix,vec4(pos_m,1.0)).xyz;
		float illum				=1.0-godraysIntensity*(1.0-GetCloudIllum(cloudTexture, cloudSamplerState, viewposCloudspace, lightDirCloudspace,clampClouds));
		//earth_shadow_illum	=IlluminationAtPosition(viewPosKm+view*dist*maxFadeDistanceKm,sunDir,planetRadiusKm,vec3(45.0,35.0,25.0));
		//illum					=saturate(1.0-15.0*godraysIntensity*(1.0-illum));
		total_illum				*=illum;
		float t					=0.1;
		total_illum				*=saturate((depth_lookup.x-dist+t)/t);
			
		vec4 res				=vec4(total_illum,total_illum,total_illum,1.0);
		int3 pos				=int3(idx.xy,scatteringVolumeDims.z-1-i);
		IMAGE_STORE_3D(targetVolume,pos,res);
	}
}

// In the second pass, we travel radially outward from the viewer. In this context, lightspace is (azimuth around lightDir, elevation towards/away from lightDir, and distance).
// so to translate from the position in this space to the texcoord in the previous cloud-shadow space, we keep the x.

CS_LAYOUT(4,4,1)
shader void CS_GodraysAccumulation(uint3 p: SV_DispatchThreadID)
{
	uint3 idx			=p;//*amortization+amortizationOffset;
//	if(p.x>=edge.x||p.y>=edge.z)
//		return;
	vec4 unity			=vec4(1.0,1.0,1.0,1.0);
	vec4 total			=unity;
	//IMAGE_STORE_3D(targetVolume,int3(idx.x,0,idx.y),unity);
	vec3 texc			=vec3(idx)/vec3(scatteringVolumeDims.xyz);
	// Elevation: pi/2 is 90 degrees. The top (texc.y=1.0) should be pi/2,
	// the bottom (texc.y=0) should be -pi/2.
	float elevation		=pi*(.5-texc.y);
	float sum			=0.0;
	for(int i=0;i<scatteringVolumeDims.z;i++)
	{
		int3 pos		=int3(idx.x,idx.y,i);
		texc.z			=float(i)/float(scatteringVolumeDims.z);
		float dist		=texc.z;
		vec3 texc_gr	=vec3(texc.x,dist*cos(elevation),0.5*(1.0-dist*sin(elevation)+zOrigin));
		vec4 lookup		=godraysTexture.SampleLevel(wccSamplerState,texc_gr,0);
		total			+=lookup;
		sum				+=1.0;
	//	total			*=lookup;
		vec4 result		=lerp(total/sum,vec4(1,1,1,1),.5*float(i)/float(scatteringVolumeDims.z-1));
		IMAGE_STORE_3D(targetVolume,pos,result);
	}
}

// With this function we will create a 3D volume texture that encompasses the scattering for a frame,
// where the x-axis is azimuth around the light source, y-axis is angle from the light source (maximum = 180 deg)
// and z-axis is distance from the viewer.

CS_LAYOUT(4,4,1)
shader void CS_ScatteringVolume(uint3 p: SV_DispatchThreadID)
{
	uint3 idx			=p*amortization+amortizationOffset;
	if(p.x>=edge.x||p.y>=edge.y)
		return;
	// We must convert the idx values into a direction and distance in real space.
	vec2 texc				=vec2(float(idx.x)/float(scatteringVolumeDims.x),float(idx.y)/float((scatteringVolumeDims.y-1)));
	float azimuth			=texc.x*2.0*PI;
	float elevation			=(1.0-texc.y)*PI;
	float se				=sin(elevation);
	float ce				=cos(elevation);
	float x					=sin(azimuth)*se;
	float y					=cos(azimuth)*se;
	vec3 view				=vec4(x,y,ce,1.0).xyz;//x*xAxis+y*yAxis+lightDir*ce;
	
	float sine				=view.z;

	float fade_texc_y		=0.5*(1.0-sine);
	// Illumination texture is worldspace:
	float world_azimuth		=atan2(view.x,view.y);
	vec2 illum_texc			=vec2(world_azimuth/(2.0*PI),(1.0+sine)*0.5);
	vec4 colour				=vec4(0,0,0,0);
	vec4 last				=vec4(0,0,0,0);
	float godraysIntensity	=1.0;
	float cos0				=dot(view.xyz,lightDir);
	vec3 lightDirCloudspace	=normalize(mul(worldToCloudMatrix,vec4(lightDir,0.0)).xyz);
	vec3 viewCloudspace		=mul(worldToCloudMatrix,vec4(view,0.0)).xyz*1000.0;
	vec3 viewposCloudspace	=mul(worldToCloudMatrix,vec4(viewPosition,1.0)).xyz;

	vec3 viewPosKm			=vec3(0.0,0.0,viewPosition.z/1000.0);
	float maxFadeDistanceKm	=maxFadeDistanceMetres*0.001;
	
	for(int i=0;i<scatteringVolumeDims.z;i++)
	{
		float dist_texc	=float(i)/float(scatteringVolumeDims.z-1);
		float dist		=pow(dist_texc,2.0);
		float distanceKm=dist*maxFadeDistanceKm;
		vec3 offsetKm	=view*distanceKm;
		vec3 ls_pos		=mul(lightspaceToWorldMatrix,vec4(1000.0*offsetKm,1.0)).xyz;
		float r			=length(ls_pos);
		vec3 ls_texc	=vec3(frac(atan2(ls_pos.x,ls_pos.y)/(2.0*pi)),0.5+0.5*asin(ls_pos.z/r)*2.0/pi,r);
		vec2 fade_texc	=vec2(sqrt(dist),fade_texc_y);
		vec4 insc		=texture_clamp_mirror_lod(inscTexture,fade_texc,0);
		vec3 skyl		=texture_clamp_mirror_lod(skylTexture,fade_texc,0).rgb;
	#ifdef INFRARED
		vec4 next		=vec4(skyl.rgb,1.0);
		float shadow	=1.0;
		colour			+=max(vec4(0,0,0,0),(next-last));
	#else
		vec4 godrays_lookup=texture_3d_wmc_lod(godraysTexture,ls_texc,0);
		float illum=0;
		vec3 earth_shadow_illum=vec3(0,0,0);

		earth_shadow_illum	=IlluminationAtPosition(viewPosKm+offsetKm,sunDir,planetRadiusKm,vec3(45.0,35.0,25.0));
		vec4 next			=vec4(InscatterFunction(insc,hazeEccentricity,cos0,mieRayleighRatio),1.0);
		vec4 dc				=max(vec4(0,0,0,0),(next-last));
		dc.rgb				*=earth_shadow_illum;
		colour				+=dc;
		colour.a			=godrays_lookup.r;
#endif
		vec4 res			=colour+vec4(skyl,0);
		int3 pos			=int3(idx.xy,i);

		IMAGE_STORE_3D(targetVolume,pos,res);
		last				=next;
	}
}

technique scattering_volume
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_ScatteringVolume()));
    }
}

technique godrays_volume
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_GodraysVolume()));
    }
} 

technique godrays_accumulation
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_GodraysAccumulation()));
    }
}