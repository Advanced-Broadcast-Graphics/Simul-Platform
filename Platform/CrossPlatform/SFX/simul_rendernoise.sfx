#include "shader_platform.sl"
#include "../SL/states.sl"
#include "../SL/noise.sl"
#include "../SL/noise_constants.sl"

uniform Texture2D noise_texture SIMUL_TEXTURE_REGISTER(0);
uniform Texture3D random_texture_3d SIMUL_TEXTURE_REGISTER(1);
RW_TEXTURE3D_FLOAT4 targetTexture32 SIMUL_RWTEXTURE_REGISTER(0);
RW_TEXTURE3D_FLOAT4 targetTexture8 SIMUL_RWTEXTURE_REGISTER(1);

SamplerState samplerState 
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Wrap;
	AddressV = Wrap;
};

struct a2v
{
    vec4 position  : POSITION;
    vec2 texCoords  : TEXCOORD0;
};

struct v2f
{
    vec4 hPosition  : SV_POSITION;
    vec2 texCoords  : TEXCOORD0;
};

shader v2f MainVS(idOnly IN)
{
    v2f OUT;
	vec2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
	OUT.hPosition	=vec4(pos,0.0,1.0);
    OUT.texCoords	=0.5*(vec2(1.0,1.0)+vec2(pos.x,pos.y));
	return OUT;
}

shader vec4 RandomPS(v2f IN) : SV_TARGET
{
	// Range from -1 to 1.
	vec4 c=2.0*vec4(rand(IN.texCoords),rand(1.7*IN.texCoords),rand(0.11*IN.texCoords),rand(513.1*IN.texCoords))-1.0;
	//vec4 c=vec4(SphericalRandom(IN.texCoords),2.0*rand(513.1*IN.texCoords)-1.0);
    return c;
}

shader vec4 NoisePS(v2f IN) : SV_TARGET
{
    return Noise(noise_texture,IN.texCoords,persistence,octaves);
}

[numthreads(8,8,8)]
shader void CS_Random3D(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)	//SV_DispatchThreadID gives the combined id in each dimension.
{
	uint3 pos = g * 8 + t;
	int3 dims=int3(noise_texture_size,noise_texture_size,noise_texture_size);
	//targetTexture32.GetDimensions(dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 texCoords			=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	vec2 texc2				=texCoords.xy+dims.y*texCoords.z;
	// Range from -1 to 1.
	vec4 c					=vec4(SphericalRandom(texCoords),rand3(513.1*texCoords));
   // vec4 c				=2.0*vec4(rand(texc2),rand(1.7*texc2),rand(0.11*texc2),rand(513.1*texc2))-vec4(1.0,1.0,1.0,1.0);
    IMAGE_STORE(targetTexture32,pos,c.xyzw);
}

[numthreads(8,8,8)]
shader void CS_Noise3D_8(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)	//SV_DispatchThreadID gives the combined id in each dimension.
{
	uint3 pos = g * 8 + t;
	int3 dims=int3(noise_texture_size,noise_texture_size,noise_texture_size);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 texCoords		=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	vec4 result			=Noise3D(random_texture_3d,texCoords,octaves, persistence);
	IMAGE_STORE(targetTexture8,pos,result);
}

[numthreads(8,8,8)]
shader void CS_Noise3D_float(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)	//SV_DispatchThreadID gives the combined id in each dimension.
{
	uint3 pos = g * 8 + t;
	int3 dims=int3(noise_texture_size,noise_texture_size,noise_texture_size);
	//targetTexture32.GetDimensions(dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 texCoords			=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	vec4 result				=Noise3D(random_texture_3d,texCoords,octaves, persistence);//texture_wrap_lod(random_texture_3d,texCoords,0);//
    IMAGE_STORE(targetTexture32,pos,result);
}


[numthreads(4,4,4)]
shader void CS_MakeMips3D_float(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	uint3 p = g * 8 + t;
	int3 pos	=int3(p);
	vec4 result	=random_texture_3d[pos*2];
	result		+=random_texture_3d[pos*2+int3(0,1,0)];
	result		+=random_texture_3d[pos*2+int3(1,0,0)];
	result		+=random_texture_3d[pos*2+int3(1,1,0)];
	result		+=random_texture_3d[pos*2+int3(0,0,1)];
	result		+=random_texture_3d[pos*2+int3(0,1,1)];
	result		+=random_texture_3d[pos*2+int3(1,0,1)];
	result		+=random_texture_3d[pos*2+int3(1,1,1)];
	result		/=8.0;
    IMAGE_STORE(targetTexture32,pos,result);
}

DepthStencilState DisableDepth
{
	DepthEnable = FALSE;
	DepthWriteMask = ZERO;
};

RasterizerState RenderNoCull
{
	CullMode = none;
};

BlendState NoBlend
{
	BlendEnable[0] = FALSE;
};

technique simul_random
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4(1.0,1.0,1.0,1.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		//SetBlendState(NoBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,MainVS()));
		SetPixelShader(CompileShader(ps_4_0,RandomPS()));
    }
}

technique simul_noise_2d
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(NoBlend, vec4(1.0,1.0,1.0,1.0 ), 0xFFFFFFFF );
        SetGeometryShader(NULL);
		//SetBlendState(NoBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,MainVS()));
		SetPixelShader(CompileShader(ps_4_0,NoisePS()));
    }
}

technique random_3d_compute
{
    pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Random3D()));
    }
}


technique noise_3d_compute_8bit
{
    pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Noise3D_8()));
    }
}

technique noise_3d_compute_float
{
    pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,CS_Noise3D_float()));
    }
}

technique make_mip_3d
{
    pass p0
	{
		SetComputeShader(CompileShader(cs_5_0,CS_MakeMips3D_float()));
    }
}
