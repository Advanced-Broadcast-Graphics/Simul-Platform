


//  Copyright (c) 2015 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "../SL/common.sl"

#include "../SL/render_states.sl"
// = 625 m^3
// Brittanica.com: http://www.britannica.com/EBchecked/topic/489827/rain#ref259264
// Concentrations of raindrops typically range from 100 to 1,000 per cubic m (3 to 30 per cubic foot);
// drizzle droplets usually are more numerous. 

#include "../SL/debug_constants.sl"
#include "../SL/rain_constants.sl"
#include "../SL/simul_inscatter_fns.sl"
#include "../SL/depth.sl"
#include "../SL/noise.sl"

uniform Texture3D randomTexture3D;
uniform Texture2D rainMapTexture;
uniform TextureCube cubeTexture;
uniform Texture2D rainTexture;
uniform Texture2D blurTexture;
// The RESOLVED depth texture at full resolution
uniform Texture2D depthTexture;
uniform Texture2DArray rainTextureArray;
uniform RWTexture2DArray<vec4> targetTextureArray;

uniform StructuredBuffer<vec4> particlePos;
uniform RWStructuredBuffer<vec4> particlePosRW;
uniform Texture2D rainDepthTexture;


// from http://http.developer.nvidia.com/GPUGems3/gpugems3_ch37.html

struct RandomResult
{
	uint4 state;
	float value;
};

uint TausStep(uint z, int S1, int S2, int S3, uint m)
{
	uint b = (((z << S1) ^ z) >> S2);
	return (((z & m) << S3) ^ b);
}

uint LCGStep(uint z, uint A, uint C)
{
	return (A * z + C);
}

RandomResult Random(uint4 state)
{
	state.x = TausStep(state.x, 13, 19, 12, 0xfffffffe);
	state.y = TausStep(state.y, 2, 25, 4, 0xfffffff8);
	state.z = TausStep(state.z, 3, 11, 17, 0xfffffff0);
	state.w = LCGStep(state.w, 1664525, (uint)1013904223);

	RandomResult result;
	result.state = state;
	result.value = 2.3283064365387e-10 * (state.x ^ state.y ^ state.z ^ state.w);

	return result;
}

struct fullscreenVertexOutput
{
    vec4 position		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
    vec2 clip_pos		: TEXCOORD1;
};

struct PrecipitationVertexInput
{
    vec3 position	: POSITION;         //position of the particle
	uint type		: TYPE0;             //particle type
	vec3 velocity	: VELOCITY0;
};					

struct ParticleGeometryOutput
{
    vec4 position		:SV_POSITION;
    vec3 dir			:TEXCOORD0;
	vec4 clip_pos		:TEXCOORD1;
	vec2 texCoords		:TEXCOORD2;
	float strength		:TEXCOORD3;
    uint type			:TEXCOORD4;
};

vec3 WrapParticleZone(vec3 pos,float zoneSize)
{
	if(pos.z<-zoneSize)
		pos.z+=2.0*zoneSize;
	if(pos.x<-zoneSize)
		pos.x+=2.0*zoneSize;
	else if(pos.x>zoneSize)
		pos.x-=2.0*zoneSize;
	if(pos.y<-zoneSize)
		pos.y+=2.0*zoneSize;
	else if(pos.y>zoneSize)
		pos.y-=2.0*zoneSize;
	const vec3 c=vec3(0.5,0.5,0.5);
	vec3 box	=pos/(2.0*zoneSize)+c;
	pos			=(frac(box)-c)*2.0*zoneSize;
	return pos;
}

vec3 Frac(vec3 pos,float scale)
{
	vec3 unity		=vec3(1.0,1.0,1.0);
	return scale*(2.0*frac(0.5*(pos/scale+unity))-unity);
}

vec3 Frac(vec3 pos,vec3 p1,float scale)
{
	vec3 unity	=vec3(1.0,1.0,1.0);
	vec3 p2		=scale*(2.0*frac(0.5*(p1/scale+unity))-unity);
	pos			+=p2-p1;
	return pos;
}

shader posTexVertexOutput VS_ShowTexture(idOnly id)
{
    return VS_ScreenQuad(id,rect);
}


CS_LAYOUT(16,1,1)
shader void CS_InitParticles(uint3 idx : SV_DispatchThreadID)
{
	uint vertex_id = idx.x;
	uint4 state = uint4(163 + vertex_id % 71, 83117 + vertex_id / 51, 195 + vertex_id / 1001, 9019 + vertex_id % 507);
	RandomResult r1 = Random(state);
	RandomResult r2 = Random(r1.state);
	RandomResult r3 = Random(r2.state);
	RandomResult r4 = Random(r3.state);
	vec3 pos = 2.0*vec3(r4.value, r2.value, r3.value);
	pos -= vec3(1.0, 1.0, 1.0);

	uint X = vertex_id / 400;
	uint Y = (vertex_id / 20) - X * 20;
	uint Z = vertex_id - Y * 20 - X * 400;
	//	pos = vec3(float(X) / 20.0, float(Y) / 20.0, float(Z) / 20.0);
	PrecipitationVertexInput v;
	v.position = pos;
	// velocity is normalized in order to scale with fall speed
	vec3 velocity = vec3(rand(1.7*float(vertex_id)), rand(.171*float(vertex_id)), rand(0.087*float(vertex_id)));
	velocity = 2.0*velocity - vec3(1.0, 1.0, 1.0);
	v.velocity = velocity;
	v.type = vertex_id%uint(32);
	//v.dummy				=0.0;
	vec4 res = vec4(pos, v.type);
	particlePosRW[vertex_id]=res;
}

CS_LAYOUT(8,8,8)
shader void CS_MakeRainTextureArray(uint3 idx: SV_DispatchThreadID )
{
	uint X,Yy,N;
	int n					=int(idx.z);
	float fn=float(n);
	float fn9=fn+0.9;
	targetTextureArray.GetDimensions(X,Yy,N);
	float brightnessMult	=0.5+rand(float(n)*1001.1);
	vec4 result				=vec4(0.0,0,0,0.5);
	// idx.x gives the index in the array.
	float b					=rand(float(n)+0.5);
	float y					=float(idx.y)/float(Yy);
	float yb				=y+b;
	float V					=0.4/SIMUL_PI_F*(0.6+0.8*rand(n));
	float U					=0.4/SIMUL_PI_F*(0.6+0.8*rand(n*4.41));
	float c					=0.25*sin(y/V);
	float brightness		=brightnessMult*(0.5+0.5*abs(sin(yb/U)));
	float h					=rand(fn9);
	float yh				=y+h;
	float highlight			=12.0*saturate(sin(yh/V)-0.95);
	
	float x					=2.0*(float(idx.x)+0.5)/float(X)-1.0;		// goes between -1 and 1
	float dx				=(x-c)*2.0;
	float dy				=(y-0.5)*2.0;
	float s					=exp(-dx*dx);
	// a is the brightness/highlight.
	// rgb is the normal map
	result.a				+=(brightness+highlight)*s;
	// given dx and dy on the circle, we assume the raindrop is at infinity from the viewer,
	// so x and y are the position of entry to the sphere.
	vec2 init				=vec2(dx,dy);	// initial sines of incidence angle
	vec2 internal			=init/1.33;		// refracted sines
	vec2 outgoing			=2.0*sin(internal-init);
	result.rg				=asin(outgoing);
	result.b				=sqrt(1.0-length(result.rg));
	targetTextureArray[idx]	=result;
}

shader ParticleGeometryOutput VS_SnowParticles(uint vertex_id : SV_VertexID)
{
	uint particle_id = vertex_id / 6;
	uint vertex_index = vertex_id - (particle_id * 6);
	ParticleGeometryOutput p;
#if 1
	uint4 state = uint4(163 + particle_id % 71, 83117 + particle_id / 51, 195 + particle_id / 1001, 9019 + particle_id % 507);
	RandomResult r1 = Random(state);
	RandomResult r2 = Random(r1.state);
	RandomResult r3 = Random(r2.state);
	RandomResult r4 = Random(r3.state);
	RandomResult r5 = Random(r4.state);
	RandomResult r6 = Random(r5.state);
	vec3 p_pos = 2.0*vec3(r4.value, r2.value, r3.value);
	p_pos -= vec3(1.0, 1.0, 1.0);
	p.type				=particle_id%uint(32);
#else
	vec3 p_pos			=particlePos[particle_id].xyz;
	p.type				=int(particlePos[particle_id].w);
#endif
	vec3 x				=vec3(r5.value,r2.value,r1.value);
	vec3 y				=vec3(r4.value,r6.value,r3.value);
	float time0			=3.14126536*2.0*(phase0+r6.value);
	float time1			=3.14126536*2.0*(phase1+r6.value);

	vec3 flurry_offset0	=x*sin(time0)+y*cos(time0);
	vec3 flurry_offset1	=x*sin(time1)+y*cos(time1);
	vec3 position		=vec3(p_pos)*particleZoneSize-offset[0].xyz;
	position			=WrapParticleZone(position, particleZoneSize/2);
	vec3 position0		=position+flurry*flurry_offset0;
	vec3 position1		=position+flurry*flurry_offset1+viewPositionOffset.xyz;

	vec3 map_texc		=mul(rainMapMatrix,vec4(viewPos[1].xyz,1.0)).xyz;
	float mapped_rain	=texture_wrap_lod(rainMapTexture,map_texc.xy,0).x;

	// discard if under surface.
	vec3 in_depth_space	=0.5*mul(rainDepthTransform,vec4(position0.xyz+viewPos[1].xyz,1.0)).xyz+vec3(0.5,0.5,0);
	float depth			=texture_clamp_lod(rainDepthTexture,vec2(in_depth_space.x,1.0-in_depth_space.y),0).x*rainDepthTextureScale;

	int maxtype			=int(16.0*mapped_rain);
	p.type				=p.type%maxtype;
	p.strength			=saturate(4.0*mapped_rain);
	if(in_depth_space.x>0&&in_depth_space.y>0&&in_depth_space.x<1.0&&in_depth_space.y<1.0&&depth>in_depth_space.z)
	{
		//p.type=44;
	}

	float g_FrameRate = 20.0;
	vec3 pos;
	vec3 vel	=position1-position0;
	float fade = p.strength;
	float w = particleWidth;

	vec3 dir;
	uint corner_id = (vertex_index + (vertex_index == 2) - 1 * (vertex_index > 2)) % 4;

    { 
		vec3 eyeVec = normalize(-position0.xyz);
		float width = w*fade;
		vec3 v1 = cross(eyeVec, vec3(0, 0, 1));
		vec3 v2 = cross(eyeVec, vec3(0, 1, 0));
		vel = vel+0.001*max(v1,v2);
		float height = w + length(vel);	// g_SpriteSize/2.0;
		float dist = length(position0.xyz);
		fade *= max(.05, saturate(2.0 * width / height));

		float pixelSize = width*500.0 / dist;
		if (pixelSize < 1.0)
	{
			width *= 1.0 / pixelSize;
			fade *= pixelSize / 1.0;
	}
		vel = normalize(vel);
		vec3 eyeOnVelVecPlane = -((dot(eyeVec, vel)) * vel);
		vec3 projectedVelVec = normalize(vel - eyeOnVelVecPlane);// -position0.xyz;
		vec3 sideVec = normalize(cross(projectedVelVec, eyeVec));

		vec2 trans = 2.0*vec2((corner_id % 2), (corner_id / 2)) - vec2(1.0, 1.0);
		p.texCoords = trans;
		dir = normalize(normalize(eyeVec) + trans.x*sideVec + trans.y*vel);

		pos = position0.xyz + trans.x*(sideVec *width) + trans.y*(vel * height);
	}
	p.strength = fade;
	float distM=length(position0.xyz); 
	p.strength *= saturate((distM-minDistanceM)/0.05);
	p.position	=mul(worldViewProj[1], vec4(pos, 1.0));
	p.clip_pos	=p.position;
	p.dir		=dir;
#if 0
	//p.view		=normalize(pos);
	p.dir		=0;//dir;// g_texcoords[corner_id] * 2.0 - vec2(1.0, 1.0);
				   //p.view		=vel;
	if(in_depth_space.x>0&&in_depth_space.y>0&&in_depth_space.x<1.0&&in_depth_space.y<1.0&&in_depth_space.z>0.0&&in_depth_space.z<1.0)
	{
		p.dir=saturate(in_depth_space.xyz);
		if(in_depth_space.z>depth)
			p.type=44;
	}
	else
		p.type=44;
#endif
	//p.dir=depth;
	return p;
}


vec4 PSSnowParticles(ParticleGeometryOutput IN,bool reverseDepth)
{
	vec4 clip_pos		=IN.clip_pos/IN.clip_pos.w;
	vec2 screen_texc	=vec2(0.5*(clip_pos.x+1.0),0.5*(1.0-clip_pos.y));
	vec2 depth_texc		=viewportCoordToTexRegionCoord(screen_texc,viewportToTexRegionScaleBias);
	float solid_depth	=texture_clamp(depthTexture,depth_texc.xy).x;
	float render_depth	=clip_pos.z;
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.reverseDepth=reverseDepth;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistTexture;
	float solid_dist	=depthToFadeDistance(solid_depth,clip_pos.xy,depthInterpretationStruct,tanHalfFov);
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistRain;
	float rain_dist		=depthToFadeDistance(render_depth,clip_pos.xy,depthInterpretationStruct,tanHalfFov);
	
	if(IN.strength<=0||rain_dist>solid_dist)
	{
		discard;
	}

	vec4 result				=cubeTexture.SampleLevel(wrapSamplerState,mul(cubemapTransform,vec4(IN.dir,0)).xyz,4);
	vec2 pos				=IN.texCoords.xy;
	float cos0				=dot(IN.dir,lightDir);
	float BetaMie			=HenyeyGreenstein(0.5,cos0);
	vec3 directionalLight	=BetaMie*lightColour.rgb;
	result.rgb				+=directionalLight.rgb;
	float radius1			=pow(length(pos.xy),.5);
	float angle				=atan2(pos.x,pos.y);
//	float spoke			=fract(angle/SIMUL_PI_F*3.0)-0.5;
	float opacity			=IN.strength*saturate(1.0-radius1);//-spoke*spoke);
	return vec4(result.rgb,opacity);
}


shader vec4 PS_SnowParticles(ParticleGeometryOutput IN): SV_TARGET
{
	return PSSnowParticles(IN,true);
}

shader vec4 PS_SnowParticles_NoCubemap(ParticleGeometryOutput IN): SV_TARGET
{
	float cos0				=dot(IN.dir,lightDir);
	float BetaMie			=HenyeyGreenstein(0.5,cos0);
	vec3 directionalLight	=BetaMie*lightColour.rgb;
	vec4 result				=vec4(directionalLight.rgb,1.0);
	vec2 pos				=IN.dir.xy*2.0-1.0;
	float radius1			=length(pos.xy);
	float angle				=atan2(pos.x,pos.y);
	//float spoke			=fract(angle/SIMUL_PI_F*3.0)-0.5;
	float opacity			=IN.strength*saturate(1.0-radius1);//-spoke*spoke);
	
	//return vec4(1,0,1,opacity);
	return vec4(result.rgb,opacity);
}

shader ParticleGeometryOutput VS_RainParticles(uint vertex_id : SV_VertexID)
 {    
	uint particle_id = vertex_id / 6;
	uint vertex_index = vertex_id - (particle_id * 6);
	ParticleGeometryOutput p;
#if 1
	uint4 state = uint4(163 + particle_id % 71, 83117 + particle_id / 51, 195 + particle_id / 1001, 9019 + particle_id % 507);
	RandomResult r1 = Random(state);
	RandomResult r2 = Random(r1.state);
	RandomResult r3 = Random(r2.state);
	RandomResult r4 = Random(r3.state);
	vec3 p_pos = 2.0*vec3(r4.value, r2.value, r3.value);
	p_pos -= vec3(1.0, 1.0, 1.0);
	p.type				=particle_id%uint(32);
#else
	vec3 p_pos			=particlePos[particle_id].xyz;
	p.type				=int(particlePos[particle_id].w);
#endif
	vec3 position		=vec3(p_pos)*particleZoneSize;
	vec3 position0		=position - offset[0].xyz;
	position0			=WrapParticleZone(position0, particleZoneSize/2);

	
	vec3 map_texc		=mul(rainMapMatrix,vec4(viewPos[1].xyz,1.0)).xyz;
	float mapped_rain	=texture_wrap_lod(rainMapTexture,map_texc.xy,0).x;

	// discard if under surface.
	vec3 in_depth_space	=0.5*mul(rainDepthTransform,vec4(position0.xyz+viewPos[1].xyz,1.0)).xyz+vec3(0.5,0.5,0);
	float depth			=texture_clamp_lod(rainDepthTexture,vec2(in_depth_space.x,1.0-in_depth_space.y),0).x*rainDepthTextureScale;

	int maxtype			=int(16.0*mapped_rain);
	p.type				=p.type%maxtype;
	p.strength			=saturate(4.0*mapped_rain);
	if(in_depth_space.x>0&&in_depth_space.y>0&&in_depth_space.x<1.0&&in_depth_space.y<1.0&&depth>in_depth_space.z)
	{
	//	p.type=44;
	}

	vec4 clip_pos = mul(worldViewProj[1], vec4(position0.xyz, 1.0));
	////if (p.type <= 0 || clip_pos.z < 0)
	//	discard;
	
		float g_FrameRate		=20.0;
	vec3 pos;
	
	vec3 vel	=(viewPositionOffset.xyz);
	float fade = p.strength;
	float w = particleWidth;
//	if (p.type == 44)
//		w *= 10.0;
	vec3 dir;
	uint corner_id = (vertex_index + (vertex_index == 2) - 1 * (vertex_index > 2)) % 4;
	
	{
		vec3 eyeVec = normalize(-position0.xyz);
		float width = w*fade;
		vec3 v1 = cross(eyeVec, vec3(0, 0, 1));
		vec3 v2 = cross(eyeVec, vec3(0, 1, 0));
		vel = vel+0.001*max(v1,v2);
		float height = w + length(vel);	// g_SpriteSize/2.0;
		float dist = length(position0.xyz);
		fade *= max(.05, saturate(2.0 * width / height));
	
		float pixelSize = width*500.0 / dist;
		if (pixelSize < 1.0)
		{
			width *= 1.0 / pixelSize;
			fade *= pixelSize / 1.0;
		}
		vel = normalize(vel);
		vec3 eyeOnVelVecPlane = -((dot(eyeVec, vel)) * vel);
		vec3 projectedVelVec = normalize(vel - eyeOnVelVecPlane);// -position0.xyz;
		vec3 sideVec = normalize(cross(projectedVelVec, eyeVec));

		vec2 trans = 2.0*vec2((corner_id % 2), (corner_id / 2)) - vec2(1.0, 1.0);
		p.texCoords = trans;
		dir = normalize(normalize(eyeVec) + trans.x*sideVec + trans.y*vel);

		pos = position0.xyz + trans.x*(sideVec *width) + trans.y*(vel * height);
	}
	p.strength = fade;
	float distM=length(position0.xyz); 
	p.strength *= saturate((distM-minDistanceM)/0.05);
	p.position	=mul(worldViewProj[1], vec4(pos, 1.0));
	p.clip_pos = p.position;
	p.dir		=dir;
#if 0
	//p.view		=normalize(pos);
	p.dir		=0;//dir;// g_texcoords[corner_id] * 2.0 - vec2(1.0, 1.0);
	//p.view		=vel;
	if(in_depth_space.x>0&&in_depth_space.y>0&&in_depth_space.x<1.0&&in_depth_space.y<1.0&&in_depth_space.z>0.0&&in_depth_space.z<1.0)
	{
		p.dir=saturate(in_depth_space.xyz);
		if(in_depth_space.z>depth)
			p.type=44;
	}
	else
		p.type=44;
#endif
	//p.dir=depth;
    return p;
}

#define MAX_VIDX 4
#define MAX_HIDX 8

SamplerState samAniso
{
    Filter = ANISOTROPIC;
    AddressU = Clamp;
    AddressV = Wrap;
};

vec4 PSRainParticles(ParticleGeometryOutput IN, bool reverseDepth,vec3 light)
{
	vec4 clip_pos		=IN.clip_pos/IN.clip_pos.w;
	vec2 nxy			=IN.dir.xy;
	float r				=length(IN.texCoords.xy);
	vec3 n				=vec3(nxy,sqrt(1.0-r*r));
	if(r>1.0)
		discard;
	float vis			=saturate(100.0*(1.0 - r));// *texel.a;//
	vec2 screen_texc	=vec2(0.5*(clip_pos.x+1.0),0.5*(1.0-clip_pos.y));
	vec2 depth_texc		=viewportCoordToTexRegionCoord(screen_texc,viewportToTexRegionScaleBias);
	float solid_depth	=texture_clamp(depthTexture,depth_texc.xy).x;
	float render_depth	=clip_pos.z;
	DepthInterpretationStruct depthInterpretationStruct;
	depthInterpretationStruct.reverseDepth=reverseDepth;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistTexture;
	float solid_dist	=depthToFadeDistance(solid_depth,clip_pos.xy,depthInterpretationStruct,tanHalfFov);
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistRain;
	float rain_dist		=depthToFadeDistance(render_depth,clip_pos.xy,depthInterpretationStruct,tanHalfFov);
	
	float mapped_rain	=IN.strength;
	vis					=mapped_rain;//=saturate(vis*mapped_rain);
	vec3 normal			=mul(worldView[1],vec4(n,0.0)).xyz;
	float fresnel		=r;
	vec4 result			=vec4(light,1.0-lerp(0.0,vis,fresnel));

	//result.rg			= nxy;
	//result.a = .5;// vec4(IN.view, 0.5);
	if(rain_dist>solid_dist-splashDelta)
	{
	//	result.rgb		*=10.0;//vec3(1,1,1);
	}
	if(IN.type==44)
	{
	//	result.gb=0;
		discard;
	}
	if(mapped_rain<=0||rain_dist>solid_dist)
	{
	//return vec4(10000,1,1,1);
		discard;
	}
	//return vec4(IN.dir,0.5);
	//return saturate(vec4(rain_dist*30000.0,0,solid_dist*30000.0,1.0));
	
	return result;
}

vec4 PSRainParticles(ParticleGeometryOutput IN, bool reverseDepth)
{
	vec3 light = cubeTexture.SampleLevel(wrapSamplerState, mul(cubemapTransform, vec4(-IN.dir.xyz, 0)).xyz,0).rgb;
	//c.rgb *= exposure;  instead we apply this in the cubemap.
	//light = pow(light, vec3(gamma, gamma, gamma));
	return PSRainParticles(IN, reverseDepth, light);
}

vec4 PS_RainParticles(ParticleGeometryOutput IN,bool reverseDepth)
{
	return PSRainParticles(IN,reverseDepth);
}

shader vec4 PS_RainParticles_ReverseDepth(ParticleGeometryOutput IN) : SV_Target
{
	return PS_RainParticles(IN,true);
}

shader vec4 PS_RainParticles_ForwardDepth(ParticleGeometryOutput IN) : SV_Target
{
	return PS_RainParticles(IN,false);
}

vec4 PS_RainParticles_NoCubemap(ParticleGeometryOutput IN,bool reverseDepth) 
{
	vec3 light				=lightColour.rgb;
	return PSRainParticles(IN,reverseDepth,light);
}

shader vec4 PS_RainParticles_NoCubemap_ReverseDepth(ParticleGeometryOutput IN) : SV_Target
{
	return PS_RainParticles_NoCubemap(IN,true);
}

shader vec4 PS_RainParticles_NoCubemap_ForwardDepth(ParticleGeometryOutput IN) : SV_Target
{
	return PS_RainParticles_NoCubemap(IN,false);
}

BlendState AddAlphaBlendNoAlphaWrite
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=SRC_ALPHA;
	DestBlend		=ONE;
	RenderTargetWriteMask[0]=7;
	RenderTargetWriteMask[1]=7;
};


BlendState AlphaBlendNoAlphaWrite
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=INV_SRC_ALPHA;
	DestBlend		=SRC_ALPHA;
	SrcBlendAlpha		=ONE;
	DestBlendAlpha		=ZERO;
	RenderTargetWriteMask[0]=7;
	RenderTargetWriteMask[1]=7;
};

technique rain_particles
{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
        SetVertexShader(CompileShader(   vs_5_0,VS_RainParticles()));
			SetPixelShader(CompileShader(    ps_5_0,PS_RainParticles_ReverseDepth()));
        
			SetBlendState( AlphaBlendNoAlphaWrite, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );//DontBlend
        SetDepthStencilState( DisableDepth, 0 );
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
        SetVertexShader(CompileShader(   vs_5_0,VS_RainParticles()));
			SetPixelShader(CompileShader(    ps_5_0,PS_RainParticles_ForwardDepth()));
        
			SetBlendState( AlphaBlendNoAlphaWrite, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );//
        SetDepthStencilState( DisableDepth, 0 );
		}
	}
technique rain_particles_no_cubemap
	{
		pass reverse_depth
		{
			SetRasterizerState( RenderNoCull );
        SetVertexShader(CompileShader(   vs_5_0,VS_RainParticles()));
			SetPixelShader(CompileShader(    ps_5_0,PS_RainParticles_NoCubemap_ReverseDepth()));
        
			SetBlendState( AlphaBlendNoAlphaWrite, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );//
        SetDepthStencilState( DisableDepth, 0 );
		}
		pass forward_depth
		{
			SetRasterizerState( RenderNoCull );
        SetVertexShader(CompileShader(   vs_5_0,VS_RainParticles()));
			SetPixelShader(CompileShader(    ps_5_0,PS_RainParticles_NoCubemap_ForwardDepth()));
        
			SetBlendState( AlphaBlendNoAlphaWrite, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );//
        SetDepthStencilState( DisableDepth, 0 );
		}
	}
        
technique snow_particles
	{
		pass reverse_depth 
		{
			SetRasterizerState(RenderNoCull);
			//SetRasterizerState( wireframeRasterizer );
		SetVertexShader(CompileShader(vs_5_0,VS_SnowParticles()));
			SetPixelShader(CompileShader(ps_5_0,PS_SnowParticles()));
		SetDepthStencilState(DisableDepth,0);
			SetBlendState(AddAlphaBlendNoAlphaWrite,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		}
		pass forward_depth 
		{
			SetRasterizerState(RenderNoCull);
			//SetRasterizerState( wireframeRasterizer );
		SetVertexShader(CompileShader(vs_5_0,VS_SnowParticles()));
			SetPixelShader(CompileShader(ps_5_0,PS_SnowParticles()));
		SetDepthStencilState(DisableDepth,0);
			SetBlendState(AddAlphaBlendNoAlphaWrite,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		}
	}

technique snow_particles_no_cubemap
	{
		pass reverse_depth 
		{
			SetRasterizerState(RenderNoCull);
			//SetRasterizerState( wireframeRasterizer );
		SetVertexShader(CompileShader(vs_5_0,VS_SnowParticles()));
		SetPixelShader(CompileShader(ps_5_0,PS_SnowParticles_NoCubemap()));
		SetDepthStencilState(DisableDepth,0);
			SetBlendState(AddAlphaBlendNoAlphaWrite,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		}
		pass forward_depth 
		{
			SetRasterizerState(RenderNoCull);
			//SetRasterizerState( wireframeRasterizer );
		SetVertexShader(CompileShader(vs_5_0,VS_SnowParticles()));
			SetPixelShader(CompileShader(ps_5_0,PS_SnowParticles_NoCubemap()));
		SetDepthStencilState(DisableDepth,0);
			SetBlendState(AddAlphaBlendNoAlphaWrite,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		}
}
