#include "shader_platform.sl"
#include "../SL/common.sl"
#include "../SL/render_states.sl"
#include "../SL/mixed_resolution_constants.sl"
#include "../SL/depth.sl"
#include "../SL/colour_packing.sl"
#include "../SL/mixed_resolution.sl"
uniform TEXTURE2DMS_FLOAT4 sourceMSDepthTexture SIMUL_TEXTURE_REGISTER(0);
uniform TEXTURE2DMS_FLOAT4 sourceTextureMS SIMUL_TEXTURE_REGISTER(0);
uniform Texture2D sourceDepthTexture SIMUL_TEXTURE_REGISTER(1);
layout(rgba32f) uniform RW_TEXTURE2D_FLOAT4 target2DTexture SIMUL_RWTEXTURE_REGISTER(1);

shader vec4 PS_HalfscaleInitial_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 res	=HalfscaleInitial(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct,false);

	return res;
}

shader vec4 PS_HalfscaleInitial_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 res	=HalfscaleInitial(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct,false);

	return res;
}

shader vec4 PS_HalfscaleInitial_Split_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 res	=HalfscaleInitial(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct,true);

	return res;
}

shader vec4 PS_HalfscaleInitial_Split_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 res	=HalfscaleInitial(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct,true);

	return res;
}


shader vec4 PS_HalfscaleOnly_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 res	=HalfscaleOnly(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return res;
}

shader vec4 PS_HalfscaleOnly_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 res	=HalfscaleOnly(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return res;
}

shader vec4 PS_HalfscaleOnly_MSAA_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 u= HalfscaleOnly_MSAA(sourceMSDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return u;
}

shader vec4 PS_HalfscaleOnly_MSAA_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 u= HalfscaleOnly_MSAA(sourceMSDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return u;
}


shader vec4 PS_HalfscaleInitial_MSAA_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 u= HalfscaleInitial_MSAA(sourceMSDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return u;
}

shader vec4 PS_HalfscaleInitial_MSAA_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 u= HalfscaleInitial_MSAA(sourceMSDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return u;
}

shader vec4 PS_Halfscale_ReverseDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=true;
	vec4 res	=Halfscale(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return res;
}

shader vec4 PS_Halfscale_ForwardDepth(posTexVertexOutput IN):SV_Target
{
	int2 pos	=int2(IN.texCoords.xy*target_dims.xy);
	DepthIntepretationStruct depthInterpretationStruct;
	depthInterpretationStruct.depthToLinFadeDistParams=depthToLinFadeDistParams;
	depthInterpretationStruct.reverseDepth=false;
	vec4 res	=Halfscale(sourceDepthTexture,int2(source_dims),int2(source_offset),int2(cornerOffset),pos,depthInterpretationStruct);
	return res;
}

shader vec4 PS_ResolveDepth(posTexVertexOutput IN):SV_Target
{
	int2 hires_pos		=int2(vec2(source_dims)*IN.texCoords.xy);
	vec4 u				=TEXTURE_LOAD_MSAA(sourceMSDepthTexture,hires_pos,0).xxxx;
	return u;
	//return IMAGE_LOAD(sourceMSDepthTexture,hires_pos).x;
}

VertexShader vs_simple_fullscreen=CompileShader(vs_5_0,VS_SimpleFullscreen());

technique halfscale_initial
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_ForwardDepth()));
    }
}

technique halfscale_initial_split
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_Split_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_Split_ForwardDepth()));
    }
}

technique halfscale_only
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleOnly_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleOnly_ForwardDepth()));
    }
}

technique halfscale_only_msaa
{
    pass reverse_depth
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth,0);
		SetBlendState(DontBlend,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleOnly_MSAA_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth,0);
		SetBlendState(DontBlend,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleOnly_MSAA_ForwardDepth()));
    }
}

technique halfscale_initial_msaa
{
    pass reverse_depth
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth,0);
		SetBlendState(DontBlend,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_MSAA_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState(RenderNoCull);
		SetDepthStencilState(DisableDepth,0);
		SetBlendState(DontBlend,vec4(0.0,0.0,0.0,0.0),0xFFFFFFFF);
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_HalfscaleInitial_MSAA_ForwardDepth()));
    }
}

technique halfscale
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_Halfscale_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_Halfscale_ForwardDepth()));
    }
}

technique resolve_depth
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend, vec4( 0.0, 0.0, 0.0, 0.0 ), 0xFFFFFFFF );
		SetVertexShader(vs_simple_fullscreen);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_5_0,PS_ResolveDepth()));
    }
}