#include "shader_platform.sl"
#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/simul_terrain_constants.sl"
#include "../../CrossPlatform/SL/states.sl"
#include "../../CrossPlatform/SL/cloud_shadow.sl"

uniform Texture2D cloudShadowTexture;
uniform Texture2DArray textureArray;
uniform Texture2D grassTexture;

struct vertexInput
{
    vec3 position		: POSITION;
    vec3 normal			: TEXCOORD0;
    vec2 texcoord		: TEXCOORD1;
    float offset		: TEXCOORD2;
};

struct vertexOutput
{
    vec4 hPosition		: SV_POSITION;
    vec4 normal			: TEXCOORD0;
    vec2 texcoord		: TEXCOORD1;
    vec4 wPosition		: TEXCOORD2;
};

shader vertexOutput VS_Main(vertexInput IN)
{
    vertexOutput OUT;
    OUT.hPosition	= mul(worldViewProj, vec4(IN.position.xyz,1.0));
    OUT.wPosition	=vec4(IN.position.xyz,1.0);
	OUT.texcoord	=vec2(IN.position.xy/2000.0);
    OUT.normal.xyz	=IN.normal;
    OUT.normal.a	=0.5;
    return OUT;
}
struct testOutput
{
    vec4 hPosition		: SV_POSITION;
    vec2 texCoords		: TEXCOORD0;
};
shader testOutput VS_TestAlphaToCoverage(idOnly IN)
{
	testOutput OUT;
	vec2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
    OUT.hPosition	=mul(worldViewProj,vec4(1000.0*pos.x,0.0,1500+1000.0*pos.y,1.0));
	OUT.texCoords	=0.5*(vec2(1.0,1.0)+vec2(pos.x,pos.y));
	return OUT;
}

shader vec4 PS_TestAlphaToCoverage(testOutput IN): SV_TARGET
{
	vec4 texColor	=texture_wrap(grassTexture,IN.texCoords);

    // clip will kill the pixel if argument is negative.  We clip if alpha too small.
    //clip(texColor.a - .5);
	//texColor.a		=texColor.a*0.5;
	return texColor;
}

shader vec4 PS_Main( vertexOutput IN) : SV_TARGET
{
	vec4 result;
	vec4 layer1	=texture_wwc(textureArray,vec3(IN.texcoord,0.0));
	vec4 layer2	=texture_wwc(textureArray,vec3(IN.texcoord,1.0));
	vec4 texel	=mix(layer1,layer2,clamp(1.0-IN.wPosition.z/100.0,0.0,1.0));
	vec3 light	=lightDir.zzz;
	
	float from_lightning_centre_km	=0.001*length(IN.wPosition.xy-lightningCentre.xy);
	vec3 lightning					=20*lightningColour.rgb*saturate(1.0/pow(from_lightning_centre_km+.0001,2.0));
	
//	light		*=GetSimpleIlluminationAt(cloudShadowTexture,invShadowMatrix,IN.wPosition.xyz).x;
	result.rgb	=texel.rgb*(ambientColour.rgb+light.rgb*sunlight.rgb+lightning.rgb);
	result.a	=1.0;
	
	//result=vec4(.5,.5,0,1);
//result.rgb=frac(mul(invShadowMatrix,vec4(IN.wPosition.xyz,1.0)).xyy);
    return result;
}

technique terrain
{
    pass base 
    {
		SetRasterizerState(RenderFrontfaceCull);
		//SetDepthStencilState(EnableDepth,0);
		SetBlendState(DontBlend,vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_Main()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Main()));
    }
}

technique test_alpha_to_coverage
{
    pass base 
    {
		SetRasterizerState(RenderNoCull);
		//SetDepthStencilState(EnableDepth,0);
		SetBlendState(AlphaToCoverageBlend,vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_TestAlphaToCoverage()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_TestAlphaToCoverage()));
    }
}
