#include "shader_platform.sl"
#include "../../CrossPlatform/SL/common.sl"
#define pi (3.1415926536f)

Texture2D backgroundTexture;
TextureCube backgroundCubemap;
Texture2D inscTexture;
Texture2D skylTexture;
Texture2D lossTexture;
Texture2D depthTexture;
Texture2D illuminationTexture;
SamplerState samplerState
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Mirror;
};

Texture2D flareTexture;
SamplerState flareSamplerState
{
	Filter = MIN_MAG_MIP_LINEAR;
	AddressU = Clamp;
	AddressV = Clamp;
};

Texture3D fadeTexture1;
Texture3D fadeTexture2;
Texture3D sourceTexture;
RWTexture2D<vec4> targetTexture;
Texture2D lightTable2DTexture;

SIMUL_CONSTANT_BUFFER(cbPerObject,11)
	vec4 rect;
SIMUL_CONSTANT_BUFFER_END

#include "../../CrossPlatform/SL/render_states.sl"
#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/earth_shadow_uniforms.sl"
#include "../../CrossPlatform/SL/earth_shadow.sl"
#include "../../CrossPlatform/SL/sky_constants.sl"
#include "../../CrossPlatform/SL/illumination.sl"
#include "../../CrossPlatform/SL/sky.sl"
#include "../../CrossPlatform/SL/depth.sl"

RWStructuredBuffer<LightingQueryResult> lightingQueryResults;
StructuredBuffer<vec3> lightingQueryInputs;

[numthreads(1,1,1)]
shader void CS_LightingQueries(uint3 sub_pos: SV_DispatchThreadID )
{
	uint num=0;
	uint byteStride=0;
	lightingQueryInputs.GetDimensions(num,byteStride);
	if(sub_pos.x>=num)
		return;
	LightingQueryResult res;
	res.pos=lightingQueryInputs[sub_pos.x];
	float alt_texc			=res.pos.z/1000.0/maxFadeAltitudeKm;
	vec3 combined			=texture_clamp_lod(lightTable2DTexture,vec2(alt_texc,3.5/4.0),0).rgb;
	res.ambient			=texture_clamp_lod(lightTable2DTexture,vec2(alt_texc,2.5/4.0),0).rgb;
	res.sunlight			=texture_clamp_lod(lightTable2DTexture,vec2(alt_texc,0.5/4.0),0).rgb;
	res.moonlight			=texture_clamp_lod(lightTable2DTexture,vec2(alt_texc,1.5/4.0),0).rgb;
	res.valid				=1;
	lightingQueryResults[sub_pos.x]=res;
}

struct vertexInput
{
    vec3 position			: POSITION;
};

struct posDirVertexOutput
{
    vec4 hPosition		: SV_POSITION;
    vec3 wDirection		: TEXCOORD0;
};

struct vertexInput3Dto2D
{
    vec3 position		: POSITION;
    vec2 texCoords		: TEXCOORD0;
};

//------------------------------------
// Vertex Shader 
//------------------------------------
shader posDirVertexOutput VS_Main(vertexInput IN) 
{
    posDirVertexOutput OUT;
    OUT.hPosition	=mul(worldViewProj,vec4(IN.position.xyz,1.0));
    OUT.wDirection	=normalize(IN.position.xyz);
    return OUT;
}

shader posDirVertexOutput VS_Cubemap(vertexInput IN) 
{
    posDirVertexOutput OUT;
	// World matrix would be identity.
    OUT.hPosition	=vec4(IN.position.xyz,1.0);
    OUT.wDirection	=normalize(IN.position.xyz);
    return OUT;
}

vec3 InscatterFunction(vec4 inscatter_factor,float cos0)
{
	float BetaRayleigh	=CalcRayleighBeta(cos0);
	float BetaMie		=HenyeyGreenstein(hazeEccentricity,cos0);		// Mie's phase function
	vec3 BetaTotal		=(BetaRayleigh+BetaMie*inscatter_factor.a*mieRayleighRatio.xyz)
		/(vec3(1,1,1)+inscatter_factor.a*mieRayleighRatio.xyz);
	vec3 result			=BetaTotal*inscatter_factor.rgb;
	return result;
}

shader vec4 PS_IlluminationBuffer(posTexVertexOutput IN): SV_TARGET
{
	float alt_km		=eyePosition.z/1000.0;
	return IlluminationBuffer(alt_km,IN.texCoords,targetTextureSize,maxFadeDistanceKm
			,maxFadeDistance,terminatorDistance,radiusOnCylinder,earthShadowNormal,sunDir);
}

vec4 PS_BackgroundLatLongSphere(posTexVertexOutput IN,bool reverseDepth)
{
	float depth			=texture(depthTexture,IN.texCoords.xy).x;
	if(reverseDepth)
	{
		if(depth!=0.0)
			discard;
	}
	else
	{
		if(depth<1.0)
			discard;
	}
	return BackgroundLatLongSphere(backgroundTexture,IN.texCoords.xy);
}

shader vec4 PS_Background_ReverseDepth(posTexVertexOutput IN): SV_TARGET
{
	return PS_BackgroundLatLongSphere(IN,true);
}

shader vec4 PS_Background_ForwardDepth(posTexVertexOutput IN): SV_TARGET
{
	return PS_BackgroundLatLongSphere(IN,false);
}

shader posTexVertexOutput VS_Fade3DTo2D(idOnly IN) 
{
    posTexVertexOutput OUT;
	vec2 poss[4]=
	{
		{ 1.0, 0.0},
		{ 1.0, 1.0},
		{ 0.0, 0.0},
		{ 0.0, 1.0},
	};
	vec2 pos		=poss[IN.vertex_id];
	OUT.hPosition	=vec4(vec2(-1.0,-1.0)+2.0*pos,0.0,1.0);
	// Set to far plane so can use depth test as we want this geometry effectively at infinity

	OUT.hPosition.z	=OUT.hPosition.w; 
    OUT.texCoords	=pos;
    return OUT;
}

shader posTexVertexOutput VS_ShowFade(idOnly IN) 
{
	return VS_ScreenQuad(IN,rect);
}

shader vec4 PS_Fade3DTo2D(posTexVertexOutput IN): SV_TARGET
{
	vec3 texc=vec3(altitudeTexCoord,1.0-IN.texCoords.y,IN.texCoords.x);
	vec4 colour1=fadeTexture1.Sample(cmcSamplerState,texc);
	vec4 colour2=fadeTexture2.Sample(cmcSamplerState,texc);
	vec4 result=lerp(colour1,colour2,skyInterp);
    return result;
}
shader vec4 PS_ShowFadeCrossSection(posTexVertexOutput IN): SV_TARGET
{
	vec3 texc=vec3(altitudeTexCoord,IN.texCoords.y,IN.texCoords.x);
	vec4 colour1=fadeTexture1.Sample(cmcSamplerState,texc);
	vec4 colour2=fadeTexture2.Sample(cmcSamplerState,texc);
	vec4 result=lerp(colour1,colour2,skyInterp);
    return result;
}

shader vec4 PS_ShowFadeTable(posTexVertexOutput IN): SV_TARGET
{
	vec4 result=inscTexture.Sample(cmcSamplerState,IN.texCoords.xy);
	result.rb+=overlayAlpha*result.a;
    return vec4(result.rgb,1);
}

shader vec4 PS_Colour(posTexVertexOutput IN): SV_TARGET
{
    return colour;
}

shader vec4 PS_ShowIlluminationBuffer(posTexVertexOutput IN): SV_TARGET
{
	return ShowIlluminationBuffer(inscTexture,IN.texCoords);
}

shader vec4 PS_ShowFadeTexture(posTexVertexOutput IN): SV_TARGET
{
	vec4 result=fadeTexture1.Sample(cmcSamplerState,vec3(altitudeTexCoord,IN.texCoords.yx));
    return vec4(result.rgb,1);
}

shader vec4 PS_Show3DLightTable(posTexVertexOutput IN): SV_TARGET
{
	vec4 result=fadeTexture1.Sample(samplerStateNearest,vec3(IN.texCoords.y,(float(cycled_index)+.5)/3.0,IN.texCoords.x));
    return vec4(result.rgb,1);
}

shader vec4 PS_Show2DLightTable(posTexVertexOutput IN): SV_TARGET
{
	vec2 texc	=vec2(1.00-IN.texCoords.y,IN.texCoords.x);
	vec4 result	=texture_nearest_lod(lightTable2DTexture,texc,0);
    return vec4(result.rgb,1);
}

[numthreads(1,1,1)]
shader void CS_InterpLightTable(uint3 g : SV_GroupID, uint3 t : SV_GroupThreadID)
{
	uint2 dims;
	targetTexture.GetDimensions(dims.x, dims.y);
	uint3 pos = g  + t;
	if(pos.x>=dims.x||pos.y>=dims.y)
		return;
	float alt_texc_x	=float(pos.x)/float(dims.x);
	float which_texc = (float(pos.y) + 0.5) / float(dims.y);
	vec3 texc_3a		=vec3(alt_texc_x,(float( cycled_index  )   +0.5)/3.0,which_texc);
	vec3 texc_3b		=vec3(alt_texc_x,(float((cycled_index+1)%3)+0.5)/3.0,which_texc);
	vec4 colour1		=texture_nearest_lod(sourceTexture,texc_3a,0);
	vec4 colour2		=texture_nearest_lod(sourceTexture,texc_3b,0);
	vec4 clr			=lerp(colour1,colour2,skyInterp);
	// Apply earth shadow to sunlight.
	//colour				*=saturate(alt_texc_x-illumination_alt_texc);
	targetTexture[pos.xy]	=clr;
}

struct indexVertexInput
{
	uint vertex_id			: SV_VertexID;
};

struct svertexOutput
{
    vec4 hPosition		: SV_POSITION;
	vec2 tex			: TEXCOORD0;
	vec2 depthTexc		: TEXCOORD1;
};

struct starsVertexOutput
{
    vec4 hPosition		: SV_POSITION;
    float tex			: TEXCOORD0;
	vec2 depthTexc		: TEXCOORD1;
};

svertexOutput VS_Sun(indexVertexInput IN) 
{
    svertexOutput OUT;
	vec2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	vec3 pos=vec3(poss[IN.vertex_id],1.0/(tan(radiusRadians)*glowRadiusMultiple));
    OUT.hPosition=mul(worldViewProj,vec4(pos,1.0));
	// Set to far plane so can use depth test as want this geometry effectively at infinity
	
	OUT.hPosition.z = isForwardDepth*OUT.hPosition.w; 
	OUT.tex = pos.xy*glowRadiusMultiple;
	OUT.depthTexc = OUT.hPosition.xy / OUT.hPosition.w;
	OUT.depthTexc.y *= -1.0;
	OUT.depthTexc = 0.5*(OUT.depthTexc + vec2(1.0, 1.0));
    return OUT;
}

struct starsVertexInput
{
    vec3 position			: POSITION;
    float tex				: TEXCOORD0;
};

shader starsVertexOutput VS_Stars(starsVertexInput IN) 
{
    starsVertexOutput OUT;
    OUT.hPosition	=mul(worldViewProj,vec4(IN.position.xyz,1.0));

	OUT.depthTexc = OUT.hPosition.xy / OUT.hPosition.w;
	OUT.depthTexc.y *= -1.0;
	OUT.depthTexc = 0.5*(OUT.depthTexc + vec2(1.0, 1.0));
	// Set to far plane so can use depth test as want this geometry effectively at infinity

	OUT.hPosition.z = isForwardDepth*OUT.hPosition.w; 

    OUT.tex=IN.tex;
    return OUT;
}

shader vec4 PS_Stars(starsVertexOutput IN) : SV_TARGET
{
	vec3 colour = vec3(1.0, 1.0, 1.0)*(starBrightness*IN.tex);
	return vec4(colour, 1.0);
}

vec4 PS_StarsDepthTex(starsVertexOutput IN,bool reverseDepth) 
{
	vec2 depth_texc	= viewportCoordToTexRegionCoord(IN.depthTexc.xy, viewportToTexRegionScaleBias);
	float depth		= texture_clamp_lod(depthTexture, IN.depthTexc.xy, 0).x;
	discardUnlessFar(depth,reverseDepth);
	vec3 colour=vec3(1.0,1.0,1.0)*(starBrightness*IN.tex);
	return vec4(colour,1.0);
}
shader vec4 PS_Stars_ReverseDepth(starsVertexOutput IN) : SV_TARGET
{
	return PS_StarsDepthTex(IN,true);
}
shader vec4 PS_Stars_ForwardDepth(starsVertexOutput IN) : SV_TARGET
{
	return PS_StarsDepthTex(IN,false);
}

//br at glowRadiusMultiple= 0.01.
// so br = a/(r^2)
//   0.01  = 1.0 / (grm^2)
// grm ^2 = 100.0
// grm = 10
// Sun could be overbright. So the colour is in the range [0,1], and a brightness factor is
// stored in the alpha channel.
shader vec4 PS_Sun( svertexOutput IN): SV_TARGET
{
	float r				=length(IN.tex);
	if(r>glowRadiusMultiple)
		discard;
	float brightness	=step(r,1.0)*colour.a;
//	brightness			*=0;//1.0/pow(saturate(r),4.0);
	brightness			=max(brightness,min(10.0,10.0/(r*r)-10.0/(glowRadiusMultiple*glowRadiusMultiple)));
	vec3 result			=brightness*colour.rgb;
	return vec4(result,1.0);
}

vec4 PS_SunDepthTexture(svertexOutput IN,bool reverseDepth)
{
	vec2 depth_texc = viewportCoordToTexRegionCoord(IN.depthTexc.xy, viewportToTexRegionScaleBias);
	float depth = texture_clamp_lod(depthTexture, IN.depthTexc.xy, 0).x;
	discardUnlessFar(depth,reverseDepth);
	float r = length(IN.tex);
	if (r>glowRadiusMultiple)
		discard;
	float brightness = step(r, 1.0)*colour.a;
	brightness *= 1.0 / pow(saturate(r), 4.0);//();//colour.a/pow(r,4.0);//+colour.a*saturate((0.9-r)/0.1);
	vec3 result = brightness*colour.rgb;
	result.rgb = depth;
	return vec4(result, 1.f);
}
shader vec4 PS_Sun_ReverseDepth(svertexOutput IN) : SV_TARGET
{
	return PS_SunDepthTexture(IN,true);
}
shader vec4 PS_Sun_ForwardDepth(svertexOutput IN) : SV_TARGET
{
	return PS_SunDepthTexture(IN,false);
}



shader vec4 PS_SunGaussian( svertexOutput IN): SV_TARGET
{
	float r=4.0*length(IN.tex);
	if(r>4.0)
		discard;
	float brightness=1.0;
	if(r>1.0)
		discard;
		//brightness=1.0/pow(r,4.0);//();//colour.a/pow(r,4.0);//+colour.a*saturate((0.9-r)/0.1);
	vec3 result=brightness*colour.rgb*colour.a;
	return vec4(result,1.f);
}

shader vec4 PS_SunQuery( svertexOutput IN): SV_TARGET
{
	float r=2.0*length(IN.tex);
	if(r>1.0)
		discard;
	return vec4(0.0,1.0,0.0,1.0);
}

shader vec4 PS_Flare( svertexOutput IN): SV_TARGET
{
	vec3 output=colour.rgb*flareTexture.Sample(flareSamplerState,vec2(.5f,.5f)+0.5f*IN.tex).rgb;

	return vec4(output,1.f);
}

vec4 Planet(vec4 result,vec2 tex)
{
	// IN.tex is +- 1.
	vec3 normal;
	normal.x=tex.x;
	normal.y=tex.y;
	float l=length(tex);
	if(l>1.0)
		return vec4(0,0.0,0,0.0);
	//	discard;
	normal.z	=-sqrt(1.0-l*l);
	float light	=approx_oren_nayar(0.2,vec3(0,0,1.0),normal,lightDir.xyz);
	result.rgb	*=colour.rgb;
	result.rgb	*=light;
	result.a	*=saturate((0.97-l)/0.03);
	return result;
}

shader vec4 PS_Planet(svertexOutput IN): SV_TARGET
{
	vec4 result = flareTexture.Sample(flareSamplerState, vec2(.5f, .5f) - 0.5f*IN.tex);
	return Planet(result,IN.tex);
}

vec4 PS_Planet_DepthTexture(svertexOutput IN,bool reverseDepth)
{
	vec2 depth_texc = viewportCoordToTexRegionCoord(IN.depthTexc.xy, viewportToTexRegionScaleBias);
	float depth = texture_clamp(depthTexture, depth_texc).x;
	discardUnlessFar(depth,reverseDepth);
	vec4 result = flareTexture.Sample(flareSamplerState, vec2(.5f, .5f) - 0.5f*IN.tex);
	return Planet(result, IN.tex);
}
shader vec4 PS_Planet_ReverseDepth(svertexOutput IN) : SV_TARGET
{
	return PS_Planet_DepthTexture(IN,true);
}
shader vec4 PS_Planet_ForwardDepth(svertexOutput IN) : SV_TARGET
{
	return PS_Planet_DepthTexture(IN,false);
}

shader vec4 PS_PlanetUntextured(svertexOutput IN): SV_TARGET
{
	vec4 result = vec4(1.0, 1.0, 1.0, 1.0);
	return Planet(result,IN.tex);
}

vec4 PS_PlanetUntextured_DepthTexture(svertexOutput IN,bool reverseDepth)
{
	vec2 depth_texc = viewportCoordToTexRegionCoord(IN.depthTexc.xy, viewportToTexRegionScaleBias);
	discardUnlessFar(texture_clamp(depthTexture, depth_texc).x,reverseDepth);
	vec4 result = vec4(1.0, 1.0, 1.0, 1.0);
	return Planet(result, IN.tex);
}
shader vec4 PS_PlanetUntextured_ReverseDepth(svertexOutput IN) : SV_TARGET
{
	return PS_PlanetUntextured_DepthTexture(IN,true);
}
shader vec4 PS_PlanetUntextured_ForwardDepth(svertexOutput IN) : SV_TARGET
{
	return PS_PlanetUntextured_DepthTexture(IN,false);
}

VertexShader vs_fade3dto2d	=CompileShader(vs_4_0,VS_Fade3DTo2D());
VertexShader vs_showfade	=CompileShader(vs_4_0,VS_ShowFade());
VertexShader vs_stars		=CompileShader(vs_4_0,VS_Stars());
VertexShader vs_sun			=CompileShader(vs_4_0,VS_Sun());

technique show_fade_table
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowFadeTable()));
    }
}

technique show_illumination_buffer
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowIlluminationBuffer()));
    }
}

technique show_fade_texture
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowFadeTexture()));
    }
}

technique colour_technique
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Colour()));
    }
}

technique show_light_table
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Show3DLightTable()));
    }
}

technique show_2d_light_table
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Show2DLightTable()));
    }
}

technique fade_3d_to_2d
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_fade3dto2d);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Fade3DTo2D()));
    }
}

technique show_cross_section
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_showfade);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_ShowFadeCrossSection()));
    }
}

technique illumination_buffer
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(vs_fade3dto2d);
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_IlluminationBuffer()));
    }
}

technique stars
{
    pass depth_test
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_stars);
		SetPixelShader(CompileShader(ps_4_0, PS_Stars()));
		//SetDepthStencilState( TestDepth, 0 );
		SetBlendState(AddBlend, vec4(1.0f,1.0f,1.0f,1.0f), 0xFFFFFFFF );
	}
	pass reverse_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Stars()));
		SetPixelShader(CompileShader(ps_4_0, PS_Stars_ReverseDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend, vec4(1.0f, 1.0f, 1.0f, 1.0f), 0xFFFFFFFF);
	}
	pass forward_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Stars()));
		SetPixelShader(CompileShader(ps_4_0, PS_Stars_ForwardDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend, vec4(1.0f, 1.0f, 1.0f, 1.0f), 0xFFFFFFFF);
	}
}

technique sun
{
	pass depth_test
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0,PS_Sun()));
		SetBlendState(AddBlend,vec4(1.0f,1.0f,1.0f,1.0f), 0xFFFFFFFF );
	}
	pass reverse_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0, PS_Sun_ReverseDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend, vec4(1.0f, 1.0f, 1.0f, 1.0f), 0xFFFFFFFF);
	}
	pass forward_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0, PS_Sun_ForwardDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlend, vec4(1.0f, 1.0f, 1.0f, 1.0f), 0xFFFFFFFF);
	}
}
technique sun_gaussian
{
    pass depth_test
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0,PS_SunGaussian()));
		//SetDepthStencilState(TestDepth,0);
		SetBlendState(AddBlend,vec4(1.0f,1.0f,1.0f,1.0f), 0xFFFFFFFF );
    }
}

technique sun_query
{
    pass depth_test
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0,PS_SunQuery()));
		//SetDepthStencilState(TestDepth,0);
		SetBlendState(BlendWithoutWrite, vec4(1.0f, 1.0f, 1.0f, 1.0f), 0xFFFFFFFF);
    }
}

technique flare
{
    pass p0
    {
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0,PS_Flare()));
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
    }
}

technique planet
{
    pass depth_test
    {		
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0, PS_Planet()));
		//SetDepthStencilState(TestDepth,0);
		SetBlendState(AlphaBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
	}
	pass reverse_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Sun()));
		SetPixelShader(CompileShader(ps_4_0, PS_Planet_ReverseDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
	}
	pass forward_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Sun()));
		SetPixelShader(CompileShader(ps_4_0, PS_Planet_ForwardDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
	}
}

technique planet_untextured
{
	pass depth_test
    {		
		SetRasterizerState( RenderNoCull );
        SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0,PS_PlanetUntextured()));
		//SetDepthStencilState(TestDepth,0);
		SetBlendState(AlphaBlend,vec4(0.0f,0.0f,0.0f,0.0f),0xFFFFFFFF);
	}
	pass reverse_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0, PS_PlanetUntextured_ReverseDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
	}
	pass forward_depth
	{
		SetRasterizerState(RenderNoCull);
		SetGeometryShader(NULL);
		SetVertexShader(vs_sun);
		SetPixelShader(CompileShader(ps_4_0, PS_PlanetUntextured_ForwardDepth()));
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlend, vec4(0.0f, 0.0f, 0.0f, 0.0f), 0xFFFFFFFF);
	}
}

technique interp_light_table
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_InterpLightTable()));
    }
}


technique lighting_queries
{
    pass p0
    {
		SetComputeShader(CompileShader(cs_5_0,CS_LightingQueries()));
    }
}

technique background_latlongsphere
{
    pass reverse_depth
    {
		SetRasterizerState( RenderNoCull );
		//SetDepthStencilState( TestDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_SimpleFullscreen()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Background_ReverseDepth()));
    }
    pass forward_depth
    {
		SetRasterizerState( RenderNoCull );
		//SetDepthStencilState( TestDepth, 0 );
		SetBlendState(DontBlend,vec4(0.0f,0.0f,0.0f,0.0f), 0xFFFFFFFF );
		SetVertexShader(CompileShader(vs_4_0,VS_SimpleFullscreen()));
        SetGeometryShader(NULL);
		SetPixelShader(CompileShader(ps_4_0,PS_Background_ForwardDepth()));
    }
}