#include "CppGlsl.hs"
uniform sampler2D imageTexture;
uniform sampler2D coverageTexture;
uniform sampler2D lossTexture;
uniform sampler2D inscTexture;
uniform sampler2D skylTexture;
uniform sampler2D noiseTexture;
uniform sampler2D depthTexture;
uniform sampler2D illuminationTexture;

#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/earth_shadow_uniforms.sl"
#include "../../CrossPlatform/SL/depth.sl"

#include "../../CrossPlatform/SL/simul_2d_clouds.hs"
#include "../../CrossPlatform/SL/earth_shadow.sl"
#include "../../CrossPlatform/SL/earth_shadow_fade.sl"
#include "../../CrossPlatform/SL/simul_2d_clouds.sl"
#include "../../CrossPlatform/SL/simul_2d_cloud_detail.sl"

uniform vec4 rect;

float rand(vec2 co)
{
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

shader VS_FullScreen(out vec2 texCoords)
{
	vec2 poss[4];
	poss[0]		=vec2(1.0, 0.0);
	poss[1]		=vec2(1.0, 1.0);
	poss[2]		=vec2(0.0, 0.0);
	poss[3]		=vec2(0.0, 1.0);
	texCoords	=poss[gl_VertexID];
	gl_Position	=vec4(vec2(-1.0,-1.0)+2.0*texCoords.xy,1.0,1.0);
}

shader PS_Simple(in vec2 texCoords,out vec4 FragColour)
{
	FragColour=texture2D(imageTexture,texCoords);
}

shader PS_Coverage(in vec2 texCoords,out vec4 FragColour) 
{
	FragColour		=Coverage(texCoords,humidity,diffusivity,coverageOctaves,coveragePersistence,time,noiseTexture,noiseTextureScale);
}

shader PS_ShowDetailTexture(in vec2 texCoords,out vec4 FragColour) 
{
	FragColour		=ShowDetailTexture(imageTexture, texCoords, sunlight, lightResponse);
}

shader PS_Random(in vec2 texCoords,out vec4 FragColour) 
{
    vec4 c	=vec4(rand(texCoords),rand(1.7*texCoords),rand(0.11*texCoords),rand(513.1*texCoords));
    FragColour= fract(c);
}

shader PS_Detail(in vec2 texCoords,out vec4 FragColour) 
{
    FragColour= DetailDensity(texCoords,imageTexture,amplitude);
}

shader PS_DetailLighting(in vec2 texCoords,out vec4 FragColour) 
{
	FragColour=DetailLighting(texCoords,imageTexture);
}

shader VS_Clouds2D(in vec4 vertex,out vec2 texc_global,out vec2 texc_detail,out vec4 clip_pos,out vec3 wPosition)
{
	Clouds2DVS(vertex.xyz,mixedResTransformXYWH,gl_Position,clip_pos,wPosition);
}

shader PS_Clouds2D(in vec2 texc_global,in vec2 texc_detail,in vec3 wPosition,in vec4 clip_pos,out vec4 FragColour)
{
	vec2 viewportTexCoords=0.5*(vec2(1.0,1.0)+(clip_pos.xy/clip_pos.w));
	viewportTexCoords.y=1.0-viewportTexCoords.y;
	uint2 depthDims;
	uint depthSamples;
	vec2 depthTexCoords=viewportCoordToTexRegionCoord(viewportTexCoords.xy,viewportToTexRegionScaleBias);
	float dlookup=texture_clamp_lod(depthTexture,depthTexCoords,0);
#if REVERSE_DEPTH==1
	if(dlookup!=0)
		discard;
#else
	if(dlookup<0.999999)
		discard;
#endif
	vec2 wOffset=wPosition.xy-origin.xy;
	vec2 texc_global=wOffset/globalScale;
	vec2 texc_detail=wOffset/detailScale;
	vec3 wEyeToPos=wPosition-eyePosition;
#if USE_LIGHT_TABLES==1
	float alt_texc=wPosition.z/maxAltitudeMetres;
	vec3 sun_irr=texture_clamp_lod(lightTableTexture,vec2(alt_texc,0.5/3.0),0).rgb;
	vec3 moon_irr=texture_clamp_lod(lightTableTexture,vec2(alt_texc,1.5/3.0),0).rgb;
	vec3 ambient_light=texture_clamp_lod(lightTableTexture,vec2(alt_texc,2.5/3.0),0).rgb*lightResponse.w;
#else
	vec3 sun_irr=sunlight.rgb;
	vec3 moon_irr=moonlight.rgb;
	vec3 ambient_light=ambientLight.rgb;
#endif
	vec4 ret=Clouds2DPS_illum(imageTexture
		,coverageTexture
		,illuminationTexture
		,lossTexture
		,inscTexture
		,skylTexture
		,noiseTexture
		,texc_global,texc_detail
		,wEyeToPos
		,sun_irr
		,moon_irr
		,ambient_light.rgb
		,lightDir.xyz
		,lightResponse);
	ret.rgb*=exposure;
	FragColour=ret;
}

program coverage
{
   vs(430) =VS_FullScreen();
   fs(430) =PS_Coverage();
};

program simple
{
    vs(430) =VS_ScreenQuad();
	fs(430) =PS_Simple();
};

program show_detail_texture
{
    vs(430) =VS_ScreenQuad();
	fs(430)=PS_ShowDetailTexture();
};


program random
{
	vs(430) =VS_FullScreen();
	fs(430) =PS_Random();
};


program detail_density
{
	vs(430) =VS_FullScreen();
	fs(430) =PS_Detail();
};

program detail_lighting
{
	vs(430) =VS_FullScreen();
	fs(430) =PS_DetailLighting();
};

technique simul_clouds_2d
{
	pass p0
	{
		vs(430) = VS_Clouds2D();
		fs(430) = PS_Clouds2D();
	}
};