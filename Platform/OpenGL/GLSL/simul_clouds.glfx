#include "CppGlsl.hs"
#include "../../CrossPlatform/SL/simul_inscatter_fns.sl"
#include "../../CrossPlatform/SL/simul_cloud_constants.sl"
#include "../../CrossPlatform/SL/depth.sl"
#include "saturate.glsl"

uniform sampler3D cloudDensity1;
uniform sampler3D cloudDensity2;
uniform sampler2D noiseSampler;
uniform sampler2D lossSampler;
uniform sampler2D inscatterSampler;
uniform sampler2D skylightSampler;
uniform sampler2D illumSampler;
uniform sampler2D depthTexture;

#include "../../CrossPlatform/SL/simul_cloud_constants.sl"

uniform int layerNumber;

shader VS_Clouds(in vec3 vertex,out float layerDensity,
								out float rainFade,
								out vec4 texCoords,
								out vec2 noise_texc,
								out vec3 wPosition,
								out vec3 texCoordLightning,
								out vec2 fade_texc,
								out vec3 view,
								out vec4 transformed_pos
								)
{
	LayerData layer		=layers[layerIndex];//layerCount-1-layerNumber];
	vec3 pos			=vertex.xyz*layerDistance_;
//	pos.xyz				*=layer.layerDistance;
    wPosition			=pos.xyz;
    transformed_pos		=vec4(vertex.xyz,1.0)*worldViewProj;
    gl_Position			=transformed_pos;
	gl_Position.z		=gl_Position.w;
	layerDensity		=layer.layerFade;
	texCoordLightning	=(wPosition.xyz-lightningOrigin.xyz)*lightningInvScales.xyz;
	float depth			=length(pos)/maxFadeDistanceMetres;
	view				=normalize(pos);
	wPosition			=viewPos+pos;
	wPosition.z			-=layer.verticalShift;
	texCoords.xyz		=(wPosition-vec3(0,0,layer.verticalShift)-cornerPos)*inverseScales;
	texCoords.w			=clamp(texCoords.z,0.0,1.0);	// clamp?
	vec2 screen_pos		=transformed_pos.xy/transformed_pos.w;
	vec3 n				=vec3(screen_pos.xy*tanHalfFov,1.0);
	n					=normalize(n);
	vec2 noise_texc_0	=(noiseMatrix*vec4(n.xy,0.0,0.0)).xy;

	noise_texc			=noise_texc_0.xy*layerDistance_/fractalRepeatLength+noiseOffset_;

	float sine			=view.z;
	fade_texc			=vec2(sqrt(depth),0.5*(1.0-sine));
	rainFade			=1.0-exp(-layer.layerDistance/10000.0);
}

shader PS_Clouds(in float layerDensity,
				in float rainFade,
				in vec4 texCoords,
				in vec2 noise_texc,
				in vec3 wPosition,
				in vec3 texCoordLightning,
				in vec2 fade_texc,
				in vec3 view,
				in vec4 transformed_pos)
{
#if 0
	gl_FragColor=vec4(1,0,1,.5);
#else
//gl_FragColor=vec4(0.5,0.5,0.5,.5);
	vec3 half_vec			=vec3(0.5,0.5,0.5);//0.49803921568627452,0.49803921568627452,0.49803921568627452);
	float cos0				=dot(directionToSun.xyz,normalize(view.xyz));
#ifdef USE_DEPTH_TEXTURE	
	vec2 clip_pos			=transformed_pos.xy/transformed_pos.w;
	vec2 screenCoord		=screenCoordOffset+0.5*(clip_pos.xy)+vec2(0.5,0.5);
	float depth				=texture(depthTexture,screenCoord).x;
	float dist				=depthToFadeDistance(depth,clip_pos.xy,depthToLinFadeDistParams,tanHalfFov);
#endif
	float cloud_dist		=pow(fade_texc.x,2.0);
	vec4 texc				=texCoords;
#ifdef TILING_OFFSET
	vec2 tiling_offset		=texture(noiseSampler,texc.xy/64.0).xy;
	texc.xy					+=2.0*(tiling_offset.xy-noise_offset.xy);
#endif
	vec3 noiseval			=2.0*(textureLod(noiseSampler,noise_texc.xy,0).xyz-half_vec);
	noiseval				*=texc.w;
	vec3 pos				=texc.xyz+fractalScale*noiseval;
	vec4 density			=textureLod(cloudDensity1,pos,0);
	vec4 density2			=textureLod(cloudDensity2,pos,0);
	//vec4 lightning=texture(illumSampler,texCoordLightning.xyz);
	density					=mix(density,density2,cloud_interp);
	float opacity			=layerFade_*density.y;
	//opacity+=rain*rainFade*saturate((0.25-pos.z)*50.0)*(1.0-density.x);
#ifdef USE_DEPTH_TEXTURE
	//float depth_offset=dist-cloud_dist;
	//opacity*=saturate(depth_offset/0.01);
	if(opacity<=0.0)
		discard;
	if(dist<cloud_dist)
		discard;
#else
	if(opacity<=0.0)
		discard;
#endif
	float Beta					=lightResponse.x*HenyeyGreenstein(cloudEccentricity*density.z,cos0);
	vec3 sunlightColour			=mix(sunlightColour1,sunlightColour2,saturate(texCoords.z));
	vec3 final					=(density.z*Beta+lightResponse.y*density.w)*sunlightColour*earthshadowMultiplier+density.x*ambientColour.rgb;
	
	vec3 diff					=wPosition.xyz-lightningSourcePos;
	float dist_from_lightning	=length(diff.xyz);
	float cc					=dist_from_lightning/2000.0;
	float pwr					=exp(-cc*cc);
	final.rgb					+=lightningColour.rgb*pwr;

	vec3 loss_lookup			=texture(lossSampler,fade_texc).rgb;
	vec4 insc_lookup			=earthshadowMultiplier*texture(inscatterSampler,fade_texc);
	vec3 skyl_lookup			=texture(skylightSampler,fade_texc).rgb;

	final.rgb					*=loss_lookup;
	final.rgb					+=InscatterFunction(insc_lookup,hazeEccentricity,cos0,mieRayleighRatio);
	final.rgb					+=skyl_lookup;
	//final.rgb=vec3(cloud_dist,cloud_dist,cloud_dist);
    gl_FragColor				=vec4(final.rgb*opacity*exposure,1.0-opacity);
#endif
}

program simul_clouds
{
    vs(430)	=VS_Clouds();
    fs(430)	=PS_Clouds();
};