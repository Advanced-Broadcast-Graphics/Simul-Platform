#include "CppGlSl.hs"
#include "../../CrossPlatform/SL/noise.sl"
#include "../../CrossPlatform/SL/noise_constants.sl"

uniform sampler2D noise_texture ;
uniform sampler3D random_texture_3d;
uniform image3D targetTexture;

struct a2v
{
    vec4 position  : POSITION;
    vec2 texCoords  : TEXCOORD0;
};

struct v2f
{
    vec4 hPosition  : SV_POSITION;
    vec2 texCoords  : TEXCOORD0;
};

shader MainVS(in int vertex_id,out v2f OUT)
{
	vec2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	vec2 pos		=poss[vertex_id];
	OUT.hPosition	=vec4(pos,0.0,1.0);
    OUT.texCoords	=0.5*(vec2(1.0,1.0)+vec2(pos.x,pos.y));
}

shader RandomPS(in v2f IN,out vec4 FragColour)
{
	// Range from -1 to 1.
    vec4 c=2.0*vec4(rand(IN.texCoords),rand(1.7*IN.texCoords),rand(0.11*IN.texCoords),rand(513.1*IN.texCoords))-1.0;
    FragColour=c;
}

shader MainPS(in v2f IN,out vec4 FragColour) 
{
    FragColour= Noise(noise_texture,IN.texCoords,persistence,octaves);
}

layout(local_size_x=8,local_size_y=8,local_size_z=8) in;
shader CS_Random3D()	//gl_GlobalInvocationID gives the combined id in each dimension.
{
	uint3 pos=gl_GlobalInvocationID;
	uint3 dims;
	targetTexture.GetDimensions(dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec3 texCoords	=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	vec2 texc2		=texCoords.xy+dims.y*texCoords.z;
	// Range from -1 to 1.
    vec4 c=2.0*vec4(rand(texc2),rand(1.7*texc2),rand(0.11*texc2),rand(513.1*texc2))-vec4(1.0,1.0,1.0,1.0);
    targetTexture[pos]			= c;
}

void CS_Noise3D( )	//gl_GlobalInvocationID gives the combined id in each dimension.
{
	uint3 pos=gl_GlobalInvocationID;
	uint3 dims;
	targetTexture.GetDimensions(dims.x,dims.y,dims.z);
	if(pos.x>=dims.x||pos.y>=dims.y||pos.z>=dims.z)
		return;
	vec4 result		=vec4(0,0,0,0);
	vec3 texCoords	=(vec3(pos)+vec3(0.5,0.5,0.5))/vec3(dims);
	float mult		=0.5;
	float total		=0.0;
    for(int i=0;i<octaves;i++)
    {
		vec4 c		=texture_wrap_lod(random_texture_3d,texCoords,0);
		texCoords	*=2.0;
		total		+=mult;
		result		+=mult*c;
		mult		*=persistence;
    }
	// divide by total to get the range -1,1.
	result*=1.0/total;
	targetTexture[pos]			=result;
}

program simul_random
{
    vs(430) =MainVS();
	fs(430) =RandomPS();
}

program simul_noise_2d
{
	vs(430) =MainVS();
	fs(430) =MainPS();
}

program random_3d_compute
{
    cs(430) =CS_Random3D();
}

program noise_3d_compute
{
    cs(430) =CS_Noise3D();
}
