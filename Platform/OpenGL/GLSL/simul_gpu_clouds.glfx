#include "CppGlSl.hs"
uniform sampler3D volumeNoiseTexture;
uniform sampler2D maskTexture;
uniform sampler2D input_light_texture;
uniform sampler3D density_texture;
uniform sampler3D light_texture;
uniform sampler3D ambient_texture;

#include "../../CrossPlatform/SL/gpu_cloud_constants.sl"
#include "../../CrossPlatform/SL/simul_gpu_clouds.sl"

shader void PS_Density(in vec2 texCoords,out vec4 FragColour)
{
	float dens					=CloudDensity(volumeNoiseTexture,maskTexture,texCoords,humidity,diffusivity,octaves,persistence,time,zPixel,zSize,noiseDimsZ
					, noiseScale
				   , baseLayer
					 , transition
					 , upperDensity);

    FragColour					=vec4(dens,0,0,1.0);
}


shader void PS_Lighting(in vec2 texCoords,out vec4 FragColour)
{
	vec2 texcoord				=texCoords.xy;//+texCoordOffset;
	vec4 previous_light			=texture(input_light_texture,texcoord.xy);
	vec3 lightspace_texcoord	=vec3(texcoord.xy,zPosition);
	vec3 densityspace_texcoord	=(vec4(lightspace_texcoord,1.0)*transformMatrix).xyz;
	float density				=texture(density_texture,densityspace_texcoord).x;
	float direct_light			=previous_light.x*exp(-extinctions.x*density*stepLength);
	float indirect_light		=previous_light.y*exp(-extinctions.y*density*stepLength);
    FragColour				=vec4(direct_light,indirect_light,1,1);
}

shader void PS_Transform(in vec2 texCoords,out vec4 FragColour)
{	
	vec3 densityspace_texcoord	=assemble3dTexcoord(texCoords.xy,zPixel, zSize);
	vec3 ambient_texcoord		=vec3(densityspace_texcoord.xy,1.0-zPixel/2.0-densityspace_texcoord.z);
	vec3 lightspace_texcoord	=(vec4(densityspace_texcoord,1.0)*transformMatrix).xyz;
	vec2 light_lookup			=saturate(texture(light_texture,lightspace_texcoord).xy);
	vec2 amb_texel				=texture(ambient_texture,ambient_texcoord).xy;
	float ambient_lookup		=saturate(0.5*(amb_texel.x+amb_texel.y));
	float density				=saturate(texture(density_texture,densityspace_texcoord).x);
    FragColour					=vec4(ambient_lookup,density,light_lookup.x,light_lookup.y);
}

program gpu_density
{
    vs(430) = VS_FullScreen();
    fs(430) = PS_Density();
};

program gpu_lighting
{
    vs(430) = VS_FullScreen();
    fs(430) = PS_Lighting();
};


program gpu_transform
{
    vs(430) = VS_FullScreen();
    fs(430) = PS_Transform();
};

/*
program gpu_density_compute
{
    cs(430)=CS_Density();
};

program gpu_lighting_compute
{
    cs(430)=CS_Density();
};

program gpu_transform_compute
{
    cs(430)=CS_Density();
};*/