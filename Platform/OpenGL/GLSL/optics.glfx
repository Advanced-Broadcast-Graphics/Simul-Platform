#include "CppGlSl.hs"
#include "../../CrossPlatform/SL/optics_constants.sl"

uniform sampler2D flareTexture;
uniform vec4 rect;


shader void VS_Sun( out vec2 texCoords) 
{
	vec2 poss[4]=
	{
		{ 1.0,-1.0},
		{ 1.0, 1.0},
		{-1.0,-1.0},
		{-1.0, 1.0},
	};
	vec3 pos=vec3(poss[gl_VertexID],1.0/tan(radiusRadians));
    gl_Position=mul(worldViewProj,vec4(pos,1.0));
	// Set to far plane so can use depth test as want this geometry effectively at infinity
#ifdef REVERSE_DEPTH
	gl_Position.z = 0.0; 
#else
	gl_Position.z = gl_Position.w; 
#endif
    texCoords=pos.xy;
}

shader void PS_Flare( in vec2 texCoords, out vec4 FragColor)
{
	vec3 res=colour.rgb*texture_clamp(flareTexture,vec2(.5,.5)+0.5*texCoords).rgb;
	FragColor=vec4(res,1.0);
}

program simul_flare
{
    vs(430) = VS_Sun();
    fs(430) = PS_Flare();
};
