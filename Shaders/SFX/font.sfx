//  Copyright (c) 2015-2017 Simul Software Ltd. All rights reserved.
#include "shader_platform.sl"
#include "common.sl"
#include "render_states.sl"
#include "sampler_states.sl"
#include "text_constants.sl"

uniform StructuredBuffer<FontChar> fontChars;
uniform Texture2D fontTexture;

shader posTexVertexOutput VS_Font_SV(idOnly IN)
{
	uint char_index=IN.vertex_id/6;
	uint vert_index=IN.vertex_id-(6*char_index);
	uint ids[]={0,1,2,2,3,1};
	FontChar f=fontChars[char_index];
	idOnly cIN;
	cIN.vertex_id=ids[vert_index];
	
	#ifdef  SFX_OPENGL
	f.text_rect.y *= -1;
	f.text_rect.y -= f.text_rect.w;
	#endif
	
	posTexVertexOutput OUT	= VS_ScreenQuad(cIN, f.text_rect);
	OUT.texCoords			= vec4(f.texc.xy+f.texc.zw*OUT.texCoords.xy,0.0,1.0).xy;
	return OUT;
}

shader posTexVertexOutput VS_Font_MV(VertexAndViewID IN)
{
	uint char_index=IN.vertex_id/6;
	uint vert_index=IN.vertex_id-(6*char_index);
	uint ids[]={0,1,2,2,3,1};
	FontChar f=fontChars[char_index+(numChars*IN.view_id)];
	idOnly cIN;
	cIN.vertex_id=ids[vert_index];
	
	#ifdef  SFX_OPENGL
	f.text_rect.y *= -1;
	f.text_rect.y -= f.text_rect.w;
	#endif
	
	posTexVertexOutput OUT	= VS_ScreenQuad(cIN, f.text_rect);
	OUT.texCoords			= vec4(f.texc.xy+f.texc.zw*OUT.texCoords.xy,0.0,1.0).xy;
	return OUT;
}
 
shader vec4 PS_Font(posTexVertexOutput IN) : SV_TARGET
{
	vec2 tc	=IN.texCoords;
	tc.y		=1.0-tc.y;

	vec4 lookup	= colour*texture_clamp_lod(fontTexture,tc,0);
	lookup.a = 0;
	return lookup;
}

shader posTexVertexOutput VS_Background_SV(idOnly IN)
{
	posTexVertexOutput OUT	= VS_ScreenQuad(IN, background_rect[0]);
	OUT.texCoords			= vec2(0,0);
	return OUT;
}

shader posTexVertexOutput VS_Background_MV(VertexAndViewID IN)
{
	idOnly _IN;
	_IN.vertex_id = IN.vertex_id;
	posTexVertexOutput OUT	= VS_ScreenQuad(_IN, background_rect[IN.view_id]);
	OUT.texCoords			= vec2(0,0);
	return OUT;
}

shader vec4 PS_Background(posTexVertexOutput IN) : SV_TARGET
{
	return background;
}

BlendState AlphaBlendRGB
{
	BlendEnable[0]		= TRUE;
	SrcBlend			= SRC_ALPHA;
	DestBlend			= INV_SRC_ALPHA;
	BlendOp				= ADD;
	SrcBlendAlpha		= ZERO;
	DestBlendAlpha		= ZERO;
	BlendOpAlpha		= ADD;
	RenderTargetWriteMask[0] = 7;
};

BlendState AddBlendRGB
{
	BlendEnable[0]	=TRUE;
	BlendEnable[1]	=TRUE;
	SrcBlend		=ONE;
	DestBlend		=ONE;
	RenderTargetWriteMask[0] = 7;
};

technique backg
{
	pass multiview
	{
		SetRasterizerState( RenderNoCull );
		SetTopology( TriangleStrip );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AlphaBlendInvAlpha,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_6_1, VS_Background_MV()));
		SetPixelShader(CompileShader(ps_4_0, PS_Background()));
	}
	pass singleview
	{
		SetRasterizerState(RenderNoCull);
		SetTopology(TriangleStrip);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AlphaBlendInvAlpha, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Background_SV()));
		SetPixelShader(CompileShader(ps_4_0, PS_Background()));
	}
}

technique text
{
	pass multiview
	{
		SetRasterizerState( RenderNoCull );
		SetTopology( TriangleList );
		SetDepthStencilState( DisableDepth, 0 );
		SetBlendState(AddBlendRGB,vec4( 0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF );
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_6_1, VS_Font_MV()));
		SetPixelShader(CompileShader(ps_4_0, PS_Font()));
	}
	pass singleview
	{
		SetRasterizerState(RenderNoCull);
		SetTopology(TriangleList);
		SetDepthStencilState(DisableDepth, 0);
		SetBlendState(AddBlendRGB, vec4(0.0, 0.0, 0.0, 0.0), 0xFFFFFFFF);
		SetGeometryShader(NULL);
		SetVertexShader(CompileShader(vs_4_0, VS_Font_SV()));
		SetPixelShader(CompileShader(ps_4_0, PS_Font()));
	}
}