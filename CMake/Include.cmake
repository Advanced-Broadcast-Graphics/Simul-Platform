include_guard()

set( CMAKE_CXX_STANDARD 17 )
set( CMAKE_CXX_STANDARD_REQUIRED ON )
set( CMAKE_CXX_EXTENSIONS ON )
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
SET( CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} ")
set( CMAKE_EXPORT_COMPILE_COMMANDS "ON" )
set( CMAKE_POSITION_INDEPENDENT_CODE ON )

# Set the output folder where program will be created
set( EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR}/eop/ )
set( LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR}/lop/ )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/lib/ )
set( CMAKE_CACHEFILE_DIR ${CMAKE_BINARY_DIR}/cachefiles/ )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/ )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/ )
set( CMAKE_PDB_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/bin/ )

set(STATIC_LINK_SUFFIX "")
set(DYNAMIC_LINK_SUFFIX "") 
set(SIMUL_DYNAMIC_LIBS OFF )

if(${CMAKE_SYSTEM_NAME} MATCHES "Windows" OR ${CMAKE_SYSTEM_NAME} MATCHES "Generic")
	set(STATIC_LINK_SUFFIX "_MT")
	set(DYNAMIC_LINK_SUFFIX "_MD")
	set(SIMUL_DYNAMIC_LIBS ON )
	set(MSVC 1)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Od /Ob2 /DNDEBUG /DSIMUL_EDITOR=1 /Zi")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi /Ob0 /Od /RTC1 /DSIMUL_EDITOR=1")
	set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} /DEBUG")
	link_directories(${VULKAN_SDK_DIR}/Lib)
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Durango")
	set(DYNAMIC_LINK_SUFFIX "_XboxOne")
	set(STATIC_LINK_SUFFIX "_XboxOne")
	set(MSVC 1)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Od /Ob2 /DNDEBUG /Zi /EHsc")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi /Ob0 /Od /DDEBUG /D_DEBUG /RTC1 /EHsc")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Gaming.Xbox.x64")
	set(DYNAMIC_LINK_SUFFIX "_GDK")
	set(STATIC_LINK_SUFFIX "_GDK")
	set(MSVC 1)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Od /Ob2 /DNDEBUG /Zi /EHsc")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /Zi /Ob0 /Od /DDEBUG /D_DEBUG /RTC1 /EHsc")
elseif(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_DEBUG -DDEBUG")
	set(STATIC_LINK_SUFFIX "_MT")
	set(DYNAMIC_LINK_SUFFIX "_MD")
	set(SIMUL_DYNAMIC_LIBS ON )
elseif(PLATFORM_PS4)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -D__ORBIS__=1")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D__ORBIS__=1")

else()
	set(MSVC 0)
endif()

function(set_target_runtime targname rt)
	# Default to statically-linked runtime.
	if("${rt}" STREQUAL "")
		set(rt "static")
	endif()
	if(${MSVC})
		if(${rt} STREQUAL "static")
			SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MT$<$<CONFIG:Debug>:d>")
		else()
			SET_TARGET_PROPERTIES(${targname} PROPERTIES COMPILE_OPTIONS "/MD$<$<CONFIG:Debug>:d>")
		endif()
	endif()
endfunction()

function(LibraryDefaults targname)
	if(SIMUL_INTERNAL_CHECKS)
		target_compile_definitions(${targname} PRIVATE SIMUL_INTERNAL_CHECKS=1 )
	else()
		target_compile_definitions(${targname} PRIVATE SIMUL_INTERNAL_CHECKS=0 )
	endif()
	target_include_directories(${targname} PRIVATE "${CMAKE_CURRENT_SOURCE_DIR}")
	target_include_directories(${targname} PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}")
	target_include_directories(${targname} PRIVATE "${CMAKE_SOURCE_DIR}/..")
	target_include_directories(${targname} PRIVATE "${CMAKE_SOURCE_DIR}/../..")

	# The prebuilt libraries live here if not a source build:
	if(NOT SIMUL_SOURCE_BUILD)
		target_link_directories(${targname} PRIVATE ${SIMUL_BUILD_LOCATION}/lib )
	endif()
	if(XBOXONE)
		target_compile_options(${targname} PRIVATE "/AI${XDK_ROOT}/${XDK_TOOLCHAIN_VERSION}/xdk/VS2017/vc/platform/amd64")
		target_compile_options(${targname} PRIVATE /diagnostics:classic /GS /TP /W3 /wd4011 /wd4514 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Zc:inline)
		target_compile_options(${targname} PRIVATE /fp:fast /DWINAPI_FAMILY=WINAPI_FAMILY_TV_TITLE /D_DURANGO /D_XBOX_ONE /DWIN32_LEAN_AND_MEAN)
		target_compile_options(${targname} PRIVATE /errorReport:prompt /WX- /Zc:forScope /RTC1 /arch:AVX /Gd /nologo) 
		target_link_options(${targname} PRIVATE /DEBUG)
		add_definitions( -D_UNICODE -DUNICODE )
	elseif(GDK)
		#target_compile_options(${targname} PRIVATE /diagnostics:classic /GS /TP /W3 /wd4011 /wd4514 /Zc:wchar_t /Zi /Gm- /Od /Ob0 /Zc:inline)
		target_compile_options(${targname} PRIVATE /fp:fast /DWINAPI_FAMILY=WINAPI_FAMILY_TV_TITLE /D_GDK /DWIN32_LEAN_AND_MEAN)
		#target_compile_options(${targname} PRIVATE /errorReport:prompt /WX- /Zc:forScope /RTC1 /arch:AVX /Gd /nologo) 
		target_link_options(${targname} PRIVATE /DEBUG)
		add_definitions( -D_UNICODE -DUNICODE )
	elseif(MSVC)
		add_definitions( -DWIN64 )
		target_compile_options(${targname} PRIVATE /W3 /wd4011 /wd4514 )
		target_link_options(${targname} PRIVATE /DEBUG)
		add_definitions( -DUNICODE -D_UNICODE -DSIMUL_BUILD_NUMBER=$ENV{SIMUL_BUILD_NUMBER} )
	else()
		target_compile_options(${targname} PRIVATE -Wall -Wextra -pedantic -Werror -Wno-keyword-macro -Wno-ignored-qualifiers -Wno-unused-function -Wno-sign-compare -Wno-gnu-anonymous-struct -Wno-gnu-redeclared-enum -Wno-nested-anon-types -Wno-gnu-zero-variadic-macro-arguments -Wno-unused-parameter -Wno-unused-variable -Wno-unused-value -Wno-missing-braces )
		target_compile_options(${targname} PUBLIC -Wall -Wextra -pedantic -Werror -Wno-keyword-macro -Wno-ignored-qualifiers -Wno-unused-function -Wno-sign-compare -Wno-gnu-anonymous-struct -Wno-gnu-redeclared-enum -Wno-nested-anon-types -Wno-gnu-zero-variadic-macro-arguments -Wno-unused-parameter -Wno-unused-variable -Wno-unused-value -Wno-missing-braces )
	endif()
endfunction()

function(ImportedLibraryDefaults target)
	set_target_properties(${target} PROPERTIES IMPORTED_LOCATION_DEBUG "${CMAKE_SOURCE_DIR}/build/lib/Debug/${target}${CMAKE_DEBUG_POSTFIX}${CMAKE_LINK_LIBRARY_SUFFIX}")
	set_target_properties(${target} PROPERTIES IMPORTED_LOCATION_RELEASE "${CMAKE_SOURCE_DIR}/build/lib/Release/${target}${CMAKE_LINK_LIBRARY_SUFFIX}")
	set_target_properties(${target} PROPERTIES IMPORTED_IMPLIB_DEBUG "${target}${CMAKE_DEBUG_POSTFIX}${CMAKE_LINK_LIBRARY_SUFFIX}")
	set_target_properties(${target} PROPERTIES IMPORTED_IMPLIB_RELEASE "${target}${CMAKE_LINK_LIBRARY_SUFFIX}")
	get_target_property( LOD ${target} IMPORTED_LOCATION_DEBUG )
endfunction()

function(add_static_library libname)
	cmake_parse_arguments(add_static_library "" "RUNTIME" "SOURCES;DEFINITIONS;PROPERTIES;INCLUDES;PUBLICINCLUDES" ${ARGN} )
	if(NOT SIMUL_SOURCE_BUILD)
		set(IMP_LIB IMPORTED GLOBAL )
	else()
		set(IMP_LIB ${add_static_library_SOURCES})
	endif()
	set(LINK_SUFFIX ${STATIC_LINK_SUFFIX})
	if(XBOXONE)
		set(LINK_SUFFIX "_MD" )
	elseif(GDK)
		set(LINK_SUFFIX "_MD" )
	else()
		if("${add_static_library_RUNTIME}" STREQUAL "MD")
			set(LINK_SUFFIX "_MD" )
		endif()
	endif()

	set(target "${libname}${LINK_SUFFIX}")
	add_library(${target} STATIC ${IMP_LIB} )
	if(SIMUL_SOURCE_BUILD)
		if(XBOXONE OR GDK)
			set_target_runtime(${target} dynamic)
			set_target_properties( ${target} PROPERTIES SUFFIX ".lib" )
		endif()
		if(XBOXONE )
			set_property(TARGET ${target} PROPERTY PROJECT_LABEL ${libname}_XboxOne )
		endif()
		if(GDK)
			set_property(TARGET ${target} PROPERTY PROJECT_LABEL ${libname}_GDK )
		endif()
		LibraryDefaults(${target})
		set(srcs_includes)
		foreach(in_f ${add_static_library_SOURCES})
			string(FIND ${in_f} ".h" slpos REVERSE)
			if(NOT slpos EQUAL -1)
				list(APPEND srcs_includes ${in_f})
			endif()
		endforeach()
		set_source_files_properties(${srcs_includes} PROPERTIES HEADER_FILE_ONLY TRUE)
		if( SIMUL_DYNAMIC_LIBS )
			if(NOT "${add_static_library_RUNTIME}" STREQUAL "MD")
				set_target_runtime(${target} static)
				set_target_properties( ${target} PROPERTIES FOLDER Static)
			else()
				set_target_properties( ${target} PROPERTIES FOLDER Dynamic)
			endif()
		endif()
		if(NOT "${add_static_library_PROPERTIES}" STREQUAL "")
			set_target_properties( ${target} PROPERTIES ${add_static_library_PROPERTIES})
		endif()
		if(NOT "${add_static_library_INCLUDES}" STREQUAL "")
			target_include_directories(${target} PRIVATE ${add_static_library_INCLUDES}
			)
		endif()
		if(NOT "${add_static_library_PUBLICINCLUDES}" STREQUAL "")
			target_include_directories(${target} PUBLIC ${add_static_library_PUBLICINCLUDES}
			)
		endif()
		target_compile_definitions(${target} PRIVATE ${add_static_library_DEFINITIONS})
		install( TARGETS ${target} DESTINATION ${LIBRARY_OUTPUT_PATH} )
		set_target_properties(${target} PROPERTIES PREFIX "" )
	else()
		ImportedLibraryDefaults(${target})
	endif()
endfunction()



function(add_dynamic_library libname)
	if( SIMUL_DYNAMIC_LIBS )
		add_dll( ${libname} ${ARGN} )
	endif()
endfunction()

function(add_dll libname)
	set(target "${libname}${DYNAMIC_LINK_SUFFIX}")
	cmake_parse_arguments(add_dynamic_library "" "RUNTIME" "SOURCES;DEFINITIONS;LINK;PROPERTIES;INCLUDES;PUBLICINCLUDES" ${ARGN} )
	if(NOT SIMUL_SOURCE_BUILD)
		set(IMP_LIB IMPORTED GLOBAL)
	else()
		set(IMP_LIB ${add_dynamic_library_SOURCES} )
	endif()
	add_library(${target} SHARED ${IMP_LIB})
	if(XBOXONE)
		set_target_runtime(${target} dynamic)
		set_target_properties(${target} PROPERTIES VS_USER_PROPS "${CMAKE_SOURCE_DIR}/Platform/XboxOne/SimulXboxOne.props")
		set_target_properties( ${target} PROPERTIES SUFFIX ".dll" )
		set_property(TARGET ${target} PROPERTY PROJECT_LABEL ${libname}_XboxOne )
		set_target_properties(${target} PROPERTIES ARCHIVE_OUTPUT_NAME "${target}arch" )
		set(DYNLINK "")
	elseif(PLATFORM_PS4)
		set_target_properties( ${target} PROPERTIES SUFFIX ".prx" )
	else()
		set(DYNLINK SIMUL_DYNAMIC_LINK=1)
	endif()

	set(srcs_includes)
	foreach(in_f ${add_dynamic_library_SOURCES})
		string(FIND ${in_f} ".h" slpos REVERSE)
		if(NOT slpos EQUAL -1)
			list(APPEND srcs_includes ${in_f})
		endif()
	endforeach()
	set_source_files_properties(${srcs_includes} PROPERTIES HEADER_FILE_ONLY TRUE)
	
	if(SIMUL_SOURCE_BUILD)
		LibraryDefaults(${target})
		set_target_properties( ${target} PROPERTIES FOLDER Dynamic)
		if(NOT "${add_dynamic_library_PROPERTIES}" STREQUAL "")
			set_target_properties( ${target} PROPERTIES  ${add_dynamic_library_PROPERTIES})
		endif()
		if(NOT "${add_dynamic_library_INCLUDES}" STREQUAL "")
			target_include_directories(${target} PRIVATE ${add_dynamic_library_INCLUDES} )
		endif()
		if(NOT "${add_dynamic_library_PUBLICINCLUDES}" STREQUAL "")
			target_include_directories(${target} PUBLIC ${add_dynamic_library_PUBLICINCLUDES} )
		endif()
		target_compile_definitions(${target} PRIVATE ${add_dynamic_library_DEFINITIONS} ${DYNLINK} )
		install( TARGETS ${target} DESTINATION ${LIBRARY_OUTPUT_PATH} )
		target_link_libraries( ${target} ${add_dynamic_library_LINK} )
		set_target_properties( ${target} PROPERTIES PREFIX "" )
	else()
		ImportedLibraryDefaults(${target})
	endif()
endfunction()

function(ExecutableDefaults target)
	set_target_properties(${target} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
                                               VS_DEBUGGER_ENVIRONMENT       "PATH=${fx_path};${SIMUL_DEFAULT_BUILD_PATH}/bin/${CONFIG_NAME};$(PATH)\nSIMUL=${SIMUL_DIR}\nSIMUL_BUILD=${CMAKE_BINARY_DIR}\n${VS_DEBUGGER_ENVIRONMENT}")
endfunction()

function(add_static_executable target)
	add_executable(${ARGV})
	if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		set_target_properties( ${target} PROPERTIES SUFFIX ".exe" )
		set_target_properties( ${target} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
			VS_DEBUGGER_ENVIRONMENT       "Path=${SIMUL_BUILD_LOCATION}/bin/${CONFIG_NAME};$(PATH)\nSIMUL=${SIMUL_DIR}\nSIMUL_BUILD=${SIMUL_BUILD_LOCATION}")
	endif()
	set_target_runtime(${target} static)
	LibraryDefaults(${target})
	ExecutableDefaults(${target})
endfunction()

function(add_dynamic_executable target)
	add_executable(${ARGV})
	if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
		set_target_properties( ${target} PROPERTIES SUFFIX ".exe" )
	endif()
	set_target_runtime(${target} dynamic)
	LibraryDefaults(${target})
	ExecutableDefaults(${target})
	set_target_properties( ${target} PROPERTIES VS_DEBUGGER_WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
                                               VS_DEBUGGER_ENVIRONMENT       "Path=${SIMUL_BUILD_LOCATION}/bin/${CONFIG_NAME};$(PATH)\nSIMUL=${SIMUL_DIR}\nSIMUL_BUILD=${SIMUL_BUILD_LOCATION}")
endfunction()