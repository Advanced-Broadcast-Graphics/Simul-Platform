#include "shader_platform.sl"
#include "common.sl"
#include "raytrace.sl"
#include "camera_constants.sl"
#include "solid_constants.sl"


RaytracingAccelerationStructure Scene : register(t25, space0);
RWTexture2D<vec4> RenderTarget : register(u0);
ConstantBuffer<RayGenConstantBuffer> g_rayGenCB : register(b0);
uniform StructuredBuffer<Light> lights;

struct RayPayload
{
    float dist;
    vec3 colour;
};
struct ShadowPayload
{
    float dist;
    bool is_hit;
};

bool IsInsideViewport(vec2 p, Viewport viewport)
{
    return (p.x >= viewport.left && p.x <= viewport.right)
        && (p.y >= viewport.top && p.y <= viewport.bottom);
}

void MyRaygenShader()
{
    uint3 ray_index=DispatchRaysIndex();
    uint3 ray_dim=DispatchRaysDimensions();
    vec2 lerpValues = vec2(ray_index.xy)/vec2(ray_dim.xy);
    vec2 screenPos = vec2(-1.0,1.0)+lerpValues*vec2(2.0,-2.0);
    vec3 view=-ClipPosToView(screenPos.xy);
    // Orthographic projection since we're raytracing in screen space.
    vec3 rayDir = view;//vec3(0, 0, -1.0);
    float c=20.0;
    vec3 origin = viewPosition;//vec3(        lerp(-c, c, 
    RayDesc ray;
    ray.Origin = origin;
    ray.Direction = rayDir;
    // Set TMin to a non-zero small value to avoid aliasing issues ue to floating - point errors.
    // TMin should be kept small to prevent missing geometry at lose contact areas.
    ray.TMin = 0.001;
    ray.TMax = 1000.0;
    RayPayload payload = { 0,vec3(1.0,1.0, 1.0) };
    TraceRay(Scene, RAY_FLAG_CULL_BACK_FACING_TRIANGLES
         , 0xFF, 0, 0, 1, ray, payload);
    vec3 pos    =origin+rayDir*payload.dist;
    vec3 colour =payload.colour;//*saturate(payload.dist/25.0);
    //RAY_FLAG_CULL_BACK_FACING_TRIANGLES
    // Write the raytraced color to the output texture.
    RenderTarget[ray_index.xy] = vec4(colour.rgb,1.0-colour.r);
}

//[shader("closesthit")]
void InitialClosestHit(inout RayPayload payload, in BuiltInTriangleIntersectionAttributes attr)
{
    float3 barycentrics = float3(2 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);
   // payload.color = float4(RayTCurrent(),attr.barycentrics.xy, 1);
    payload.dist= RayTCurrent();
    payload.colour= vec3(1,1,1);
    RayDesc ray;
    ray.Origin = WorldRayOrigin()+RayTCurrent()*WorldRayDirection();
    ray.Direction = -lights[0].direction;
    ray.TMin = 0.01;
    ray.TMax = 1000.0;
    ShadowPayload shadowPayload;
    shadowPayload.is_hit=false;
    shadowPayload.dist=0.0;
    TraceRay(Scene, RAY_FLAG_CULL_BACK_FACING_TRIANGLES         , 0xFF, 1, 0, 1, ray, payload);
    if(shadowPayload.is_hit)
        payload.colour*=1.0-exp(-shadowPayload.dist/5.0);
}

void MyAnyHitShader(inout RayPayload payload, in BuiltInTriangleIntersectionAttributes attr)
{
    payload.colour= vec3(1,1,1);
    payload.dist= RayTCurrent();
}

void ShadowHit(inout ShadowPayload shadowPayload, in BuiltInTriangleIntersectionAttributes attr)
{
    shadowPayload.dist= RayTCurrent();
    shadowPayload.is_hit=true;
}

void MyMissShader(inout RayPayload payload)
{
    payload.dist    =10000.0;
}

void MyIntersectionShader()
{
}

technique raytrace
{
    raytrace_pass raytrace1
    {
        RayGeneration=CompileShader(lib_6_3,MyRaygenShader);
        Miss=CompileShader(lib_6_3,MyMissShader);
        HitGroup MainHitGroup
        {
            //Intersection=CompileShader(lib_6_3,MyIntersectionShader); //Optional
            AnyHit = CompileShader(lib_6_3, MyAnyHitShader);          //Optional 
            ClosestHit=CompileShader(lib_6_3,InitialClosestHit);
        };
        HitGroup SecondHitGroup
        {
            ClosestHit=CompileShader(lib_6_3,ShadowHit);
        };

        RayTracingShaderConfig
        {
            MaxPayloadSize = 16;
            //MaxAttributeSize = 8; //Optional if using BuiltInTriangleIntersectionAttributes
        };
        RayTracingPipelineConfig
        {
            MaxTraceRecursionDepth = 2;
        };
    }
}