#include "shader_platform.sl"
#include "raytrace.sl"


RaytracingAccelerationStructure Scene : register(t25, space0);
RWTexture2D<vec4> RenderTarget : register(u0);
ConstantBuffer<RayGenConstantBuffer> g_rayGenCB : register(b0);

struct RayPayload
{
    float dist;
    vec3 colour;
};

bool IsInsideViewport(vec2 p, Viewport viewport)
{
    return (p.x >= viewport.left && p.x <= viewport.right)
        && (p.y >= viewport.top && p.y <= viewport.bottom);
}

void MyRaygenShader()
{
   uint3 ray_index=DispatchRaysIndex();
    uint3 ray_dim=DispatchRaysDimensions();
    vec2 lerpValues = vec2(ray_index.xy)/vec2(ray_dim.xy);
    // Orthographic projection since we're raytracing in screen space.
    vec3 rayDir = vec3(0, 0, -1.0);
    float c=20.0;
    vec3 origin = vec3(
        lerp(-c, c, lerpValues.x),
        lerp(-c, c, lerpValues.y),
        30.0f);
       // RenderTarget[ray_index.xy] = vec4(1, lerpValues.xy, 1);
      
   // if (IsInsideViewport(origin.xy, g_rayGenCB.stencil))
    {
        //RenderTarget[ray_index.xy] = vec4(1.0,0,0,0);
       
        // Trace the ray.
        // Set the ray's extents.
        RayDesc ray;
        ray.Origin = origin;
        ray.Direction = rayDir;
        // Set TMin to a non-zero small value to avoid aliasing issues due to floating - point errors.
        // TMin should be kept small to prevent missing geometry at close contact areas.
        ray.TMin = 0.001;
        ray.TMax = 1000.0;
        RayPayload payload = { 0,vec3( 0,.3, 0) };
        TraceRay(Scene, RAY_FLAG_NONE, 0xFF, 0, 0, 0, ray, payload);
        vec3 pos=origin+rayDir*payload.dist;
        payload.colour.rgb*=saturate(pos.z/25.0);
        //RAY_FLAG_CULL_BACK_FACING_TRIANGLES
        // Write the raytraced color to the output texture.
        RenderTarget[ray_index.xy] = vec4(payload.colour,0);
    }
    //else
    {
        // Render interpolated DispatchRaysIndex outside the stencil window
      //  RenderTarget[ray_index.xy] = vec4(lerpValues, 0, 1);
    }
}

//[shader("closesthit")]
void MyClosestHitShader(inout RayPayload payload, in BuiltInTriangleIntersectionAttributes attr)
{
    float3 barycentrics = float3(2 - attr.barycentrics.x - attr.barycentrics.y, attr.barycentrics.x, attr.barycentrics.y);
   // payload.color = float4(RayTCurrent(),attr.barycentrics.xy, 1);
    payload.dist= RayTCurrent();
    payload.colour= barycentrics.xyz;//vec3(0.5,0.5,1);
}
void MyAnyHitShader(inout RayPayload payload, in BuiltInTriangleIntersectionAttributes attr)
{
    payload.colour= vec3(1,0,0);
    payload.dist= RayTCurrent();
}

//[shader("miss")]
void MyMissShader(inout RayPayload payload)
{
    payload.colour= vec3(.25, 0.1, 0);
    payload.dist=10000.0;
}

technique raytrace
{
    pass raytrace
    {
		SetRayGenerationShader(CompileShader(lib_6_3,MyRaygenShader()));
		SetClosestHitShader(CompileShader(lib_6_3,MyClosestHitShader()));
		//SetAnyHitShader(CompileShader(lib_6_3,MyAnyHitShader()));
		SetMissShader(CompileShader(lib_6_3,MyMissShader()));
    }
}